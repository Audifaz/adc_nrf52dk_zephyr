
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200017c0 	.word	0x200017c0
}
   4:	00001ac5 	.word	0x00001ac5
   8:	0000438d 	.word	0x0000438d
   c:	00001af5 	.word	0x00001af5
  10:	00001af5 	.word	0x00001af5
  14:	00001af5 	.word	0x00001af5
  18:	00001af5 	.word	0x00001af5
	...
  2c:	00001a21 	.word	0x00001a21
  30:	00001af5 	.word	0x00001af5
  34:	00000000 	.word	0x00000000
  38:	000019cd 	.word	0x000019cd
  3c:	00004367 	.word	0x00004367

00000040 <_irq_vector_table>:
  40:	00001a85 00001a85 00001a85 00001a85     ................
  50:	00001a85 00001a85 00001a85 00001a85     ................
  60:	00001a85 00001a85 00001a85 00001a85     ................
  70:	00001a85 00001a85 00001a85 00001a85     ................
  80:	00001a85 00001a85 00001a85 00001a85     ................
  90:	00001a85 00001a85 00001a85 00001a85     ................
  a0:	00001a85 00001a85 00001a85 00001a85     ................
  b0:	00001a85 00001a85 00001a85 00001a85     ................
  c0:	00001a85 00001a85 00001a85 00001a85     ................
  d0:	00001a85 00001a85 00001a85              ............

Disassembly of section text:

000000dc <__aeabi_frsub>:
      dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
      e0:	e002      	b.n	e8 <__addsf3>
      e2:	bf00      	nop

000000e4 <__aeabi_fsub>:
      e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000000e8 <__addsf3>:
      e8:	0042      	lsls	r2, r0, #1
      ea:	bf1f      	itttt	ne
      ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
      f0:	ea92 0f03 	teqne	r2, r3
      f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
      f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
      fc:	d06a      	beq.n	1d4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x8a>
      fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
     102:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     106:	bfc1      	itttt	gt
     108:	18d2      	addgt	r2, r2, r3
     10a:	4041      	eorgt	r1, r0
     10c:	4048      	eorgt	r0, r1
     10e:	4041      	eorgt	r1, r0
     110:	bfb8      	it	lt
     112:	425b      	neglt	r3, r3
     114:	2b19      	cmp	r3, #25
     116:	bf88      	it	hi
     118:	4770      	bxhi	lr
     11a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     11e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     122:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     126:	bf18      	it	ne
     128:	4240      	negne	r0, r0
     12a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     12e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     132:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     136:	bf18      	it	ne
     138:	4249      	negne	r1, r1
     13a:	ea92 0f03 	teq	r2, r3
     13e:	d03f      	beq.n	1c0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x76>
     140:	f1a2 0201 	sub.w	r2, r2, #1
     144:	fa41 fc03 	asr.w	ip, r1, r3
     148:	eb10 000c 	adds.w	r0, r0, ip
     14c:	f1c3 0320 	rsb	r3, r3, #32
     150:	fa01 f103 	lsl.w	r1, r1, r3
     154:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     158:	d502      	bpl.n	160 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x16>
     15a:	4249      	negs	r1, r1
     15c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     160:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     164:	d313      	bcc.n	18e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x44>
     166:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     16a:	d306      	bcc.n	17a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x30>
     16c:	0840      	lsrs	r0, r0, #1
     16e:	ea4f 0131 	mov.w	r1, r1, rrx
     172:	f102 0201 	add.w	r2, r2, #1
     176:	2afe      	cmp	r2, #254	; 0xfe
     178:	d251      	bcs.n	21e <CONFIG_FLASH_SIZE+0x1e>
     17a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     17e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     182:	bf08      	it	eq
     184:	f020 0001 	biceq.w	r0, r0, #1
     188:	ea40 0003 	orr.w	r0, r0, r3
     18c:	4770      	bx	lr
     18e:	0049      	lsls	r1, r1, #1
     190:	eb40 0000 	adc.w	r0, r0, r0
     194:	3a01      	subs	r2, #1
     196:	bf28      	it	cs
     198:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     19c:	d2ed      	bcs.n	17a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x30>
     19e:	fab0 fc80 	clz	ip, r0
     1a2:	f1ac 0c08 	sub.w	ip, ip, #8
     1a6:	ebb2 020c 	subs.w	r2, r2, ip
     1aa:	fa00 f00c 	lsl.w	r0, r0, ip
     1ae:	bfaa      	itet	ge
     1b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     1b4:	4252      	neglt	r2, r2
     1b6:	4318      	orrge	r0, r3
     1b8:	bfbc      	itt	lt
     1ba:	40d0      	lsrlt	r0, r2
     1bc:	4318      	orrlt	r0, r3
     1be:	4770      	bx	lr
     1c0:	f092 0f00 	teq	r2, #0
     1c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1c8:	bf06      	itte	eq
     1ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1ce:	3201      	addeq	r2, #1
     1d0:	3b01      	subne	r3, #1
     1d2:	e7b5      	b.n	140 <CONFIG_IDLE_STACK_SIZE>
     1d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     1d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     1dc:	bf18      	it	ne
     1de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     1e2:	d021      	beq.n	228 <CONFIG_FLASH_SIZE+0x28>
     1e4:	ea92 0f03 	teq	r2, r3
     1e8:	d004      	beq.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     1ea:	f092 0f00 	teq	r2, #0
     1ee:	bf08      	it	eq
     1f0:	4608      	moveq	r0, r1
     1f2:	4770      	bx	lr
     1f4:	ea90 0f01 	teq	r0, r1
     1f8:	bf1c      	itt	ne
     1fa:	2000      	movne	r0, #0
     1fc:	4770      	bxne	lr
     1fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     202:	d104      	bne.n	20e <CONFIG_FLASH_SIZE+0xe>
     204:	0040      	lsls	r0, r0, #1
     206:	bf28      	it	cs
     208:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     20c:	4770      	bx	lr
     20e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     212:	bf3c      	itt	cc
     214:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     218:	4770      	bxcc	lr
     21a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     21e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     222:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     226:	4770      	bx	lr
     228:	ea7f 6222 	mvns.w	r2, r2, asr #24
     22c:	bf16      	itet	ne
     22e:	4608      	movne	r0, r1
     230:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     234:	4601      	movne	r1, r0
     236:	0242      	lsls	r2, r0, #9
     238:	bf06      	itte	eq
     23a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     23e:	ea90 0f01 	teqeq	r0, r1
     242:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     246:	4770      	bx	lr

00000248 <__aeabi_ui2f>:
     248:	f04f 0300 	mov.w	r3, #0
     24c:	e004      	b.n	258 <__aeabi_i2f+0x8>
     24e:	bf00      	nop

00000250 <__aeabi_i2f>:
     250:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     254:	bf48      	it	mi
     256:	4240      	negmi	r0, r0
     258:	ea5f 0c00 	movs.w	ip, r0
     25c:	bf08      	it	eq
     25e:	4770      	bxeq	lr
     260:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     264:	4601      	mov	r1, r0
     266:	f04f 0000 	mov.w	r0, #0
     26a:	e01c      	b.n	2a6 <__aeabi_l2f+0x2a>

0000026c <__aeabi_ul2f>:
     26c:	ea50 0201 	orrs.w	r2, r0, r1
     270:	bf08      	it	eq
     272:	4770      	bxeq	lr
     274:	f04f 0300 	mov.w	r3, #0
     278:	e00a      	b.n	290 <__aeabi_l2f+0x14>
     27a:	bf00      	nop

0000027c <__aeabi_l2f>:
     27c:	ea50 0201 	orrs.w	r2, r0, r1
     280:	bf08      	it	eq
     282:	4770      	bxeq	lr
     284:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     288:	d502      	bpl.n	290 <__aeabi_l2f+0x14>
     28a:	4240      	negs	r0, r0
     28c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     290:	ea5f 0c01 	movs.w	ip, r1
     294:	bf02      	ittt	eq
     296:	4684      	moveq	ip, r0
     298:	4601      	moveq	r1, r0
     29a:	2000      	moveq	r0, #0
     29c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2a0:	bf08      	it	eq
     2a2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2a6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2aa:	fabc f28c 	clz	r2, ip
     2ae:	3a08      	subs	r2, #8
     2b0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2b4:	db10      	blt.n	2d8 <__aeabi_l2f+0x5c>
     2b6:	fa01 fc02 	lsl.w	ip, r1, r2
     2ba:	4463      	add	r3, ip
     2bc:	fa00 fc02 	lsl.w	ip, r0, r2
     2c0:	f1c2 0220 	rsb	r2, r2, #32
     2c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2c8:	fa20 f202 	lsr.w	r2, r0, r2
     2cc:	eb43 0002 	adc.w	r0, r3, r2
     2d0:	bf08      	it	eq
     2d2:	f020 0001 	biceq.w	r0, r0, #1
     2d6:	4770      	bx	lr
     2d8:	f102 0220 	add.w	r2, r2, #32
     2dc:	fa01 fc02 	lsl.w	ip, r1, r2
     2e0:	f1c2 0220 	rsb	r2, r2, #32
     2e4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     2e8:	fa21 f202 	lsr.w	r2, r1, r2
     2ec:	eb43 0002 	adc.w	r0, r3, r2
     2f0:	bf08      	it	eq
     2f2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     2f6:	4770      	bx	lr

000002f8 <__aeabi_fmul>:
     2f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     2fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     300:	bf1e      	ittt	ne
     302:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     306:	ea92 0f0c 	teqne	r2, ip
     30a:	ea93 0f0c 	teqne	r3, ip
     30e:	d06f      	beq.n	3f0 <__aeabi_fmul+0xf8>
     310:	441a      	add	r2, r3
     312:	ea80 0c01 	eor.w	ip, r0, r1
     316:	0240      	lsls	r0, r0, #9
     318:	bf18      	it	ne
     31a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     31e:	d01e      	beq.n	35e <__aeabi_fmul+0x66>
     320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     324:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     328:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     32c:	fba0 3101 	umull	r3, r1, r0, r1
     330:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     334:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     338:	bf3e      	ittt	cc
     33a:	0049      	lslcc	r1, r1, #1
     33c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     340:	005b      	lslcc	r3, r3, #1
     342:	ea40 0001 	orr.w	r0, r0, r1
     346:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     34a:	2afd      	cmp	r2, #253	; 0xfd
     34c:	d81d      	bhi.n	38a <__aeabi_fmul+0x92>
     34e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     352:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     356:	bf08      	it	eq
     358:	f020 0001 	biceq.w	r0, r0, #1
     35c:	4770      	bx	lr
     35e:	f090 0f00 	teq	r0, #0
     362:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     366:	bf08      	it	eq
     368:	0249      	lsleq	r1, r1, #9
     36a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     36e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     372:	3a7f      	subs	r2, #127	; 0x7f
     374:	bfc2      	ittt	gt
     376:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     37a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     37e:	4770      	bxgt	lr
     380:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     384:	f04f 0300 	mov.w	r3, #0
     388:	3a01      	subs	r2, #1
     38a:	dc5d      	bgt.n	448 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x48>
     38c:	f112 0f19 	cmn.w	r2, #25
     390:	bfdc      	itt	le
     392:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     396:	4770      	bxle	lr
     398:	f1c2 0200 	rsb	r2, r2, #0
     39c:	0041      	lsls	r1, r0, #1
     39e:	fa21 f102 	lsr.w	r1, r1, r2
     3a2:	f1c2 0220 	rsb	r2, r2, #32
     3a6:	fa00 fc02 	lsl.w	ip, r0, r2
     3aa:	ea5f 0031 	movs.w	r0, r1, rrx
     3ae:	f140 0000 	adc.w	r0, r0, #0
     3b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     3b6:	bf08      	it	eq
     3b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3bc:	4770      	bx	lr
     3be:	f092 0f00 	teq	r2, #0
     3c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3c6:	bf02      	ittt	eq
     3c8:	0040      	lsleq	r0, r0, #1
     3ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     3ce:	3a01      	subeq	r2, #1
     3d0:	d0f9      	beq.n	3c6 <__aeabi_fmul+0xce>
     3d2:	ea40 000c 	orr.w	r0, r0, ip
     3d6:	f093 0f00 	teq	r3, #0
     3da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     3de:	bf02      	ittt	eq
     3e0:	0049      	lsleq	r1, r1, #1
     3e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     3e6:	3b01      	subeq	r3, #1
     3e8:	d0f9      	beq.n	3de <__aeabi_fmul+0xe6>
     3ea:	ea41 010c 	orr.w	r1, r1, ip
     3ee:	e78f      	b.n	310 <__aeabi_fmul+0x18>
     3f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     3f4:	ea92 0f0c 	teq	r2, ip
     3f8:	bf18      	it	ne
     3fa:	ea93 0f0c 	teqne	r3, ip
     3fe:	d00a      	beq.n	416 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x16>
     400:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     404:	bf18      	it	ne
     406:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     40a:	d1d8      	bne.n	3be <__aeabi_fmul+0xc6>
     40c:	ea80 0001 	eor.w	r0, r0, r1
     410:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     414:	4770      	bx	lr
     416:	f090 0f00 	teq	r0, #0
     41a:	bf17      	itett	ne
     41c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     420:	4608      	moveq	r0, r1
     422:	f091 0f00 	teqne	r1, #0
     426:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     42a:	d014      	beq.n	456 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x56>
     42c:	ea92 0f0c 	teq	r2, ip
     430:	d101      	bne.n	436 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x36>
     432:	0242      	lsls	r2, r0, #9
     434:	d10f      	bne.n	456 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x56>
     436:	ea93 0f0c 	teq	r3, ip
     43a:	d103      	bne.n	444 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x44>
     43c:	024b      	lsls	r3, r1, #9
     43e:	bf18      	it	ne
     440:	4608      	movne	r0, r1
     442:	d108      	bne.n	456 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x56>
     444:	ea80 0001 	eor.w	r0, r0, r1
     448:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     44c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     450:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     454:	4770      	bx	lr
     456:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     45a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     45e:	4770      	bx	lr

00000460 <__aeabi_fdiv>:
     460:	f04f 0cff 	mov.w	ip, #255	; 0xff
     464:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     468:	bf1e      	ittt	ne
     46a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     46e:	ea92 0f0c 	teqne	r2, ip
     472:	ea93 0f0c 	teqne	r3, ip
     476:	d069      	beq.n	54c <__aeabi_fdiv+0xec>
     478:	eba2 0203 	sub.w	r2, r2, r3
     47c:	ea80 0c01 	eor.w	ip, r0, r1
     480:	0249      	lsls	r1, r1, #9
     482:	ea4f 2040 	mov.w	r0, r0, lsl #9
     486:	d037      	beq.n	4f8 <__aeabi_fdiv+0x98>
     488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     48c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     490:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     494:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     498:	428b      	cmp	r3, r1
     49a:	bf38      	it	cc
     49c:	005b      	lslcc	r3, r3, #1
     49e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     4a2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     4a6:	428b      	cmp	r3, r1
     4a8:	bf24      	itt	cs
     4aa:	1a5b      	subcs	r3, r3, r1
     4ac:	ea40 000c 	orrcs.w	r0, r0, ip
     4b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     4b4:	bf24      	itt	cs
     4b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     4ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     4be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     4c2:	bf24      	itt	cs
     4c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4d0:	bf24      	itt	cs
     4d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4da:	011b      	lsls	r3, r3, #4
     4dc:	bf18      	it	ne
     4de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     4e2:	d1e0      	bne.n	4a6 <__aeabi_fdiv+0x46>
     4e4:	2afd      	cmp	r2, #253	; 0xfd
     4e6:	f63f af50 	bhi.w	38a <__aeabi_fmul+0x92>
     4ea:	428b      	cmp	r3, r1
     4ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     4f0:	bf08      	it	eq
     4f2:	f020 0001 	biceq.w	r0, r0, #1
     4f6:	4770      	bx	lr
     4f8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     4fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     500:	327f      	adds	r2, #127	; 0x7f
     502:	bfc2      	ittt	gt
     504:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     508:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     50c:	4770      	bxgt	lr
     50e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     512:	f04f 0300 	mov.w	r3, #0
     516:	3a01      	subs	r2, #1
     518:	e737      	b.n	38a <__aeabi_fmul+0x92>
     51a:	f092 0f00 	teq	r2, #0
     51e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     522:	bf02      	ittt	eq
     524:	0040      	lsleq	r0, r0, #1
     526:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     52a:	3a01      	subeq	r2, #1
     52c:	d0f9      	beq.n	522 <__aeabi_fdiv+0xc2>
     52e:	ea40 000c 	orr.w	r0, r0, ip
     532:	f093 0f00 	teq	r3, #0
     536:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     53a:	bf02      	ittt	eq
     53c:	0049      	lsleq	r1, r1, #1
     53e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     542:	3b01      	subeq	r3, #1
     544:	d0f9      	beq.n	53a <__aeabi_fdiv+0xda>
     546:	ea41 010c 	orr.w	r1, r1, ip
     54a:	e795      	b.n	478 <__aeabi_fdiv+0x18>
     54c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     550:	ea92 0f0c 	teq	r2, ip
     554:	d108      	bne.n	568 <__aeabi_fdiv+0x108>
     556:	0242      	lsls	r2, r0, #9
     558:	f47f af7d 	bne.w	456 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x56>
     55c:	ea93 0f0c 	teq	r3, ip
     560:	f47f af70 	bne.w	444 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x44>
     564:	4608      	mov	r0, r1
     566:	e776      	b.n	456 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x56>
     568:	ea93 0f0c 	teq	r3, ip
     56c:	d104      	bne.n	578 <__aeabi_fdiv+0x118>
     56e:	024b      	lsls	r3, r1, #9
     570:	f43f af4c 	beq.w	40c <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xc>
     574:	4608      	mov	r0, r1
     576:	e76e      	b.n	456 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x56>
     578:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     57c:	bf18      	it	ne
     57e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     582:	d1ca      	bne.n	51a <__aeabi_fdiv+0xba>
     584:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     588:	f47f af5c 	bne.w	444 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x44>
     58c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     590:	f47f af3c 	bne.w	40c <CONFIG_MPSL_SIGNAL_STACK_SIZE+0xc>
     594:	e75f      	b.n	456 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x56>
     596:	bf00      	nop

00000598 <__aeabi_f2iz>:
     598:	ea4f 0240 	mov.w	r2, r0, lsl #1
     59c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     5a0:	d30f      	bcc.n	5c2 <__aeabi_f2iz+0x2a>
     5a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
     5a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     5aa:	d90d      	bls.n	5c8 <__aeabi_f2iz+0x30>
     5ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
     5b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     5b4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     5b8:	fa23 f002 	lsr.w	r0, r3, r2
     5bc:	bf18      	it	ne
     5be:	4240      	negne	r0, r0
     5c0:	4770      	bx	lr
     5c2:	f04f 0000 	mov.w	r0, #0
     5c6:	4770      	bx	lr
     5c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
     5cc:	d101      	bne.n	5d2 <__aeabi_f2iz+0x3a>
     5ce:	0242      	lsls	r2, r0, #9
     5d0:	d105      	bne.n	5de <__aeabi_f2iz+0x46>
     5d2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     5d6:	bf08      	it	eq
     5d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     5dc:	4770      	bx	lr
     5de:	f04f 0000 	mov.w	r0, #0
     5e2:	4770      	bx	lr

000005e4 <__aeabi_uldivmod>:
     5e4:	b953      	cbnz	r3, 5fc <__aeabi_uldivmod+0x18>
     5e6:	b94a      	cbnz	r2, 5fc <__aeabi_uldivmod+0x18>
     5e8:	2900      	cmp	r1, #0
     5ea:	bf08      	it	eq
     5ec:	2800      	cmpeq	r0, #0
     5ee:	bf1c      	itt	ne
     5f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     5f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     5f8:	f000 b96c 	b.w	8d4 <__aeabi_idiv0>
     5fc:	f1ad 0c08 	sub.w	ip, sp, #8
     600:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     604:	f000 f806 	bl	614 <__udivmoddi4>
     608:	f8dd e004 	ldr.w	lr, [sp, #4]
     60c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     610:	b004      	add	sp, #16
     612:	4770      	bx	lr

00000614 <__udivmoddi4>:
     614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     618:	9e08      	ldr	r6, [sp, #32]
     61a:	460d      	mov	r5, r1
     61c:	4604      	mov	r4, r0
     61e:	468e      	mov	lr, r1
     620:	2b00      	cmp	r3, #0
     622:	f040 8082 	bne.w	72a <__udivmoddi4+0x116>
     626:	428a      	cmp	r2, r1
     628:	4617      	mov	r7, r2
     62a:	d946      	bls.n	6ba <__udivmoddi4+0xa6>
     62c:	fab2 f282 	clz	r2, r2
     630:	b14a      	cbz	r2, 646 <__udivmoddi4+0x32>
     632:	f1c2 0120 	rsb	r1, r2, #32
     636:	fa05 f302 	lsl.w	r3, r5, r2
     63a:	fa20 f101 	lsr.w	r1, r0, r1
     63e:	4097      	lsls	r7, r2
     640:	ea41 0e03 	orr.w	lr, r1, r3
     644:	4094      	lsls	r4, r2
     646:	ea4f 4817 	mov.w	r8, r7, lsr #16
     64a:	0c23      	lsrs	r3, r4, #16
     64c:	fbbe fcf8 	udiv	ip, lr, r8
     650:	b2b9      	uxth	r1, r7
     652:	fb08 ee1c 	mls	lr, r8, ip, lr
     656:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     65a:	fb0c f001 	mul.w	r0, ip, r1
     65e:	4298      	cmp	r0, r3
     660:	d90a      	bls.n	678 <__udivmoddi4+0x64>
     662:	18fb      	adds	r3, r7, r3
     664:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     668:	f080 8116 	bcs.w	898 <CONFIG_ISR_STACK_SIZE+0x98>
     66c:	4298      	cmp	r0, r3
     66e:	f240 8113 	bls.w	898 <CONFIG_ISR_STACK_SIZE+0x98>
     672:	f1ac 0c02 	sub.w	ip, ip, #2
     676:	443b      	add	r3, r7
     678:	1a1b      	subs	r3, r3, r0
     67a:	b2a4      	uxth	r4, r4
     67c:	fbb3 f0f8 	udiv	r0, r3, r8
     680:	fb08 3310 	mls	r3, r8, r0, r3
     684:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     688:	fb00 f101 	mul.w	r1, r0, r1
     68c:	42a1      	cmp	r1, r4
     68e:	d909      	bls.n	6a4 <__udivmoddi4+0x90>
     690:	193c      	adds	r4, r7, r4
     692:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     696:	f080 8101 	bcs.w	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     69a:	42a1      	cmp	r1, r4
     69c:	f240 80fe 	bls.w	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     6a0:	3802      	subs	r0, #2
     6a2:	443c      	add	r4, r7
     6a4:	1a64      	subs	r4, r4, r1
     6a6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     6aa:	2100      	movs	r1, #0
     6ac:	b11e      	cbz	r6, 6b6 <__udivmoddi4+0xa2>
     6ae:	40d4      	lsrs	r4, r2
     6b0:	2300      	movs	r3, #0
     6b2:	e9c6 4300 	strd	r4, r3, [r6]
     6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xaa>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	d14f      	bne.n	766 <__udivmoddi4+0x152>
     6c6:	1bcb      	subs	r3, r1, r7
     6c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     6cc:	fa1f f887 	uxth.w	r8, r7
     6d0:	2101      	movs	r1, #1
     6d2:	fbb3 fcfe 	udiv	ip, r3, lr
     6d6:	0c25      	lsrs	r5, r4, #16
     6d8:	fb0e 331c 	mls	r3, lr, ip, r3
     6dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     6e0:	fb08 f30c 	mul.w	r3, r8, ip
     6e4:	42ab      	cmp	r3, r5
     6e6:	d907      	bls.n	6f8 <__udivmoddi4+0xe4>
     6e8:	197d      	adds	r5, r7, r5
     6ea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     6ee:	d202      	bcs.n	6f6 <__udivmoddi4+0xe2>
     6f0:	42ab      	cmp	r3, r5
     6f2:	f200 80e7 	bhi.w	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     6f6:	4684      	mov	ip, r0
     6f8:	1aed      	subs	r5, r5, r3
     6fa:	b2a3      	uxth	r3, r4
     6fc:	fbb5 f0fe 	udiv	r0, r5, lr
     700:	fb0e 5510 	mls	r5, lr, r0, r5
     704:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     708:	fb08 f800 	mul.w	r8, r8, r0
     70c:	45a0      	cmp	r8, r4
     70e:	d907      	bls.n	720 <__udivmoddi4+0x10c>
     710:	193c      	adds	r4, r7, r4
     712:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     716:	d202      	bcs.n	71e <__udivmoddi4+0x10a>
     718:	45a0      	cmp	r8, r4
     71a:	f200 80d7 	bhi.w	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
     71e:	4618      	mov	r0, r3
     720:	eba4 0408 	sub.w	r4, r4, r8
     724:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     728:	e7c0      	b.n	6ac <__udivmoddi4+0x98>
     72a:	428b      	cmp	r3, r1
     72c:	d908      	bls.n	740 <__udivmoddi4+0x12c>
     72e:	2e00      	cmp	r6, #0
     730:	f000 80af 	beq.w	892 <CONFIG_ISR_STACK_SIZE+0x92>
     734:	2100      	movs	r1, #0
     736:	e9c6 0500 	strd	r0, r5, [r6]
     73a:	4608      	mov	r0, r1
     73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     740:	fab3 f183 	clz	r1, r3
     744:	2900      	cmp	r1, #0
     746:	d14b      	bne.n	7e0 <__udivmoddi4+0x1cc>
     748:	42ab      	cmp	r3, r5
     74a:	d302      	bcc.n	752 <__udivmoddi4+0x13e>
     74c:	4282      	cmp	r2, r0
     74e:	f200 80b7 	bhi.w	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     752:	1a84      	subs	r4, r0, r2
     754:	eb65 0303 	sbc.w	r3, r5, r3
     758:	2001      	movs	r0, #1
     75a:	469e      	mov	lr, r3
     75c:	2e00      	cmp	r6, #0
     75e:	d0aa      	beq.n	6b6 <__udivmoddi4+0xa2>
     760:	e9c6 4e00 	strd	r4, lr, [r6]
     764:	e7a7      	b.n	6b6 <__udivmoddi4+0xa2>
     766:	f1c2 0c20 	rsb	ip, r2, #32
     76a:	fa01 f302 	lsl.w	r3, r1, r2
     76e:	4097      	lsls	r7, r2
     770:	fa20 f00c 	lsr.w	r0, r0, ip
     774:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     778:	fa21 fc0c 	lsr.w	ip, r1, ip
     77c:	4318      	orrs	r0, r3
     77e:	fbbc f1fe 	udiv	r1, ip, lr
     782:	0c05      	lsrs	r5, r0, #16
     784:	fb0e cc11 	mls	ip, lr, r1, ip
     788:	fa1f f887 	uxth.w	r8, r7
     78c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     790:	fb01 f308 	mul.w	r3, r1, r8
     794:	42ab      	cmp	r3, r5
     796:	fa04 f402 	lsl.w	r4, r4, r2
     79a:	d909      	bls.n	7b0 <__udivmoddi4+0x19c>
     79c:	197d      	adds	r5, r7, r5
     79e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     7a2:	f080 808b 	bcs.w	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
     7a6:	42ab      	cmp	r3, r5
     7a8:	f240 8088 	bls.w	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
     7ac:	3902      	subs	r1, #2
     7ae:	443d      	add	r5, r7
     7b0:	1aeb      	subs	r3, r5, r3
     7b2:	b285      	uxth	r5, r0
     7b4:	fbb3 f0fe 	udiv	r0, r3, lr
     7b8:	fb0e 3310 	mls	r3, lr, r0, r3
     7bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     7c0:	fb00 f308 	mul.w	r3, r0, r8
     7c4:	42ab      	cmp	r3, r5
     7c6:	d907      	bls.n	7d8 <__udivmoddi4+0x1c4>
     7c8:	197d      	adds	r5, r7, r5
     7ca:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     7ce:	d271      	bcs.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     7d0:	42ab      	cmp	r3, r5
     7d2:	d96f      	bls.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     7d4:	3802      	subs	r0, #2
     7d6:	443d      	add	r5, r7
     7d8:	1aeb      	subs	r3, r5, r3
     7da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     7de:	e778      	b.n	6d2 <__udivmoddi4+0xbe>
     7e0:	f1c1 0c20 	rsb	ip, r1, #32
     7e4:	408b      	lsls	r3, r1
     7e6:	fa22 f70c 	lsr.w	r7, r2, ip
     7ea:	431f      	orrs	r7, r3
     7ec:	fa20 f40c 	lsr.w	r4, r0, ip
     7f0:	fa05 f301 	lsl.w	r3, r5, r1
     7f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     7f8:	fa25 f50c 	lsr.w	r5, r5, ip
     7fc:	431c      	orrs	r4, r3
     7fe:	0c23      	lsrs	r3, r4, #16
     800:	fbb5 f9fe 	udiv	r9, r5, lr
     804:	fa1f f887 	uxth.w	r8, r7
     808:	fb0e 5519 	mls	r5, lr, r9, r5
     80c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     810:	fb09 fa08 	mul.w	sl, r9, r8
     814:	45aa      	cmp	sl, r5
     816:	fa02 f201 	lsl.w	r2, r2, r1
     81a:	fa00 f301 	lsl.w	r3, r0, r1
     81e:	d908      	bls.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
     820:	197d      	adds	r5, r7, r5
     822:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     826:	d247      	bcs.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     828:	45aa      	cmp	sl, r5
     82a:	d945      	bls.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     82c:	f1a9 0902 	sub.w	r9, r9, #2
     830:	443d      	add	r5, r7
     832:	eba5 050a 	sub.w	r5, r5, sl
     836:	b2a4      	uxth	r4, r4
     838:	fbb5 f0fe 	udiv	r0, r5, lr
     83c:	fb0e 5510 	mls	r5, lr, r0, r5
     840:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     844:	fb00 f808 	mul.w	r8, r0, r8
     848:	45a0      	cmp	r8, r4
     84a:	d907      	bls.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84c:	193c      	adds	r4, r7, r4
     84e:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     852:	d22d      	bcs.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     854:	45a0      	cmp	r8, r4
     856:	d92b      	bls.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     858:	3802      	subs	r0, #2
     85a:	443c      	add	r4, r7
     85c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     860:	eba4 0408 	sub.w	r4, r4, r8
     864:	fba0 8902 	umull	r8, r9, r0, r2
     868:	454c      	cmp	r4, r9
     86a:	46c6      	mov	lr, r8
     86c:	464d      	mov	r5, r9
     86e:	d319      	bcc.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     870:	d016      	beq.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     872:	b15e      	cbz	r6, 88c <CONFIG_ISR_STACK_SIZE+0x8c>
     874:	ebb3 020e 	subs.w	r2, r3, lr
     878:	eb64 0405 	sbc.w	r4, r4, r5
     87c:	fa04 fc0c 	lsl.w	ip, r4, ip
     880:	40ca      	lsrs	r2, r1
     882:	ea4c 0202 	orr.w	r2, ip, r2
     886:	40cc      	lsrs	r4, r1
     888:	e9c6 2400 	strd	r2, r4, [r6]
     88c:	2100      	movs	r1, #0
     88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     892:	4631      	mov	r1, r6
     894:	4630      	mov	r0, r6
     896:	e70e      	b.n	6b6 <__udivmoddi4+0xa2>
     898:	46ac      	mov	ip, r5
     89a:	e6ed      	b.n	678 <__udivmoddi4+0x64>
     89c:	4618      	mov	r0, r3
     89e:	e701      	b.n	6a4 <__udivmoddi4+0x90>
     8a0:	4543      	cmp	r3, r8
     8a2:	d2e6      	bcs.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
     8a4:	ebb8 0e02 	subs.w	lr, r8, r2
     8a8:	eb69 0507 	sbc.w	r5, r9, r7
     8ac:	3801      	subs	r0, #1
     8ae:	e7e0      	b.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
     8b0:	4628      	mov	r0, r5
     8b2:	e7d3      	b.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     8b4:	4660      	mov	r0, ip
     8b6:	e78f      	b.n	7d8 <__udivmoddi4+0x1c4>
     8b8:	4681      	mov	r9, r0
     8ba:	e7ba      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
     8bc:	4661      	mov	r1, ip
     8be:	e777      	b.n	7b0 <__udivmoddi4+0x19c>
     8c0:	4608      	mov	r0, r1
     8c2:	e74b      	b.n	75c <__udivmoddi4+0x148>
     8c4:	f1ac 0c02 	sub.w	ip, ip, #2
     8c8:	443d      	add	r5, r7
     8ca:	e715      	b.n	6f8 <__udivmoddi4+0xe4>
     8cc:	3802      	subs	r0, #2
     8ce:	443c      	add	r4, r7
     8d0:	e726      	b.n	720 <__udivmoddi4+0x10c>
     8d2:	bf00      	nop

000008d4 <__aeabi_idiv0>:
     8d4:	4770      	bx	lr
     8d6:	bf00      	nop

000008d8 <main>:
        printk("ADC raw value 3: %d\n", m_sample_buffer[2]);*/
	return ret;
}

int main(void)
{
     8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;

	printk("nrf91 saadc sampling AIN0 (P0.13)\n");
     8dc:	4832      	ldr	r0, [pc, #200]	; (9a8 <main+0xd0>)
{
     8de:	b087      	sub	sp, #28
	printk("nrf91 saadc sampling AIN0 (P0.13)\n");
     8e0:	f003 fab0 	bl	3e44 <printk>
	printk("Example requires secure_boot to have ");
     8e4:	4831      	ldr	r0, [pc, #196]	; (9ac <main+0xd4>)
     8e6:	f003 faad 	bl	3e44 <printk>
	printk("SAADC set to non-secure!\n");
     8ea:	4831      	ldr	r0, [pc, #196]	; (9b0 <main+0xd8>)
     8ec:	f003 faaa 	bl	3e44 <printk>
	printk("If not; BusFault/UsageFault will be triggered\n");
     8f0:	4830      	ldr	r0, [pc, #192]	; (9b4 <main+0xdc>)
     8f2:	f003 faa7 	bl	3e44 <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     8f6:	4830      	ldr	r0, [pc, #192]	; (9b8 <main+0xe0>)

	adc_dev = device_get_binding("ADC_0");
     8f8:	4d30      	ldr	r5, [pc, #192]	; (9bc <main+0xe4>)
     8fa:	f002 fb29 	bl	2f50 <z_impl_device_get_binding>
     8fe:	6028      	str	r0, [r5, #0]
	if (!adc_dev) {
     900:	b918      	cbnz	r0, 90a <main+0x32>
		printk("device_get_binding ADC_0 failed\n");
     902:	482f      	ldr	r0, [pc, #188]	; (9c0 <main+0xe8>)
     904:	f003 fa9e 	bl	3e44 <printk>
		while(1);
     908:	e7fe      	b.n	908 <main+0x30>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
     90a:	6883      	ldr	r3, [r0, #8]
     90c:	492d      	ldr	r1, [pc, #180]	; (9c4 <main+0xec>)
     90e:	681b      	ldr	r3, [r3, #0]
     910:	4798      	blx	r3
	}
	err = adc_channel_setup(adc_dev, &m_1st_channel_cfg);
	if (err) {
     912:	4601      	mov	r1, r0
     914:	b118      	cbz	r0, 91e <main+0x46>
		printk("Error in adc setup: %d\n", err);
     916:	482c      	ldr	r0, [pc, #176]	; (9c8 <main+0xf0>)
     918:	f003 fa94 	bl	3e44 <printk>
		while(1);
     91c:	e7fe      	b.n	91c <main+0x44>

	/* Trigger offset calibration
	 * As this generates a _DONE and _RESULT event
	 * the first result will be incorrect.
	 */
	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     91e:	4b2b      	ldr	r3, [pc, #172]	; (9cc <main+0xf4>)
	const struct adc_sequence sequence = {
     920:	4e2b      	ldr	r6, [pc, #172]	; (9d0 <main+0xf8>)
		adc_voltage = (int)(((float)m_sample_buffer[i] / 1023.0f) *3600.0f);
     922:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9e4 <main+0x10c>
     926:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 9e8 <main+0x110>
	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     92a:	2201      	movs	r2, #1
     92c:	60da      	str	r2, [r3, #12]
	const struct adc_sequence sequence = {
     92e:	2214      	movs	r2, #20
     930:	2100      	movs	r1, #0
     932:	a801      	add	r0, sp, #4
     934:	f003 fd79 	bl	442a <memset>
     938:	2380      	movs	r3, #128	; 0x80
     93a:	e9cd 3602 	strd	r3, r6, [sp, #8]
	if (!adc_dev) {
     93e:	6828      	ldr	r0, [r5, #0]
	const struct adc_sequence sequence = {
     940:	2302      	movs	r3, #2
     942:	9304      	str	r3, [sp, #16]
     944:	230a      	movs	r3, #10
     946:	f88d 3014 	strb.w	r3, [sp, #20]
	if (!adc_dev) {
     94a:	b930      	cbnz	r0, 95a <main+0x82>
		return -1;
     94c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	while (1) {
		err = adc_sample();
		if (err) {
			printk("Error in adc sampling: %d\n", err);
     950:	4820      	ldr	r0, [pc, #128]	; (9d4 <main+0xfc>)
     952:	4621      	mov	r1, r4
     954:	f003 fa76 	bl	3e44 <printk>
     958:	e01f      	b.n	99a <main+0xc2>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     95a:	6883      	ldr	r3, [r0, #8]
     95c:	a901      	add	r1, sp, #4
     95e:	685b      	ldr	r3, [r3, #4]
     960:	4798      	blx	r3
	printk("ADC read err: %d\n", ret);
     962:	4601      	mov	r1, r0
     964:	4604      	mov	r4, r0
     966:	481c      	ldr	r0, [pc, #112]	; (9d8 <main+0x100>)
     968:	f003 fa6c 	bl	3e44 <printk>
		adc_voltage = (int)(((float)m_sample_buffer[i] / 1023.0f) *3600.0f);
     96c:	f9b6 7000 	ldrsh.w	r7, [r6]
		printk("ADC raw value: %d\n", m_sample_buffer[i]);
     970:	481a      	ldr	r0, [pc, #104]	; (9dc <main+0x104>)
     972:	4639      	mov	r1, r7
     974:	f003 fa66 	bl	3e44 <printk>
		adc_voltage = (int)(((float)m_sample_buffer[i] / 1023.0f) *3600.0f);
     978:	4638      	mov	r0, r7
     97a:	f7ff fc69 	bl	250 <__aeabi_i2f>
     97e:	4641      	mov	r1, r8
     980:	f7ff fd6e 	bl	460 <__aeabi_fdiv>
     984:	4649      	mov	r1, r9
     986:	f7ff fcb7 	bl	2f8 <__aeabi_fmul>
     98a:	f7ff fe05 	bl	598 <__aeabi_f2iz>
     98e:	4601      	mov	r1, r0
		printf("Measured voltage: %i mV\n", adc_voltage);
     990:	4813      	ldr	r0, [pc, #76]	; (9e0 <main+0x108>)
     992:	f001 fabd 	bl	1f10 <printf>
		if (err) {
     996:	2c00      	cmp	r4, #0
     998:	d1da      	bne.n	950 <main+0x78>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     99a:	2100      	movs	r1, #0
     99c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     9a0:	f002 ff2a 	bl	37f8 <z_impl_k_sleep>
	while (1) {
     9a4:	e7c3      	b.n	92e <main+0x56>
     9a6:	bf00      	nop
     9a8:	00004b60 	.word	0x00004b60
     9ac:	00004b83 	.word	0x00004b83
     9b0:	00004ba9 	.word	0x00004ba9
     9b4:	00004bc3 	.word	0x00004bc3
     9b8:	00004bf2 	.word	0x00004bf2
     9bc:	20000210 	.word	0x20000210
     9c0:	00004bf8 	.word	0x00004bf8
     9c4:	00004b58 	.word	0x00004b58
     9c8:	00004c19 	.word	0x00004c19
     9cc:	40007000 	.word	0x40007000
     9d0:	2000039c 	.word	0x2000039c
     9d4:	00004c6f 	.word	0x00004c6f
     9d8:	00004c31 	.word	0x00004c31
     9dc:	00004c43 	.word	0x00004c43
     9e0:	00004c56 	.word	0x00004c56
     9e4:	447fc000 	.word	0x447fc000
     9e8:	45610000 	.word	0x45610000

000009ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     9ec:	680b      	ldr	r3, [r1, #0]
     9ee:	3301      	adds	r3, #1
     9f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     9f2:	4b01      	ldr	r3, [pc, #4]	; (9f8 <char_out+0xc>)
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	4718      	bx	r3
     9f8:	20000090 	.word	0x20000090

000009fc <__printk_hook_install>:
	_char_out = fn;
     9fc:	4b01      	ldr	r3, [pc, #4]	; (a04 <__printk_hook_install+0x8>)
     9fe:	6018      	str	r0, [r3, #0]
}
     a00:	4770      	bx	lr
     a02:	bf00      	nop
     a04:	20000090 	.word	0x20000090

00000a08 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     a08:	b507      	push	{r0, r1, r2, lr}
     a0a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     a0c:	2100      	movs	r1, #0
{
     a0e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     a10:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     a12:	4803      	ldr	r0, [pc, #12]	; (a20 <vprintk+0x18>)
     a14:	a901      	add	r1, sp, #4
     a16:	f000 fa43 	bl	ea0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     a1a:	b003      	add	sp, #12
     a1c:	f85d fb04 	ldr.w	pc, [sp], #4
     a20:	000009ed 	.word	0x000009ed

00000a24 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     a28:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     a2c:	f019 0808 	ands.w	r8, r9, #8
{
     a30:	4604      	mov	r4, r0
     a32:	4693      	mov	fp, r2
	if (processing) {
     a34:	d00d      	beq.n	a52 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     a36:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     a38:	bf0c      	ite	eq
     a3a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     a3e:	f049 0920 	orrne.w	r9, r9, #32
     a42:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     a46:	f38b 8811 	msr	BASEPRI, fp
     a4a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     a52:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     a56:	2902      	cmp	r1, #2
     a58:	d107      	bne.n	a6a <process_event+0x46>
			evt = process_recheck(mgr);
     a5a:	4620      	mov	r0, r4
     a5c:	f003 f9ff 	bl	3e5e <process_recheck>
		if (evt == EVT_NOP) {
     a60:	2800      	cmp	r0, #0
     a62:	d0f0      	beq.n	a46 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     a64:	2801      	cmp	r0, #1
     a66:	8b23      	ldrh	r3, [r4, #24]
     a68:	d150      	bne.n	b0c <process_event+0xe8>
			res = mgr->last_res;
     a6a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     a6c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     a6e:	2f00      	cmp	r7, #0
     a70:	da15      	bge.n	a9e <process_event+0x7a>
		*clients = mgr->clients;
     a72:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a74:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     a78:	e9c4 8800 	strd	r8, r8, [r4]
     a7c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     a80:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     a82:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     a84:	8b21      	ldrh	r1, [r4, #24]
     a86:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     a8a:	45ca      	cmp	sl, r9
     a8c:	d002      	beq.n	a94 <process_event+0x70>
		if (do_monitors
     a8e:	68a3      	ldr	r3, [r4, #8]
     a90:	2b00      	cmp	r3, #0
     a92:	d15c      	bne.n	b4e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
     a94:	b90d      	cbnz	r5, a9a <process_event+0x76>
		    || (transit != NULL)) {
     a96:	2e00      	cmp	r6, #0
     a98:	d074      	beq.n	b84 <process_event+0x160>
     a9a:	2300      	movs	r3, #0
     a9c:	e058      	b.n	b50 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     a9e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     aa2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     aa4:	2a01      	cmp	r2, #1
     aa6:	d820      	bhi.n	aea <process_event+0xc6>
		*clients = mgr->clients;
     aa8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     aac:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     aae:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     ab0:	b289      	uxth	r1, r1
	list->tail = NULL;
     ab2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     ab6:	d10c      	bne.n	ad2 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     ab8:	2d00      	cmp	r5, #0
     aba:	462b      	mov	r3, r5
     abc:	bf38      	it	cc
     abe:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     ac0:	b12b      	cbz	r3, ace <process_event+0xaa>
				mgr->refs += 1U;
     ac2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     ac4:	681b      	ldr	r3, [r3, #0]
     ac6:	3201      	adds	r2, #1
     ac8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     aca:	2b00      	cmp	r3, #0
     acc:	d1f8      	bne.n	ac0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ace:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     ad2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     ad4:	4620      	mov	r0, r4
     ad6:	f003 f9c2 	bl	3e5e <process_recheck>
     ada:	4606      	mov	r6, r0
     adc:	2800      	cmp	r0, #0
     ade:	d0d1      	beq.n	a84 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     ae0:	8b23      	ldrh	r3, [r4, #24]
     ae2:	f043 0320 	orr.w	r3, r3, #32
     ae6:	8323      	strh	r3, [r4, #24]
     ae8:	e7cb      	b.n	a82 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     aea:	2b04      	cmp	r3, #4
     aec:	d10c      	bne.n	b08 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     aee:	f021 0107 	bic.w	r1, r1, #7
     af2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     af4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     af6:	4620      	mov	r0, r4
     af8:	f003 f9b1 	bl	3e5e <process_recheck>
     afc:	4605      	mov	r5, r0
     afe:	2800      	cmp	r0, #0
     b00:	d0bf      	beq.n	a82 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     b02:	f041 0120 	orr.w	r1, r1, #32
     b06:	8321      	strh	r1, [r4, #24]
     b08:	2500      	movs	r5, #0
     b0a:	e7ba      	b.n	a82 <process_event+0x5e>
		} else if (evt == EVT_START) {
     b0c:	2803      	cmp	r0, #3
     b0e:	d109      	bne.n	b24 <process_event+0x100>
			transit = mgr->transitions->start;
     b10:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b12:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     b16:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b18:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     b1c:	8323      	strh	r3, [r4, #24]
}
     b1e:	2500      	movs	r5, #0
		res = 0;
     b20:	462f      	mov	r7, r5
     b22:	e7af      	b.n	a84 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     b24:	2804      	cmp	r0, #4
     b26:	d106      	bne.n	b36 <process_event+0x112>
			transit = mgr->transitions->stop;
     b28:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b2a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     b2e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b30:	f043 0304 	orr.w	r3, r3, #4
     b34:	e7f2      	b.n	b1c <process_event+0xf8>
		} else if (evt == EVT_RESET) {
     b36:	2805      	cmp	r0, #5
     b38:	d106      	bne.n	b48 <process_event+0x124>
			transit = mgr->transitions->reset;
     b3a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b3c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     b40:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b42:	f043 0305 	orr.w	r3, r3, #5
     b46:	e7e9      	b.n	b1c <process_event+0xf8>
     b48:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     b4a:	462e      	mov	r6, r5
     b4c:	e7e8      	b.n	b20 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
     b4e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     b50:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     b54:	8321      	strh	r1, [r4, #24]
     b56:	f38b 8811 	msr	BASEPRI, fp
     b5a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     b5e:	bb03      	cbnz	r3, ba2 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
     b60:	2d00      	cmp	r5, #0
     b62:	d133      	bne.n	bcc <process_event+0x1a8>
			if (transit != NULL) {
     b64:	b116      	cbz	r6, b6c <process_event+0x148>
				transit(mgr, transition_complete);
     b66:	4921      	ldr	r1, [pc, #132]	; (bec <process_event+0x1c8>)
     b68:	4620      	mov	r0, r4
     b6a:	47b0      	blx	r6
	__asm__ volatile(
     b6c:	f04f 0320 	mov.w	r3, #32
     b70:	f3ef 8b11 	mrs	fp, BASEPRI
     b74:	f383 8811 	msr	BASEPRI, r3
     b78:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     b7c:	8b23      	ldrh	r3, [r4, #24]
     b7e:	f023 0308 	bic.w	r3, r3, #8
     b82:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     b84:	8b23      	ldrh	r3, [r4, #24]
     b86:	06da      	lsls	r2, r3, #27
     b88:	d528      	bpl.n	bdc <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     b8a:	f023 0310 	bic.w	r3, r3, #16
     b8e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     b90:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     b92:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     b96:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     b9a:	2900      	cmp	r1, #0
     b9c:	f47f af5b 	bne.w	a56 <process_event+0x32>
out:
     ba0:	e751      	b.n	a46 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ba2:	68a1      	ldr	r1, [r4, #8]
     ba4:	2900      	cmp	r1, #0
     ba6:	d0db      	beq.n	b60 <process_event+0x13c>
	return node->next;
     ba8:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
     baa:	f8d1 b004 	ldr.w	fp, [r1, #4]
     bae:	2b00      	cmp	r3, #0
     bb0:	bf38      	it	cc
     bb2:	2300      	movcc	r3, #0
     bb4:	4699      	mov	r9, r3
     bb6:	4652      	mov	r2, sl
     bb8:	463b      	mov	r3, r7
     bba:	4620      	mov	r0, r4
     bbc:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     bbe:	f1b9 0f00 	cmp.w	r9, #0
     bc2:	d0cd      	beq.n	b60 <process_event+0x13c>
     bc4:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     bc8:	4649      	mov	r1, r9
     bca:	e7ee      	b.n	baa <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     bcc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     bce:	463b      	mov	r3, r7
     bd0:	4652      	mov	r2, sl
     bd2:	4620      	mov	r0, r4
     bd4:	682d      	ldr	r5, [r5, #0]
     bd6:	f003 f95e 	bl	3e96 <notify_one>
     bda:	e7c1      	b.n	b60 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     bdc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     be0:	bf1e      	ittt	ne
     be2:	f023 0320 	bicne.w	r3, r3, #32
     be6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     be8:	2102      	movne	r1, #2
     bea:	e7d2      	b.n	b92 <process_event+0x16e>
     bec:	00003ec3 	.word	0x00003ec3

00000bf0 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
     bf2:	2200      	movs	r2, #0
     bf4:	e9c0 2200 	strd	r2, r2, [r0]
     bf8:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     bfa:	784a      	ldrb	r2, [r1, #1]
     bfc:	2a25      	cmp	r2, #37	; 0x25
{
     bfe:	4603      	mov	r3, r0
	if (*sp == '%') {
     c00:	d033      	beq.n	c6a <extract_conversion+0x7a>
	++sp;
     c02:	3101      	adds	r1, #1
     c04:	460c      	mov	r4, r1
		switch (*sp) {
     c06:	f811 2b01 	ldrb.w	r2, [r1], #1
     c0a:	2a2b      	cmp	r2, #43	; 0x2b
     c0c:	d03d      	beq.n	c8a <extract_conversion+0x9a>
     c0e:	d82f      	bhi.n	c70 <extract_conversion+0x80>
     c10:	2a20      	cmp	r2, #32
     c12:	d03e      	beq.n	c92 <extract_conversion+0xa2>
     c14:	2a23      	cmp	r2, #35	; 0x23
     c16:	d040      	beq.n	c9a <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
     c18:	781a      	ldrb	r2, [r3, #0]
     c1a:	f002 0144 	and.w	r1, r2, #68	; 0x44
     c1e:	2944      	cmp	r1, #68	; 0x44
     c20:	d102      	bne.n	c28 <extract_conversion+0x38>
		conv->flag_zero = false;
     c22:	f36f 1286 	bfc	r2, #6, #1
     c26:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
     c28:	7822      	ldrb	r2, [r4, #0]
     c2a:	2a2a      	cmp	r2, #42	; 0x2a
     c2c:	d14c      	bne.n	cc8 <extract_conversion+0xd8>
		conv->width_present = true;
     c2e:	881a      	ldrh	r2, [r3, #0]
     c30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
     c34:	1c60      	adds	r0, r4, #1
     c36:	801a      	strh	r2, [r3, #0]
	if (*sp != '.') {
     c38:	7802      	ldrb	r2, [r0, #0]
     c3a:	2a2e      	cmp	r2, #46	; 0x2e
     c3c:	d14f      	bne.n	cde <extract_conversion+0xee>
	if (*sp == '*') {
     c3e:	7842      	ldrb	r2, [r0, #1]
     c40:	2a2a      	cmp	r2, #42	; 0x2a
     c42:	d045      	beq.n	cd0 <extract_conversion+0xe0>
     c44:	3001      	adds	r0, #1
	const char *sp = *str;
     c46:	4605      	mov	r5, r0
	size_t val = 0;
     c48:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c4a:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     c4c:	4601      	mov	r1, r0
     c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
     c52:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c56:	2e09      	cmp	r6, #9
     c58:	d953      	bls.n	d02 <extract_conversion+0x112>
	if (sp != wp) {
     c5a:	42a8      	cmp	r0, r5
		conv->prec_present = true;
     c5c:	bf1f      	itttt	ne
     c5e:	7859      	ldrbne	r1, [r3, #1]
		conv->prec_value = prec;
     c60:	609a      	strne	r2, [r3, #8]
		conv->prec_present = true;
     c62:	f041 0102 	orrne.w	r1, r1, #2
     c66:	7059      	strbne	r1, [r3, #1]
		if (prec != conv->prec_value) {
     c68:	e039      	b.n	cde <extract_conversion+0xee>
		conv->specifier = *sp++;
     c6a:	1c88      	adds	r0, r1, #2
     c6c:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
     c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
     c70:	2a2d      	cmp	r2, #45	; 0x2d
     c72:	d005      	beq.n	c80 <extract_conversion+0x90>
     c74:	2a30      	cmp	r2, #48	; 0x30
     c76:	d1cf      	bne.n	c18 <extract_conversion+0x28>
			conv->flag_zero = true;
     c78:	781a      	ldrb	r2, [r3, #0]
     c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     c7e:	e002      	b.n	c86 <extract_conversion+0x96>
			conv->flag_dash = true;
     c80:	781a      	ldrb	r2, [r3, #0]
     c82:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
     c86:	701a      	strb	r2, [r3, #0]
			break;
     c88:	e7bc      	b.n	c04 <extract_conversion+0x14>
			conv->flag_plus = true;
     c8a:	781a      	ldrb	r2, [r3, #0]
     c8c:	f042 0208 	orr.w	r2, r2, #8
     c90:	e7f9      	b.n	c86 <extract_conversion+0x96>
			conv->flag_space = true;
     c92:	781a      	ldrb	r2, [r3, #0]
     c94:	f042 0210 	orr.w	r2, r2, #16
     c98:	e7f5      	b.n	c86 <extract_conversion+0x96>
			conv->flag_hash = true;
     c9a:	781a      	ldrb	r2, [r3, #0]
     c9c:	f042 0220 	orr.w	r2, r2, #32
     ca0:	e7f1      	b.n	c86 <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
     ca2:	fb07 5202 	mla	r2, r7, r2, r5
     ca6:	3a30      	subs	r2, #48	; 0x30
     ca8:	4608      	mov	r0, r1
     caa:	4601      	mov	r1, r0
     cac:	f811 5b01 	ldrb.w	r5, [r1], #1
     cb0:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     cb4:	2e09      	cmp	r6, #9
     cb6:	d9f4      	bls.n	ca2 <extract_conversion+0xb2>
	if (sp != wp) {
     cb8:	4284      	cmp	r4, r0
		conv->width_present = true;
     cba:	bf1f      	itttt	ne
     cbc:	7819      	ldrbne	r1, [r3, #0]
		conv->width_value = width;
     cbe:	605a      	strne	r2, [r3, #4]
		conv->width_present = true;
     cc0:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
     cc4:	7019      	strbne	r1, [r3, #0]
		if (width != conv->width_value) {
     cc6:	e7b7      	b.n	c38 <extract_conversion+0x48>
     cc8:	4620      	mov	r0, r4
	size_t val = 0;
     cca:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     ccc:	270a      	movs	r7, #10
     cce:	e7ec      	b.n	caa <extract_conversion+0xba>
		conv->prec_present = true;
     cd0:	785a      	ldrb	r2, [r3, #1]
     cd2:	f022 0206 	bic.w	r2, r2, #6
     cd6:	f042 0206 	orr.w	r2, r2, #6
     cda:	705a      	strb	r2, [r3, #1]
		return ++sp;
     cdc:	3002      	adds	r0, #2
	switch (*sp) {
     cde:	4601      	mov	r1, r0
     ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
     ce4:	2c6c      	cmp	r4, #108	; 0x6c
     ce6:	d03c      	beq.n	d62 <extract_conversion+0x172>
     ce8:	d810      	bhi.n	d0c <extract_conversion+0x11c>
     cea:	2c68      	cmp	r4, #104	; 0x68
     cec:	d015      	beq.n	d1a <extract_conversion+0x12a>
     cee:	2c6a      	cmp	r4, #106	; 0x6a
     cf0:	d03f      	beq.n	d72 <extract_conversion+0x182>
     cf2:	2c4c      	cmp	r4, #76	; 0x4c
     cf4:	d042      	beq.n	d7c <extract_conversion+0x18c>
		conv->length_mod = LENGTH_NONE;
     cf6:	785a      	ldrb	r2, [r3, #1]
     cf8:	f36f 02c6 	bfc	r2, #3, #4
     cfc:	705a      	strb	r2, [r3, #1]
		break;
     cfe:	4601      	mov	r1, r0
     d00:	e014      	b.n	d2c <extract_conversion+0x13c>
		val = 10U * val + *sp++ - '0';
     d02:	fb07 4202 	mla	r2, r7, r2, r4
     d06:	3a30      	subs	r2, #48	; 0x30
     d08:	4608      	mov	r0, r1
     d0a:	e79f      	b.n	c4c <extract_conversion+0x5c>
	switch (*sp) {
     d0c:	2c74      	cmp	r4, #116	; 0x74
     d0e:	785a      	ldrb	r2, [r3, #1]
     d10:	d032      	beq.n	d78 <extract_conversion+0x188>
     d12:	2c7a      	cmp	r4, #122	; 0x7a
     d14:	d1ef      	bne.n	cf6 <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
     d16:	2006      	movs	r0, #6
     d18:	e01f      	b.n	d5a <extract_conversion+0x16a>
		if (*++sp == 'h') {
     d1a:	7842      	ldrb	r2, [r0, #1]
     d1c:	2a68      	cmp	r2, #104	; 0x68
     d1e:	785a      	ldrb	r2, [r3, #1]
     d20:	d11a      	bne.n	d58 <extract_conversion+0x168>
			conv->length_mod = LENGTH_HH;
     d22:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d24:	f361 02c6 	bfi	r2, r1, #3, #4
     d28:	705a      	strb	r2, [r3, #1]
			++sp;
     d2a:	1c81      	adds	r1, r0, #2
	conv->specifier = *sp++;
     d2c:	4608      	mov	r0, r1
     d2e:	f810 4b01 	ldrb.w	r4, [r0], #1
     d32:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
     d34:	2c78      	cmp	r4, #120	; 0x78
     d36:	f200 80ac 	bhi.w	e92 <extract_conversion+0x2a2>
     d3a:	2c57      	cmp	r4, #87	; 0x57
     d3c:	d829      	bhi.n	d92 <extract_conversion+0x1a2>
     d3e:	2c41      	cmp	r4, #65	; 0x41
     d40:	d003      	beq.n	d4a <extract_conversion+0x15a>
     d42:	3c45      	subs	r4, #69	; 0x45
     d44:	2c02      	cmp	r4, #2
     d46:	f200 80a4 	bhi.w	e92 <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
     d4a:	789a      	ldrb	r2, [r3, #2]
     d4c:	2104      	movs	r1, #4
     d4e:	f361 0202 	bfi	r2, r1, #0, #3
     d52:	709a      	strb	r2, [r3, #2]
			unsupported = true;
     d54:	2201      	movs	r2, #1
			break;
     d56:	e078      	b.n	e4a <extract_conversion+0x25a>
			conv->length_mod = LENGTH_H;
     d58:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
     d5a:	f360 02c6 	bfi	r2, r0, #3, #4
     d5e:	705a      	strb	r2, [r3, #1]
     d60:	e7e4      	b.n	d2c <extract_conversion+0x13c>
		if (*++sp == 'l') {
     d62:	7842      	ldrb	r2, [r0, #1]
     d64:	2a6c      	cmp	r2, #108	; 0x6c
     d66:	785a      	ldrb	r2, [r3, #1]
     d68:	d101      	bne.n	d6e <extract_conversion+0x17e>
			conv->length_mod = LENGTH_LL;
     d6a:	2104      	movs	r1, #4
     d6c:	e7da      	b.n	d24 <extract_conversion+0x134>
			conv->length_mod = LENGTH_L;
     d6e:	2003      	movs	r0, #3
     d70:	e7f3      	b.n	d5a <extract_conversion+0x16a>
		conv->length_mod = LENGTH_J;
     d72:	785a      	ldrb	r2, [r3, #1]
     d74:	2005      	movs	r0, #5
     d76:	e7f0      	b.n	d5a <extract_conversion+0x16a>
		conv->length_mod = LENGTH_T;
     d78:	2007      	movs	r0, #7
     d7a:	e7ee      	b.n	d5a <extract_conversion+0x16a>
		conv->unsupported = true;
     d7c:	881a      	ldrh	r2, [r3, #0]
     d7e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     d82:	f022 0202 	bic.w	r2, r2, #2
     d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     d8a:	f042 0202 	orr.w	r2, r2, #2
     d8e:	801a      	strh	r2, [r3, #0]
		break;
     d90:	e7cc      	b.n	d2c <extract_conversion+0x13c>
     d92:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
     d96:	2a20      	cmp	r2, #32
     d98:	d87b      	bhi.n	e92 <extract_conversion+0x2a2>
     d9a:	a101      	add	r1, pc, #4	; (adr r1, da0 <extract_conversion+0x1b0>)
     d9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
     da0:	00000e5b 	.word	0x00000e5b
     da4:	00000e93 	.word	0x00000e93
     da8:	00000e93 	.word	0x00000e93
     dac:	00000e93 	.word	0x00000e93
     db0:	00000e93 	.word	0x00000e93
     db4:	00000e93 	.word	0x00000e93
     db8:	00000e93 	.word	0x00000e93
     dbc:	00000e93 	.word	0x00000e93
     dc0:	00000e93 	.word	0x00000e93
     dc4:	00000d4b 	.word	0x00000d4b
     dc8:	00000e93 	.word	0x00000e93
     dcc:	00000e5b 	.word	0x00000e5b
     dd0:	00000e25 	.word	0x00000e25
     dd4:	00000d4b 	.word	0x00000d4b
     dd8:	00000d4b 	.word	0x00000d4b
     ddc:	00000d4b 	.word	0x00000d4b
     de0:	00000e93 	.word	0x00000e93
     de4:	00000e25 	.word	0x00000e25
     de8:	00000e93 	.word	0x00000e93
     dec:	00000e93 	.word	0x00000e93
     df0:	00000e93 	.word	0x00000e93
     df4:	00000e93 	.word	0x00000e93
     df8:	00000e61 	.word	0x00000e61
     dfc:	00000e5b 	.word	0x00000e5b
     e00:	00000e7b 	.word	0x00000e7b
     e04:	00000e93 	.word	0x00000e93
     e08:	00000e93 	.word	0x00000e93
     e0c:	00000e7b 	.word	0x00000e7b
     e10:	00000e93 	.word	0x00000e93
     e14:	00000e5b 	.word	0x00000e5b
     e18:	00000e93 	.word	0x00000e93
     e1c:	00000e93 	.word	0x00000e93
     e20:	00000e5b 	.word	0x00000e5b
		conv->specifier_cat = SPECIFIER_SINT;
     e24:	789a      	ldrb	r2, [r3, #2]
     e26:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
     e28:	f361 0202 	bfi	r2, r1, #0, #3
     e2c:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     e2e:	785a      	ldrb	r2, [r3, #1]
     e30:	f002 0278 	and.w	r2, r2, #120	; 0x78
     e34:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
     e36:	bf02      	ittt	eq
     e38:	7819      	ldrbeq	r1, [r3, #0]
     e3a:	f041 0101 	orreq.w	r1, r1, #1
     e3e:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
     e40:	2c63      	cmp	r4, #99	; 0x63
     e42:	d12a      	bne.n	e9a <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e44:	3a00      	subs	r2, #0
     e46:	bf18      	it	ne
     e48:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
     e4a:	7819      	ldrb	r1, [r3, #0]
     e4c:	f3c1 0440 	ubfx	r4, r1, #1, #1
     e50:	4322      	orrs	r2, r4
     e52:	f362 0141 	bfi	r1, r2, #1, #1
     e56:	7019      	strb	r1, [r3, #0]
	return sp;
     e58:	e709      	b.n	c6e <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
     e5a:	789a      	ldrb	r2, [r3, #2]
     e5c:	2102      	movs	r1, #2
     e5e:	e7e3      	b.n	e28 <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
     e60:	789a      	ldrb	r2, [r3, #2]
     e62:	2103      	movs	r1, #3
     e64:	f361 0202 	bfi	r2, r1, #0, #3
     e68:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     e6a:	785a      	ldrb	r2, [r3, #1]
     e6c:	f002 0278 	and.w	r2, r2, #120	; 0x78
     e70:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
     e74:	424a      	negs	r2, r1
     e76:	414a      	adcs	r2, r1
     e78:	e7e7      	b.n	e4a <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
     e7a:	789a      	ldrb	r2, [r3, #2]
     e7c:	2103      	movs	r1, #3
     e7e:	f361 0202 	bfi	r2, r1, #0, #3
     e82:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
     e84:	785a      	ldrb	r2, [r3, #1]
     e86:	f012 0f78 	tst.w	r2, #120	; 0x78
     e8a:	bf14      	ite	ne
     e8c:	2201      	movne	r2, #1
     e8e:	2200      	moveq	r2, #0
     e90:	e7db      	b.n	e4a <extract_conversion+0x25a>
		conv->invalid = true;
     e92:	781a      	ldrb	r2, [r3, #0]
     e94:	f042 0201 	orr.w	r2, r2, #1
     e98:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
     e9a:	2200      	movs	r2, #0
     e9c:	e7d5      	b.n	e4a <extract_conversion+0x25a>
     e9e:	bf00      	nop

00000ea0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ea4:	4680      	mov	r8, r0
     ea6:	b08f      	sub	sp, #60	; 0x3c
     ea8:	4689      	mov	r9, r1
     eaa:	4692      	mov	sl, r2
     eac:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     eae:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     eb0:	f89a 0000 	ldrb.w	r0, [sl]
     eb4:	b908      	cbnz	r0, eba <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     eb6:	4628      	mov	r0, r5
     eb8:	e10b      	b.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
		if (*fp != '%') {
     eba:	2825      	cmp	r0, #37	; 0x25
     ebc:	d009      	beq.n	ed2 <cbvprintf+0x32>
			OUTC(*fp++);
     ebe:	4649      	mov	r1, r9
     ec0:	47c0      	blx	r8
     ec2:	2800      	cmp	r0, #0
     ec4:	f2c0 8105 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
     ec8:	f10a 0301 	add.w	r3, sl, #1
     ecc:	9302      	str	r3, [sp, #8]
			OUTC('%');
     ece:	3501      	adds	r5, #1
			break;
     ed0:	e059      	b.n	f86 <cbvprintf+0xe6>
		fp = extract_conversion(&conv, sp);
     ed2:	4651      	mov	r1, sl
     ed4:	a805      	add	r0, sp, #20
     ed6:	f7ff fe8b 	bl	bf0 <extract_conversion>
		if (conv.width_star) {
     eda:	f89d 3015 	ldrb.w	r3, [sp, #21]
		fp = extract_conversion(&conv, sp);
     ede:	9002      	str	r0, [sp, #8]
		if (conv.width_star) {
     ee0:	07d9      	lsls	r1, r3, #31
     ee2:	d51a      	bpl.n	f1a <cbvprintf+0x7a>
			width = va_arg(ap, int);
     ee4:	f854 7b04 	ldr.w	r7, [r4], #4
			if (width < 0) {
     ee8:	2f00      	cmp	r7, #0
     eea:	da06      	bge.n	efa <cbvprintf+0x5a>
				conv.flag_dash = true;
     eec:	f89d 2014 	ldrb.w	r2, [sp, #20]
     ef0:	f042 0204 	orr.w	r2, r2, #4
     ef4:	f88d 2014 	strb.w	r2, [sp, #20]
				width = -width;
     ef8:	427f      	negs	r7, r7
		if (conv.prec_star) {
     efa:	075a      	lsls	r2, r3, #29
     efc:	d515      	bpl.n	f2a <cbvprintf+0x8a>
			int arg = va_arg(ap, int);
     efe:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
     f02:	f1bb 0f00 	cmp.w	fp, #0
     f06:	da14      	bge.n	f32 <cbvprintf+0x92>
				conv.prec_present = false;
     f08:	f89d 3015 	ldrb.w	r3, [sp, #21]
     f0c:	f36f 0341 	bfc	r3, #1, #1
     f10:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
     f14:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     f18:	e00b      	b.n	f32 <cbvprintf+0x92>
		} else if (conv.width_present) {
     f1a:	f99d 2014 	ldrsb.w	r2, [sp, #20]
     f1e:	2a00      	cmp	r2, #0
			width = conv.width_value;
     f20:	bfb4      	ite	lt
     f22:	9f06      	ldrlt	r7, [sp, #24]
		int width = -1;
     f24:	f04f 37ff 	movge.w	r7, #4294967295	; 0xffffffff
     f28:	e7e7      	b.n	efa <cbvprintf+0x5a>
		} else if (conv.prec_present) {
     f2a:	079b      	lsls	r3, r3, #30
     f2c:	d5f2      	bpl.n	f14 <cbvprintf+0x74>
			precision = conv.prec_value;
     f2e:	f8dd b01c 	ldr.w	fp, [sp, #28]
			= (enum specifier_cat_enum)conv.specifier_cat;
     f32:	f89d 3016 	ldrb.w	r3, [sp, #22]
			= (enum length_mod_enum)conv.length_mod;
     f36:	f89d c015 	ldrb.w	ip, [sp, #21]
		enum specifier_cat_enum specifier_cat
     f3a:	f003 0307 	and.w	r3, r3, #7
		conv.pad0_value = 0;
     f3e:	2100      	movs	r1, #0
		if (specifier_cat == SPECIFIER_SINT) {
     f40:	2b01      	cmp	r3, #1
		conv.pad0_pre_exp = 0;
     f42:	e9cd 1106 	strd	r1, r1, [sp, #24]
			= (enum length_mod_enum)conv.length_mod;
     f46:	f3cc 0cc3 	ubfx	ip, ip, #3, #4
		union argument_value value = (union argument_value){
     f4a:	468e      	mov	lr, r1
		if (specifier_cat == SPECIFIER_SINT) {
     f4c:	d130      	bne.n	fb0 <cbvprintf+0x110>
			switch (length_mod) {
     f4e:	f1ac 0303 	sub.w	r3, ip, #3
     f52:	2b04      	cmp	r3, #4
     f54:	d81a      	bhi.n	f8c <cbvprintf+0xec>
     f56:	e8df f003 	tbb	[pc, r3]
     f5a:	3b03      	.short	0x3b03
     f5c:	193b      	.short	0x193b
     f5e:	19          	.byte	0x19
     f5f:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
     f60:	f854 1b04 	ldr.w	r1, [r4], #4
     f64:	17cb      	asrs	r3, r1, #31
				value.sint = (short)value.sint;
     f66:	469e      	mov	lr, r3
		if (conv.invalid || conv.unsupported) {
     f68:	f89d 3014 	ldrb.w	r3, [sp, #20]
     f6c:	f013 0603 	ands.w	r6, r3, #3
     f70:	d050      	beq.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
			OUTS(sp, fp);
     f72:	9b02      	ldr	r3, [sp, #8]
     f74:	4652      	mov	r2, sl
     f76:	4649      	mov	r1, r9
     f78:	4640      	mov	r0, r8
     f7a:	f003 f94c 	bl	4216 <outs>
     f7e:	2800      	cmp	r0, #0
     f80:	f2c0 80a7 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
     f84:	4405      	add	r5, r0
			OUTS(bps, bpe);
     f86:	f8dd a008 	ldr.w	sl, [sp, #8]
     f8a:	e791      	b.n	eb0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f8c:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
     f90:	f1bc 0f01 	cmp.w	ip, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f94:	ea4f 73e1 	mov.w	r3, r1, asr #31
				value.sint =
     f98:	469e      	mov	lr, r3
			if (length_mod == LENGTH_HH) {
     f9a:	d102      	bne.n	fa2 <cbvprintf+0x102>
				value.uint = (unsigned char)value.uint;
     f9c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     fa0:	e013      	b.n	fca <cbvprintf+0x12a>
			} else if (length_mod == LENGTH_H) {
     fa2:	f1bc 0f02 	cmp.w	ip, #2
     fa6:	d1df      	bne.n	f68 <cbvprintf+0xc8>
				value.sint = (short)value.sint;
     fa8:	b20a      	sxth	r2, r1
     faa:	17d3      	asrs	r3, r2, #31
     fac:	4611      	mov	r1, r2
     fae:	e7da      	b.n	f66 <cbvprintf+0xc6>
		} else if (specifier_cat == SPECIFIER_UINT) {
     fb0:	2b02      	cmp	r3, #2
     fb2:	d122      	bne.n	ffa <cbvprintf+0x15a>
			switch (length_mod) {
     fb4:	f1ac 0303 	sub.w	r3, ip, #3
     fb8:	2b04      	cmp	r3, #4
     fba:	d812      	bhi.n	fe2 <cbvprintf+0x142>
     fbc:	e8df f003 	tbb	[pc, r3]
     fc0:	11080803 	.word	0x11080803
     fc4:	11          	.byte	0x11
     fc5:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
     fc6:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint = (unsigned short)value.uint;
     fca:	f04f 0e00 	mov.w	lr, #0
     fce:	e7cb      	b.n	f68 <cbvprintf+0xc8>
					(uint_value_type)va_arg(ap,
     fd0:	1de3      	adds	r3, r4, #7
     fd2:	f023 0307 	bic.w	r3, r3, #7
     fd6:	461c      	mov	r4, r3
				value.uint =
     fd8:	f8d3 e004 	ldr.w	lr, [r3, #4]
     fdc:	f854 1b08 	ldr.w	r1, [r4], #8
				break;
     fe0:	e7c2      	b.n	f68 <cbvprintf+0xc8>
			if (length_mod == LENGTH_HH) {
     fe2:	f1bc 0f01 	cmp.w	ip, #1
					(uint_value_type)va_arg(ap, size_t);
     fe6:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint =
     fea:	f04f 0e00 	mov.w	lr, #0
			if (length_mod == LENGTH_HH) {
     fee:	d0d5      	beq.n	f9c <cbvprintf+0xfc>
			} else if (length_mod == LENGTH_H) {
     ff0:	f1bc 0f02 	cmp.w	ip, #2
     ff4:	d1b8      	bne.n	f68 <cbvprintf+0xc8>
				value.uint = (unsigned short)value.uint;
     ff6:	b289      	uxth	r1, r1
     ff8:	e7e7      	b.n	fca <cbvprintf+0x12a>
		} else if (specifier_cat == SPECIFIER_FP) {
     ffa:	2b04      	cmp	r3, #4
     ffc:	d105      	bne.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
			if (length_mod == LENGTH_UPPER_L) {
     ffe:	3407      	adds	r4, #7
    1000:	f024 0407 	bic.w	r4, r4, #7
    1004:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1008:	e7d0      	b.n	fac <cbvprintf+0x10c>
		} else if (specifier_cat == SPECIFIER_PTR) {
    100a:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
    100c:	bf08      	it	eq
    100e:	f854 1b04 	ldreq.w	r1, [r4], #4
    1012:	e7a9      	b.n	f68 <cbvprintf+0xc8>
		switch (conv.specifier) {
    1014:	f89d 0017 	ldrb.w	r0, [sp, #23]
    1018:	2878      	cmp	r0, #120	; 0x78
    101a:	d8b4      	bhi.n	f86 <cbvprintf+0xe6>
    101c:	2862      	cmp	r0, #98	; 0x62
    101e:	d821      	bhi.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    1020:	2825      	cmp	r0, #37	; 0x25
    1022:	d051      	beq.n	10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
    1024:	2858      	cmp	r0, #88	; 0x58
    1026:	d1ae      	bne.n	f86 <cbvprintf+0xe6>
			bps = encode_uint(value.uint, &conv, buf, bpe);
    1028:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    102c:	9300      	str	r3, [sp, #0]
    102e:	4608      	mov	r0, r1
    1030:	ab08      	add	r3, sp, #32
    1032:	aa05      	add	r2, sp, #20
    1034:	4671      	mov	r1, lr
    1036:	f003 f8a3 	bl	4180 <encode_uint>
    103a:	4682      	mov	sl, r0
			if (precision >= 0) {
    103c:	f1bb 0f00 	cmp.w	fp, #0
    1040:	f10d 0136 	add.w	r1, sp, #54	; 0x36
    1044:	db0c      	blt.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
				conv.flag_zero = false;
    1046:	f89d 2014 	ldrb.w	r2, [sp, #20]
				size_t len = bpe - bps;
    104a:	eba1 030a 	sub.w	r3, r1, sl
				conv.flag_zero = false;
    104e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1052:	459b      	cmp	fp, r3
				conv.flag_zero = false;
    1054:	f88d 2014 	strb.w	r2, [sp, #20]
				if (len < (size_t)precision) {
    1058:	d902      	bls.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
					conv.pad0_value = precision - (int)len;
    105a:	ebab 0303 	sub.w	r3, fp, r3
    105e:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
    1060:	468b      	mov	fp, r1
    1062:	e048      	b.n	10f6 <CONFIG_FPROTECT_BLOCK_SIZE+0xf6>
    1064:	3863      	subs	r0, #99	; 0x63
    1066:	2815      	cmp	r0, #21
    1068:	d88d      	bhi.n	f86 <cbvprintf+0xe6>
    106a:	a201      	add	r2, pc, #4	; (adr r2, 1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    106c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1070:	000010ff 	.word	0x000010ff
    1074:	0000115d 	.word	0x0000115d
    1078:	00000f87 	.word	0x00000f87
    107c:	00000f87 	.word	0x00000f87
    1080:	00000f87 	.word	0x00000f87
    1084:	00000f87 	.word	0x00000f87
    1088:	0000115d 	.word	0x0000115d
    108c:	00000f87 	.word	0x00000f87
    1090:	00000f87 	.word	0x00000f87
    1094:	00000f87 	.word	0x00000f87
    1098:	00000f87 	.word	0x00000f87
    109c:	000011b7 	.word	0x000011b7
    10a0:	00001185 	.word	0x00001185
    10a4:	00001189 	.word	0x00001189
    10a8:	00000f87 	.word	0x00000f87
    10ac:	00000f87 	.word	0x00000f87
    10b0:	000010d9 	.word	0x000010d9
    10b4:	00000f87 	.word	0x00000f87
    10b8:	00001185 	.word	0x00001185
    10bc:	00000f87 	.word	0x00000f87
    10c0:	00000f87 	.word	0x00000f87
    10c4:	00001185 	.word	0x00001185
			OUTC('%');
    10c8:	4649      	mov	r1, r9
    10ca:	47c0      	blx	r8
    10cc:	2800      	cmp	r0, #0
    10ce:	f6bf aefe 	bge.w	ece <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
    10d2:	b00f      	add	sp, #60	; 0x3c
    10d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = strlen(bps);
    10d8:	4608      	mov	r0, r1
			bps = (const char *)value.ptr;
    10da:	468a      	mov	sl, r1
			size_t len = strlen(bps);
    10dc:	9103      	str	r1, [sp, #12]
    10de:	f003 f966 	bl	43ae <strlen>
			if ((precision >= 0)
    10e2:	f1bb 0f00 	cmp.w	fp, #0
    10e6:	9903      	ldr	r1, [sp, #12]
    10e8:	db02      	blt.n	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
    10ea:	4558      	cmp	r0, fp
    10ec:	bf28      	it	cs
    10ee:	4658      	movcs	r0, fp
			bpe = bps + len;
    10f0:	eb01 0b00 	add.w	fp, r1, r0
		char sign = 0;
    10f4:	2600      	movs	r6, #0
		if (bps == NULL) {
    10f6:	f1ba 0f00 	cmp.w	sl, #0
    10fa:	d107      	bne.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    10fc:	e743      	b.n	f86 <cbvprintf+0xe6>
			buf[0] = value.uint;
    10fe:	f88d 1020 	strb.w	r1, [sp, #32]
			break;
    1102:	2600      	movs	r6, #0
			bpe = buf + 1;
    1104:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
    1108:	f10d 0a20 	add.w	sl, sp, #32
		size_t nj_len = (bpe - bps);
    110c:	ebab 030a 	sub.w	r3, fp, sl
		if (sign != 0) {
    1110:	b106      	cbz	r6, 1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
			nj_len += 1U;
    1112:	3301      	adds	r3, #1
		if (conv.altform_0c) {
    1114:	f89d 2016 	ldrb.w	r2, [sp, #22]
    1118:	06d0      	lsls	r0, r2, #27
    111a:	d567      	bpl.n	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
			nj_len += 2U;
    111c:	3302      	adds	r3, #2
		if (conv.pad_fp) {
    111e:	0652      	lsls	r2, r2, #25
		nj_len += conv.pad0_value;
    1120:	9906      	ldr	r1, [sp, #24]
			nj_len += conv.pad0_pre_exp;
    1122:	bf48      	it	mi
    1124:	9a07      	ldrmi	r2, [sp, #28]
		nj_len += conv.pad0_value;
    1126:	440b      	add	r3, r1
			nj_len += conv.pad0_pre_exp;
    1128:	bf48      	it	mi
    112a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    112c:	2f00      	cmp	r7, #0
    112e:	dd70      	ble.n	1212 <CONFIG_FPROTECT_BLOCK_SIZE+0x212>
			if (!conv.flag_dash) {
    1130:	f89d 2014 	ldrb.w	r2, [sp, #20]
			width -= (int)nj_len;
    1134:	1aff      	subs	r7, r7, r3
			if (!conv.flag_dash) {
    1136:	f3c2 0380 	ubfx	r3, r2, #2, #1
    113a:	9303      	str	r3, [sp, #12]
    113c:	0753      	lsls	r3, r2, #29
    113e:	d468      	bmi.n	1212 <CONFIG_FPROTECT_BLOCK_SIZE+0x212>
				if (conv.flag_zero) {
    1140:	0650      	lsls	r0, r2, #25
    1142:	f140 80a3 	bpl.w	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
					if (sign != 0) {
    1146:	b13e      	cbz	r6, 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
						OUTC(sign);
    1148:	4649      	mov	r1, r9
    114a:	4630      	mov	r0, r6
    114c:	47c0      	blx	r8
    114e:	2800      	cmp	r0, #0
    1150:	dbbf      	blt.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
						sign = 0;
    1152:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1154:	3501      	adds	r5, #1
						sign = 0;
    1156:	461e      	mov	r6, r3
					pad = '0';
    1158:	2330      	movs	r3, #48	; 0x30
    115a:	e098      	b.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
			if (conv.flag_plus) {
    115c:	071e      	lsls	r6, r3, #28
    115e:	d40f      	bmi.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
				sign = ' ';
    1160:	f013 0610 	ands.w	r6, r3, #16
    1164:	bf18      	it	ne
    1166:	2620      	movne	r6, #32
			if (value.sint < 0) {
    1168:	2900      	cmp	r1, #0
    116a:	f17e 0000 	sbcs.w	r0, lr, #0
    116e:	f6bf af5b 	bge.w	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
				value.uint = -value.sint;
    1172:	424a      	negs	r2, r1
    1174:	eb6e 034e 	sbc.w	r3, lr, lr, lsl #1
    1178:	4611      	mov	r1, r2
    117a:	469e      	mov	lr, r3
				sign = '-';
    117c:	262d      	movs	r6, #45	; 0x2d
    117e:	e753      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
				sign = '+';
    1180:	262b      	movs	r6, #43	; 0x2b
    1182:	e7f1      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
		switch (conv.specifier) {
    1184:	2600      	movs	r6, #0
    1186:	e74f      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
			if (value.ptr != NULL) {
    1188:	b351      	cbz	r1, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
    118a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    118e:	9300      	str	r3, [sp, #0]
    1190:	4608      	mov	r0, r1
    1192:	ab08      	add	r3, sp, #32
    1194:	aa05      	add	r2, sp, #20
    1196:	2100      	movs	r1, #0
    1198:	f002 fff2 	bl	4180 <encode_uint>
				conv.altform_0c = true;
    119c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    11a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    11a4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    11a8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value.ptr, &conv,
    11ac:	4682      	mov	sl, r0
				conv.altform_0c = true;
    11ae:	f8ad 3016 	strh.w	r3, [sp, #22]
		char sign = 0;
    11b2:	2600      	movs	r6, #0
				goto prec_int_pad0;
    11b4:	e742      	b.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
	switch ((enum length_mod_enum)conv->length_mod) {
    11b6:	f1bc 0f07 	cmp.w	ip, #7
    11ba:	f63f aee4 	bhi.w	f86 <cbvprintf+0xe6>
    11be:	e8df f00c 	tbb	[pc, ip]
    11c2:	040d      	.short	0x040d
    11c4:	08080d06 	.word	0x08080d06
    11c8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    11ca:	700d      	strb	r5, [r1, #0]
		break;
    11cc:	e6db      	b.n	f86 <cbvprintf+0xe6>
		*(short *)dp = (short)count;
    11ce:	800d      	strh	r5, [r1, #0]
		break;
    11d0:	e6d9      	b.n	f86 <cbvprintf+0xe6>
		*(intmax_t *)dp = (intmax_t)count;
    11d2:	462a      	mov	r2, r5
    11d4:	17eb      	asrs	r3, r5, #31
    11d6:	e9c1 2300 	strd	r2, r3, [r1]
		break;
    11da:	e6d4      	b.n	f86 <cbvprintf+0xe6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    11dc:	600d      	str	r5, [r1, #0]
		break;
    11de:	e6d2      	b.n	f86 <cbvprintf+0xe6>
			bpe = bps + 5;
    11e0:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    11e4:	460e      	mov	r6, r1
			bps = "(nil)";
    11e6:	f1ab 0a05 	sub.w	sl, fp, #5
    11ea:	e78f      	b.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
		} else if (conv.altform_0) {
    11ec:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    11ee:	bf48      	it	mi
    11f0:	3301      	addmi	r3, #1
    11f2:	e794      	b.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
					OUTC(pad);
    11f4:	4618      	mov	r0, r3
    11f6:	4649      	mov	r1, r9
    11f8:	9303      	str	r3, [sp, #12]
    11fa:	47c0      	blx	r8
    11fc:	2800      	cmp	r0, #0
    11fe:	9b03      	ldr	r3, [sp, #12]
    1200:	f6ff af67 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
				while (width-- > 0) {
    1204:	2f00      	cmp	r7, #0
    1206:	eba5 0107 	sub.w	r1, r5, r7
    120a:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    120e:	dcf1      	bgt.n	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    1210:	460d      	mov	r5, r1
		if (sign != 0) {
    1212:	b136      	cbz	r6, 1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
			OUTC(sign);
    1214:	4649      	mov	r1, r9
    1216:	4630      	mov	r0, r6
    1218:	47c0      	blx	r8
    121a:	2800      	cmp	r0, #0
    121c:	f6ff af59 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    1220:	3501      	adds	r5, #1
			if (conv.altform_0c | conv.altform_0) {
    1222:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1226:	06d9      	lsls	r1, r3, #27
    1228:	d401      	bmi.n	122e <CONFIG_FPROTECT_BLOCK_SIZE+0x22e>
    122a:	071a      	lsls	r2, r3, #28
    122c:	d506      	bpl.n	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
				OUTC('0');
    122e:	4649      	mov	r1, r9
    1230:	2030      	movs	r0, #48	; 0x30
    1232:	47c0      	blx	r8
    1234:	2800      	cmp	r0, #0
    1236:	f6ff af4c 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    123a:	3501      	adds	r5, #1
			if (conv.altform_0c) {
    123c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1240:	06db      	lsls	r3, r3, #27
    1242:	d507      	bpl.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
				OUTC(conv.specifier);
    1244:	f89d 0017 	ldrb.w	r0, [sp, #23]
    1248:	4649      	mov	r1, r9
    124a:	47c0      	blx	r8
    124c:	2800      	cmp	r0, #0
    124e:	f6ff af40 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    1252:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1254:	9e06      	ldr	r6, [sp, #24]
    1256:	442e      	add	r6, r5
    1258:	1b73      	subs	r3, r6, r5
    125a:	2b00      	cmp	r3, #0
    125c:	dc19      	bgt.n	1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
			OUTS(bps, bpe);
    125e:	465b      	mov	r3, fp
    1260:	4652      	mov	r2, sl
    1262:	4649      	mov	r1, r9
    1264:	4640      	mov	r0, r8
    1266:	f002 ffd6 	bl	4216 <outs>
    126a:	2800      	cmp	r0, #0
    126c:	f6ff af31 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    1270:	4405      	add	r5, r0
		while (width > 0) {
    1272:	442f      	add	r7, r5
    1274:	1b7b      	subs	r3, r7, r5
    1276:	2b00      	cmp	r3, #0
    1278:	f77f ae85 	ble.w	f86 <cbvprintf+0xe6>
			OUTC(' ');
    127c:	4649      	mov	r1, r9
    127e:	2020      	movs	r0, #32
    1280:	47c0      	blx	r8
    1282:	2800      	cmp	r0, #0
    1284:	f6ff af25 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    1288:	3501      	adds	r5, #1
			--width;
    128a:	e7f3      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
				char pad = ' ';
    128c:	2320      	movs	r3, #32
    128e:	443d      	add	r5, r7
    1290:	e7b8      	b.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
				OUTC('0');
    1292:	4649      	mov	r1, r9
    1294:	2030      	movs	r0, #48	; 0x30
    1296:	47c0      	blx	r8
    1298:	2800      	cmp	r0, #0
    129a:	f6ff af1a 	blt.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    129e:	3501      	adds	r5, #1
    12a0:	e7da      	b.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    12a2:	bf00      	nop
    12a4:	00004c8f 	.word	0x00004c8f

000012a8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    12a8:	b510      	push	{r4, lr}
    12aa:	4807      	ldr	r0, [pc, #28]	; (12c8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    12ac:	4c07      	ldr	r4, [pc, #28]	; (12cc <uart_console_init+0x24>)
    12ae:	f001 fe4f 	bl	2f50 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    12b2:	4b07      	ldr	r3, [pc, #28]	; (12d0 <uart_console_init+0x28>)
    12b4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    12b6:	4620      	mov	r0, r4
    12b8:	f000 fe18 	bl	1eec <__stdout_hook_install>
	__printk_hook_install(console_out);
    12bc:	4620      	mov	r0, r4
    12be:	f7ff fb9d 	bl	9fc <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    12c2:	2000      	movs	r0, #0
    12c4:	bd10      	pop	{r4, pc}
    12c6:	bf00      	nop
    12c8:	00004c90 	.word	0x00004c90
    12cc:	000012d5 	.word	0x000012d5
    12d0:	20000214 	.word	0x20000214

000012d4 <console_out>:
	if ('\n' == c) {
    12d4:	280a      	cmp	r0, #10
{
    12d6:	b538      	push	{r3, r4, r5, lr}
    12d8:	4d07      	ldr	r5, [pc, #28]	; (12f8 <console_out+0x24>)
    12da:	4604      	mov	r4, r0
	if ('\n' == c) {
    12dc:	d104      	bne.n	12e8 <console_out+0x14>
    12de:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    12e0:	6883      	ldr	r3, [r0, #8]
    12e2:	210d      	movs	r1, #13
    12e4:	685b      	ldr	r3, [r3, #4]
    12e6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    12e8:	6828      	ldr	r0, [r5, #0]
    12ea:	6883      	ldr	r3, [r0, #8]
    12ec:	b2e1      	uxtb	r1, r4
    12ee:	685b      	ldr	r3, [r3, #4]
    12f0:	4798      	blx	r3
}
    12f2:	4620      	mov	r0, r4
    12f4:	bd38      	pop	{r3, r4, r5, pc}
    12f6:	bf00      	nop
    12f8:	20000214 	.word	0x20000214

000012fc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    12fc:	4a0e      	ldr	r2, [pc, #56]	; (1338 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    12fe:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1300:	1a84      	subs	r4, r0, r2
    1302:	10a3      	asrs	r3, r4, #2
    1304:	4c0d      	ldr	r4, [pc, #52]	; (133c <onoff_stop+0x40>)
    1306:	435c      	muls	r4, r3
{
    1308:	4605      	mov	r5, r0
    130a:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    130c:	200c      	movs	r0, #12
    130e:	fb00 2004 	mla	r0, r0, r4, r2
{
    1312:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    1314:	2140      	movs	r1, #64	; 0x40
    1316:	4408      	add	r0, r1
    1318:	f002 ff9d 	bl	4256 <set_off_state>
	if (err < 0) {
    131c:	1e01      	subs	r1, r0, #0
    131e:	db05      	blt.n	132c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    1320:	4b07      	ldr	r3, [pc, #28]	; (1340 <onoff_stop+0x44>)
    1322:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    1326:	6863      	ldr	r3, [r4, #4]
    1328:	4798      	blx	r3
	return 0;
    132a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    132c:	4628      	mov	r0, r5
    132e:	4633      	mov	r3, r6
}
    1330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1334:	4718      	bx	r3
    1336:	bf00      	nop
    1338:	20000228 	.word	0x20000228
    133c:	b6db6db7 	.word	0xb6db6db7
    1340:	00004aac 	.word	0x00004aac

00001344 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1348:	4e10      	ldr	r6, [pc, #64]	; (138c <onoff_start+0x48>)
    134a:	1b84      	subs	r4, r0, r6
    134c:	10a3      	asrs	r3, r4, #2
    134e:	4c10      	ldr	r4, [pc, #64]	; (1390 <onoff_start+0x4c>)
    1350:	435c      	muls	r4, r3
    1352:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    1354:	250c      	movs	r5, #12
    1356:	4365      	muls	r5, r4
{
    1358:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    135a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    135e:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    1360:	4430      	add	r0, r6
    1362:	2140      	movs	r1, #64	; 0x40
    1364:	f002 ff90 	bl	4288 <set_starting_state>
	if (err < 0) {
    1368:	1e01      	subs	r1, r0, #0
    136a:	db09      	blt.n	1380 <onoff_start+0x3c>
	subdata->cb = cb;
    136c:	4a09      	ldr	r2, [pc, #36]	; (1394 <onoff_start+0x50>)
    136e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    1370:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    1374:	4b08      	ldr	r3, [pc, #32]	; (1398 <onoff_start+0x54>)
    1376:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    137a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    137e:	4718      	bx	r3
		notify(mgr, err);
    1380:	4640      	mov	r0, r8
    1382:	463b      	mov	r3, r7
}
    1384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1388:	4718      	bx	r3
    138a:	bf00      	nop
    138c:	20000228 	.word	0x20000228
    1390:	b6db6db7 	.word	0xb6db6db7
    1394:	000042eb 	.word	0x000042eb
    1398:	00004aac 	.word	0x00004aac

0000139c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    139c:	2200      	movs	r2, #0
{
    139e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    13a0:	2101      	movs	r1, #1
{
    13a2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    13a4:	4610      	mov	r0, r2
    13a6:	f000 fa87 	bl	18b8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    13aa:	2000      	movs	r0, #0
    13ac:	f000 fa66 	bl	187c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    13b0:	480f      	ldr	r0, [pc, #60]	; (13f0 <clk_init+0x54>)
    13b2:	f001 fc85 	bl	2cc0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    13b6:	4b0f      	ldr	r3, [pc, #60]	; (13f4 <clk_init+0x58>)
    13b8:	4298      	cmp	r0, r3
    13ba:	d115      	bne.n	13e8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    13bc:	f003 f92e 	bl	461c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    13c0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    13c2:	490d      	ldr	r1, [pc, #52]	; (13f8 <clk_init+0x5c>)
    13c4:	4630      	mov	r0, r6
    13c6:	f002 fd99 	bl	3efc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    13ca:	2800      	cmp	r0, #0
    13cc:	db0b      	blt.n	13e6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    13ce:	2501      	movs	r5, #1
    13d0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    13d2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    13d4:	4908      	ldr	r1, [pc, #32]	; (13f8 <clk_init+0x5c>)
    13d6:	f104 001c 	add.w	r0, r4, #28
    13da:	f002 fd8f 	bl	3efc <onoff_manager_init>
		if (err < 0) {
    13de:	2800      	cmp	r0, #0
    13e0:	db01      	blt.n	13e6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    13e2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    13e4:	2000      	movs	r0, #0
}
    13e6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    13e8:	f06f 0004 	mvn.w	r0, #4
    13ec:	e7fb      	b.n	13e6 <clk_init+0x4a>
    13ee:	bf00      	nop
    13f0:	00001431 	.word	0x00001431
    13f4:	0bad0000 	.word	0x0bad0000
    13f8:	00004abc 	.word	0x00004abc

000013fc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    13fc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    13fe:	230c      	movs	r3, #12
    1400:	4809      	ldr	r0, [pc, #36]	; (1428 <clkstarted_handle.constprop.0+0x2c>)
    1402:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1404:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1406:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1408:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    140c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    140e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1410:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1412:	4418      	add	r0, r3
    1414:	f002 ff56 	bl	42c4 <set_on_state>
	if (callback) {
    1418:	b12d      	cbz	r5, 1426 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    141a:	4632      	mov	r2, r6
    141c:	462b      	mov	r3, r5
    141e:	4803      	ldr	r0, [pc, #12]	; (142c <clkstarted_handle.constprop.0+0x30>)
}
    1420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1424:	4718      	bx	r3
}
    1426:	bd70      	pop	{r4, r5, r6, pc}
    1428:	20000228 	.word	0x20000228
    142c:	200000b4 	.word	0x200000b4

00001430 <clock_event_handler>:
	switch (event) {
    1430:	b110      	cbz	r0, 1438 <clock_event_handler+0x8>
    1432:	2801      	cmp	r0, #1
    1434:	d004      	beq.n	1440 <clock_event_handler+0x10>
    1436:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1438:	4b03      	ldr	r3, [pc, #12]	; (1448 <clock_event_handler+0x18>)
    143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    143c:	075b      	lsls	r3, r3, #29
    143e:	d101      	bne.n	1444 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1440:	f7ff bfdc 	b.w	13fc <clkstarted_handle.constprop.0>
}
    1444:	4770      	bx	lr
    1446:	bf00      	nop
    1448:	20000228 	.word	0x20000228

0000144c <generic_hfclk_start>:
{
    144c:	b508      	push	{r3, lr}
    144e:	f04f 0320 	mov.w	r3, #32
    1452:	f3ef 8111 	mrs	r1, BASEPRI
    1456:	f383 8811 	msr	BASEPRI, r3
    145a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    145e:	4a12      	ldr	r2, [pc, #72]	; (14a8 <generic_hfclk_start+0x5c>)
    1460:	6813      	ldr	r3, [r2, #0]
    1462:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1466:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    146a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    146c:	d00c      	beq.n	1488 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    146e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1472:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1476:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    147a:	f013 0301 	ands.w	r3, r3, #1
    147e:	d003      	beq.n	1488 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1480:	480a      	ldr	r0, [pc, #40]	; (14ac <generic_hfclk_start+0x60>)
    1482:	f002 ff1f 	bl	42c4 <set_on_state>
			already_started = true;
    1486:	2301      	movs	r3, #1
	__asm__ volatile(
    1488:	f381 8811 	msr	BASEPRI, r1
    148c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1490:	b123      	cbz	r3, 149c <generic_hfclk_start+0x50>
}
    1492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    1496:	2000      	movs	r0, #0
    1498:	f7ff bfb0 	b.w	13fc <clkstarted_handle.constprop.0>
}
    149c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    14a0:	2001      	movs	r0, #1
    14a2:	f001 bc1d 	b.w	2ce0 <nrfx_clock_start>
    14a6:	bf00      	nop
    14a8:	20000278 	.word	0x20000278
    14ac:	20000268 	.word	0x20000268

000014b0 <lfclk_start>:
{
    14b0:	b510      	push	{r4, lr}
	if (!once) {
    14b2:	4c07      	ldr	r4, [pc, #28]	; (14d0 <lfclk_start+0x20>)
    14b4:	7823      	ldrb	r3, [r4, #0]
    14b6:	b92b      	cbnz	r3, 14c4 <lfclk_start+0x14>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    14b8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    14bc:	f003 f9a7 	bl	480e <z_impl_k_busy_wait>
		once = true;
    14c0:	2301      	movs	r3, #1
    14c2:	7023      	strb	r3, [r4, #0]
}
    14c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    14c8:	2000      	movs	r0, #0
    14ca:	f001 bc09 	b.w	2ce0 <nrfx_clock_start>
    14ce:	bf00      	nop
    14d0:	2000039e 	.word	0x2000039e

000014d4 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    14d4:	4b09      	ldr	r3, [pc, #36]	; (14fc <generic_hfclk_stop+0x28>)
    14d6:	f3bf 8f5b 	dmb	ish
    14da:	e853 2f00 	ldrex	r2, [r3]
    14de:	f022 0102 	bic.w	r1, r2, #2
    14e2:	e843 1000 	strex	r0, r1, [r3]
    14e6:	2800      	cmp	r0, #0
    14e8:	d1f7      	bne.n	14da <generic_hfclk_stop+0x6>
    14ea:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    14ee:	07d3      	lsls	r3, r2, #31
    14f0:	d402      	bmi.n	14f8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    14f2:	2001      	movs	r0, #1
    14f4:	f001 bc40 	b.w	2d78 <nrfx_clock_stop>
}
    14f8:	4770      	bx	lr
    14fa:	bf00      	nop
    14fc:	20000278 	.word	0x20000278

00001500 <api_blocking_start>:
{
    1500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1502:	2200      	movs	r2, #0
    1504:	2301      	movs	r3, #1
    1506:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    150a:	4a09      	ldr	r2, [pc, #36]	; (1530 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    150c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1510:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1512:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1516:	f002 ff0b 	bl	4330 <api_start>
	if (err < 0) {
    151a:	2800      	cmp	r0, #0
    151c:	db05      	blt.n	152a <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    151e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1522:	2300      	movs	r3, #0
    1524:	4668      	mov	r0, sp
    1526:	f002 f9ad 	bl	3884 <z_impl_k_sem_take>
}
    152a:	b005      	add	sp, #20
    152c:	f85d fb04 	ldr.w	pc, [sp], #4
    1530:	000042fd 	.word	0x000042fd

00001534 <z_nrf_clock_control_lf_on>:
{
    1534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1538:	493a      	ldr	r1, [pc, #232]	; (1624 <z_nrf_clock_control_lf_on+0xf0>)
    153a:	f3bf 8f5b 	dmb	ish
    153e:	4606      	mov	r6, r0
    1540:	2201      	movs	r2, #1
    1542:	e851 3f00 	ldrex	r3, [r1]
    1546:	e841 2000 	strex	r0, r2, [r1]
    154a:	2800      	cmp	r0, #0
    154c:	d1f9      	bne.n	1542 <z_nrf_clock_control_lf_on+0xe>
    154e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1552:	b933      	cbnz	r3, 1562 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1554:	4934      	ldr	r1, [pc, #208]	; (1628 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    1556:	4835      	ldr	r0, [pc, #212]	; (162c <z_nrf_clock_control_lf_on+0xf8>)
    1558:	604b      	str	r3, [r1, #4]
    155a:	60cb      	str	r3, [r1, #12]
    155c:	608a      	str	r2, [r1, #8]
    155e:	f002 fce0 	bl	3f22 <onoff_request>
	switch (start_mode) {
    1562:	1e73      	subs	r3, r6, #1
    1564:	2b01      	cmp	r3, #1
    1566:	d832      	bhi.n	15ce <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1568:	2e01      	cmp	r6, #1
    156a:	d107      	bne.n	157c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    156c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1570:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1574:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1578:	2b01      	cmp	r3, #1
    157a:	d028      	beq.n	15ce <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    157c:	f003 f941 	bl	4802 <k_is_in_isr>
    1580:	4604      	mov	r4, r0
    1582:	b918      	cbnz	r0, 158c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1584:	4b2a      	ldr	r3, [pc, #168]	; (1630 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1586:	781b      	ldrb	r3, [r3, #0]
    1588:	2b00      	cmp	r3, #0
    158a:	d144      	bne.n	1616 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    158c:	f04f 0320 	mov.w	r3, #32
    1590:	f3ef 8511 	mrs	r5, BASEPRI
    1594:	f383 8811 	msr	BASEPRI, r3
    1598:	f3bf 8f6f 	isb	sy
    159c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    159e:	4f25      	ldr	r7, [pc, #148]	; (1634 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15a0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1638 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    15a4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 163c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    15a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    15ac:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    15b0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    15b4:	03d2      	lsls	r2, r2, #15
    15b6:	d50c      	bpl.n	15d2 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    15b8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    15bc:	2b01      	cmp	r3, #1
    15be:	d001      	beq.n	15c4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    15c0:	2e01      	cmp	r6, #1
    15c2:	d106      	bne.n	15d2 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    15c4:	b30c      	cbz	r4, 160a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    15c6:	f385 8811 	msr	BASEPRI, r5
    15ca:	f3bf 8f6f 	isb	sy
}
    15ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    15d2:	b1ac      	cbz	r4, 1600 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    15d4:	4628      	mov	r0, r5
    15d6:	f000 fa47 	bl	1a68 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    15da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    15de:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    15e2:	2b00      	cmp	r3, #0
    15e4:	d1e0      	bne.n	15a8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    15e6:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    15e8:	2900      	cmp	r1, #0
    15ea:	d0dd      	beq.n	15a8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    15ec:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    15ee:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    15f0:	2301      	movs	r3, #1
    15f2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    15f6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    15fa:	f8c9 3000 	str.w	r3, [r9]
}
    15fe:	e7d3      	b.n	15a8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    1600:	2100      	movs	r1, #0
    1602:	2021      	movs	r0, #33	; 0x21
    1604:	f002 f8f8 	bl	37f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1608:	e7e7      	b.n	15da <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    160a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    160e:	2202      	movs	r2, #2
    1610:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1614:	e7db      	b.n	15ce <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    1616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    161a:	2202      	movs	r2, #2
    161c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1620:	4605      	mov	r5, r0
}
    1622:	e7bc      	b.n	159e <z_nrf_clock_control_lf_on+0x6a>
    1624:	2000027c 	.word	0x2000027c
    1628:	20000218 	.word	0x20000218
    162c:	20000244 	.word	0x20000244
    1630:	200007b1 	.word	0x200007b1
    1634:	40000104 	.word	0x40000104
    1638:	e000e100 	.word	0xe000e100
    163c:	40000008 	.word	0x40000008

00001640 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    1640:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1642:	4b08      	ldr	r3, [pc, #32]	; (1664 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1644:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1648:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    164c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    1650:	4290      	cmp	r0, r2
    1652:	d100      	bne.n	1656 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    1654:	4770      	bx	lr
    1656:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    165a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    165c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1660:	e7f2      	b.n	1648 <handle_next_cycle_case+0x8>
    1662:	bf00      	nop
    1664:	40011000 	.word	0x40011000

00001668 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1668:	4b07      	ldr	r3, [pc, #28]	; (1688 <rtc_nrf_isr+0x20>)
    166a:	2200      	movs	r2, #0
    166c:	601a      	str	r2, [r3, #0]
    166e:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1670:	4a06      	ldr	r2, [pc, #24]	; (168c <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    1672:	4b07      	ldr	r3, [pc, #28]	; (1690 <rtc_nrf_isr+0x28>)
    1674:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    1678:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    167a:	1ac0      	subs	r0, r0, r3
    167c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1680:	4403      	add	r3, r0
    1682:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    1684:	f002 baa4 	b.w	3bd0 <z_clock_announce>
    1688:	40011140 	.word	0x40011140
    168c:	20000280 	.word	0x20000280
    1690:	40011000 	.word	0x40011000

00001694 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    1694:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1696:	4d10      	ldr	r5, [pc, #64]	; (16d8 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1698:	4b10      	ldr	r3, [pc, #64]	; (16dc <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    169a:	2400      	movs	r4, #0
    169c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    16a0:	601c      	str	r4, [r3, #0]
    16a2:	681b      	ldr	r3, [r3, #0]
    16a4:	4b0e      	ldr	r3, [pc, #56]	; (16e0 <z_clock_driver_init+0x4c>)
    16a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    16aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    16ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    16b2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    16b6:	4622      	mov	r2, r4
    16b8:	2101      	movs	r1, #1
    16ba:	2011      	movs	r0, #17
    16bc:	f000 f8fc 	bl	18b8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    16c0:	2011      	movs	r0, #17
    16c2:	f000 f8db 	bl	187c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    16c6:	4a07      	ldr	r2, [pc, #28]	; (16e4 <z_clock_driver_init+0x50>)
    16c8:	2301      	movs	r3, #1
    16ca:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    16cc:	2002      	movs	r0, #2
    16ce:	602b      	str	r3, [r5, #0]
    16d0:	f7ff ff30 	bl	1534 <z_nrf_clock_control_lf_on>

	return 0;
}
    16d4:	4620      	mov	r0, r4
    16d6:	bd38      	pop	{r3, r4, r5, pc}
    16d8:	40011000 	.word	0x40011000
    16dc:	40011140 	.word	0x40011140
    16e0:	e000e100 	.word	0xe000e100
    16e4:	40011008 	.word	0x40011008

000016e8 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    16e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    16ea:	4b2d      	ldr	r3, [pc, #180]	; (17a0 <z_clock_set_timeout+0xb8>)
    16ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    16f0:	bf08      	it	eq
    16f2:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    16f4:	3801      	subs	r0, #1
    16f6:	2800      	cmp	r0, #0
    16f8:	dd40      	ble.n	177c <z_clock_set_timeout+0x94>
    16fa:	4298      	cmp	r0, r3
    16fc:	bfa8      	it	ge
    16fe:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1700:	4c28      	ldr	r4, [pc, #160]	; (17a4 <z_clock_set_timeout+0xbc>)

	uint32_t unannounced = counter_sub(counter(), last_count);
    1702:	4a29      	ldr	r2, [pc, #164]	; (17a8 <z_clock_set_timeout+0xc0>)
    1704:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    1708:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    170a:	4e28      	ldr	r6, [pc, #160]	; (17ac <z_clock_set_timeout+0xc4>)
	return (a - b) & COUNTER_MAX;
    170c:	1a9b      	subs	r3, r3, r2
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    170e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    1712:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
		ticks = 0;
    1716:	bf18      	it	ne
    1718:	2000      	movne	r0, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    171a:	3501      	adds	r5, #1
    171c:	4428      	add	r0, r5
    p_reg->INTENCLR = mask;
    171e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1722:	4d1f      	ldr	r5, [pc, #124]	; (17a0 <z_clock_set_timeout+0xb8>)
    1724:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
    1728:	42a8      	cmp	r0, r5
    172a:	bf94      	ite	ls
    172c:	1815      	addls	r5, r2, r0
    172e:	1955      	addhi	r5, r2, r5
     return p_reg->COUNTER;
    1730:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    1734:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1738:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
    173a:	1a9b      	subs	r3, r3, r2
    173c:	6037      	str	r7, [r6, #0]
    173e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1742:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
    1744:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1746:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    174a:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    174e:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    1752:	d104      	bne.n	175e <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
    1754:	200f      	movs	r0, #15
    1756:	f003 f85a 	bl	480e <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    175a:	6037      	str	r7, [r6, #0]
    175c:	6833      	ldr	r3, [r6, #0]
    175e:	4b14      	ldr	r3, [pc, #80]	; (17b0 <z_clock_set_timeout+0xc8>)
    1760:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1764:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    1768:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    176c:	1a2b      	subs	r3, r5, r0
    176e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    1772:	2b01      	cmp	r3, #1
    1774:	d104      	bne.n	1780 <z_clock_set_timeout+0x98>
		handle_next_cycle_case(t);
    1776:	f7ff ff63 	bl	1640 <handle_next_cycle_case>
    177a:	e00b      	b.n	1794 <z_clock_set_timeout+0xac>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    177c:	2000      	movs	r0, #0
    177e:	e7bf      	b.n	1700 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1780:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1784:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    1788:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    178c:	1a2d      	subs	r5, r5, r0
    178e:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    1790:	022b      	lsls	r3, r5, #8
    1792:	d4f0      	bmi.n	1776 <z_clock_set_timeout+0x8e>
    p_reg->INTENSET = mask;
    1794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1798:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    179c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    179e:	bf00      	nop
    17a0:	007fffff 	.word	0x007fffff
    17a4:	40011000 	.word	0x40011000
    17a8:	20000280 	.word	0x20000280
    17ac:	40011140 	.word	0x40011140
    17b0:	e000e100 	.word	0xe000e100

000017b4 <z_clock_elapsed>:
	__asm__ volatile(
    17b4:	f04f 0220 	mov.w	r2, #32
    17b8:	f3ef 8311 	mrs	r3, BASEPRI
    17bc:	f382 8811 	msr	BASEPRI, r2
    17c0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    17c4:	4a06      	ldr	r2, [pc, #24]	; (17e0 <z_clock_elapsed+0x2c>)
    17c6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    17ca:	4a06      	ldr	r2, [pc, #24]	; (17e4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    17cc:	6812      	ldr	r2, [r2, #0]
    17ce:	1a80      	subs	r0, r0, r2
    17d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    17d4:	f383 8811 	msr	BASEPRI, r3
    17d8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    17dc:	4770      	bx	lr
    17de:	bf00      	nop
    17e0:	40011000 	.word	0x40011000
    17e4:	20000280 	.word	0x20000280

000017e8 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    17e8:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    17ea:	4c11      	ldr	r4, [pc, #68]	; (1830 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    17ec:	4a11      	ldr	r2, [pc, #68]	; (1834 <_DoInit+0x4c>)
    17ee:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    17f0:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    17f2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    17f6:	4b10      	ldr	r3, [pc, #64]	; (1838 <_DoInit+0x50>)
    17f8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    17fa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    17fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1800:	4a0e      	ldr	r2, [pc, #56]	; (183c <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    1802:	490f      	ldr	r1, [pc, #60]	; (1840 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1804:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1806:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1808:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    180a:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    180c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    180e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1810:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1812:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1814:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1816:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1818:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    181a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    181c:	f002 fdbd 	bl	439a <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1820:	4908      	ldr	r1, [pc, #32]	; (1844 <_DoInit+0x5c>)
    1822:	4620      	mov	r0, r4
    1824:	f002 fdb9 	bl	439a <strcpy>
  p->acID[6] = ' ';
    1828:	2320      	movs	r3, #32
    182a:	71a3      	strb	r3, [r4, #6]
}
    182c:	bd10      	pop	{r4, pc}
    182e:	bf00      	nop
    1830:	20000284 	.word	0x20000284
    1834:	00004ca7 	.word	0x00004ca7
    1838:	200003af 	.word	0x200003af
    183c:	2000039f 	.word	0x2000039f
    1840:	00004cb0 	.word	0x00004cb0
    1844:	00004cb4 	.word	0x00004cb4

00001848 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1848:	4a09      	ldr	r2, [pc, #36]	; (1870 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    184a:	490a      	ldr	r1, [pc, #40]	; (1874 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    184c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    184e:	6809      	ldr	r1, [r1, #0]
    1850:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1852:	4909      	ldr	r1, [pc, #36]	; (1878 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1854:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1856:	684b      	ldr	r3, [r1, #4]
    1858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    185c:	604b      	str	r3, [r1, #4]
    185e:	2300      	movs	r3, #0
    1860:	f383 8811 	msr	BASEPRI, r3
    1864:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1868:	6893      	ldr	r3, [r2, #8]
}
    186a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    186c:	4770      	bx	lr
    186e:	bf00      	nop
    1870:	20000358 	.word	0x20000358
    1874:	00004b54 	.word	0x00004b54
    1878:	e000ed00 	.word	0xe000ed00

0000187c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    187c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187e:	2b00      	cmp	r3, #0
    1880:	db08      	blt.n	1894 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1882:	2201      	movs	r2, #1
    1884:	f000 001f 	and.w	r0, r0, #31
    1888:	fa02 f000 	lsl.w	r0, r2, r0
    188c:	095b      	lsrs	r3, r3, #5
    188e:	4a02      	ldr	r2, [pc, #8]	; (1898 <arch_irq_enable+0x1c>)
    1890:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1894:	4770      	bx	lr
    1896:	bf00      	nop
    1898:	e000e100 	.word	0xe000e100

0000189c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <arch_irq_is_enabled+0x18>)
    189e:	0942      	lsrs	r2, r0, #5
    18a0:	f000 001f 	and.w	r0, r0, #31
    18a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18a8:	2301      	movs	r3, #1
    18aa:	fa03 f000 	lsl.w	r0, r3, r0
}
    18ae:	4010      	ands	r0, r2
    18b0:	4770      	bx	lr
    18b2:	bf00      	nop
    18b4:	e000e100 	.word	0xe000e100

000018b8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18b8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    18ba:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18bc:	bfa8      	it	ge
    18be:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c6:	bfb8      	it	lt
    18c8:	4b06      	ldrlt	r3, [pc, #24]	; (18e4 <z_arm_irq_priority_set+0x2c>)
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18ce:	bfac      	ite	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	b2c9      	uxtb	r1, r1
    18da:	bfb4      	ite	lt
    18dc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18de:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    18e2:	4770      	bx	lr
    18e4:	e000ed14 	.word	0xe000ed14

000018e8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    18e8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    18ec:	9b00      	ldr	r3, [sp, #0]
    18ee:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    18f2:	490a      	ldr	r1, [pc, #40]	; (191c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    18f4:	9b01      	ldr	r3, [sp, #4]
    18f6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    18fa:	9b02      	ldr	r3, [sp, #8]
    18fc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1900:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1908:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    190c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1910:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1912:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1914:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    1916:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1918:	4770      	bx	lr
    191a:	bf00      	nop
    191c:	00003fb5 	.word	0x00003fb5

00001920 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1920:	4a0b      	ldr	r2, [pc, #44]	; (1950 <z_check_thread_stack_fail+0x30>)
{
    1922:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1924:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    1926:	b190      	cbz	r0, 194e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1928:	f113 0f16 	cmn.w	r3, #22
    192c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    192e:	d005      	beq.n	193c <z_check_thread_stack_fail+0x1c>
    1930:	f1a0 0220 	sub.w	r2, r0, #32
    1934:	429a      	cmp	r2, r3
    1936:	d806      	bhi.n	1946 <z_check_thread_stack_fail+0x26>
    1938:	4283      	cmp	r3, r0
    193a:	d204      	bcs.n	1946 <z_check_thread_stack_fail+0x26>
    193c:	4281      	cmp	r1, r0
    193e:	bf2c      	ite	cs
    1940:	2100      	movcs	r1, #0
    1942:	2101      	movcc	r1, #1
    1944:	e000      	b.n	1948 <z_check_thread_stack_fail+0x28>
    1946:	2100      	movs	r1, #0
    1948:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    194a:	bf08      	it	eq
    194c:	2000      	moveq	r0, #0
}
    194e:	4770      	bx	lr
    1950:	20000358 	.word	0x20000358

00001954 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1954:	b508      	push	{r3, lr}
    1956:	4604      	mov	r4, r0
    1958:	460e      	mov	r6, r1
    195a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    195c:	f000 f9f0 	bl	1d40 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1962:	4620      	mov	r0, r4
	_current = main_thread;
    1964:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1966:	f000 fa07 	bl	1d78 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    196a:	4628      	mov	r0, r5
    196c:	f386 8809 	msr	PSP, r6
    1970:	2100      	movs	r1, #0
    1972:	b663      	cpsie	if
    1974:	f381 8811 	msr	BASEPRI, r1
    1978:	f3bf 8f6f 	isb	sy
    197c:	2200      	movs	r2, #0
    197e:	2300      	movs	r3, #0
    1980:	f002 fb18 	bl	3fb4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1984:	20000358 	.word	0x20000358

00001988 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1988:	4a0e      	ldr	r2, [pc, #56]	; (19c4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    198a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    198c:	4b0e      	ldr	r3, [pc, #56]	; (19c8 <z_arm_prep_c+0x40>)
    198e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1992:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1994:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1998:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    199c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    19a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    19a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    19a8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    19ac:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    19b0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    19b4:	f001 fb30 	bl	3018 <z_bss_zero>
	z_data_copy();
    19b8:	f001 fb38 	bl	302c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    19bc:	f000 f992 	bl	1ce4 <z_arm_interrupt_init>
	z_cstart();
    19c0:	f001 fb72 	bl	30a8 <z_cstart>
    19c4:	00000000 	.word	0x00000000
    19c8:	e000ed00 	.word	0xe000ed00

000019cc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    19cc:	4912      	ldr	r1, [pc, #72]	; (1a18 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    19ce:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    19d0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    19d4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    19d6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    19da:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    19de:	2020      	movs	r0, #32
    msr BASEPRI, r0
    19e0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    19e4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    19e8:	4f0c      	ldr	r7, [pc, #48]	; (1a1c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    19ea:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    19ee:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    19f0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    19f2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    19f4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    19f6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    19f8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    19fa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    19fe:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1a00:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1a02:	f000 f9b9 	bl	1d78 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1a06:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1a0a:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    1a0e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1a12:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    1a16:	4770      	bx	lr
    ldr r1, =_kernel
    1a18:	20000358 	.word	0x20000358
    ldr v4, =_SCS_ICSR
    1a1c:	e000ed04 	.word	0xe000ed04

00001a20 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1a20:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1a24:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1a26:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1a2a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1a2e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1a30:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1a34:	2902      	cmp	r1, #2
    beq _oops
    1a36:	d0ff      	beq.n	1a38 <_oops>

00001a38 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1a38:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1a3a:	f002 fca3 	bl	4384 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1a3e:	bd01      	pop	{r0, pc}

00001a40 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1a40:	4901      	ldr	r1, [pc, #4]	; (1a48 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1a42:	2210      	movs	r2, #16
	str	r2, [r1]
    1a44:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1a46:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1a48:	e000ed10 	.word	0xe000ed10

00001a4c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1a4c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1a4e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1a50:	f380 8811 	msr	BASEPRI, r0
	isb
    1a54:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1a58:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1a5c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1a5e:	b662      	cpsie	i
	isb
    1a60:	f3bf 8f6f 	isb	sy

	bx	lr
    1a64:	4770      	bx	lr
    1a66:	bf00      	nop

00001a68 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1a68:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1a6a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1a6c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1a70:	bf20      	wfe

	msr	BASEPRI, r0
    1a72:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1a76:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1a78:	4770      	bx	lr
    1a7a:	bf00      	nop

00001a7c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1a7c:	bf30      	wfi
    b z_SysNmiOnReset
    1a7e:	f7ff bffd 	b.w	1a7c <z_SysNmiOnReset>
    1a82:	bf00      	nop

00001a84 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1a84:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1a86:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1a88:	4a0b      	ldr	r2, [pc, #44]	; (1ab8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1a8a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    1a8c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1a8e:	bf1e      	ittt	ne
	movne	r1, #0
    1a90:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1a92:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
    1a94:	f002 fde7 	blne	4666 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1a98:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1a9a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1a9e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1aa2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1aa6:	4905      	ldr	r1, [pc, #20]	; (1abc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1aa8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1aaa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1aac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1aae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1ab2:	4903      	ldr	r1, [pc, #12]	; (1ac0 <_isr_wrapper+0x3c>)
	bx r1
    1ab4:	4708      	bx	r1
    1ab6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ab8:	20000358 	.word	0x20000358
	ldr r1, =_sw_isr_table
    1abc:	0000494c 	.word	0x0000494c
	ldr r1, =z_arm_int_exit
    1ac0:	00001b09 	.word	0x00001b09

00001ac4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1ac4:	f002 fcd9 	bl	447a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ac8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1aca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1ace:	4808      	ldr	r0, [pc, #32]	; (1af0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1ad0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1ad4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1ad6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1ada:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1ade:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1ae0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1ae2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1ae6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1aea:	f7ff ff4d 	bl	1988 <z_arm_prep_c>
    1aee:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1af0:	20001940 	.word	0x20001940

00001af4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1af4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1af8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1afc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1afe:	4672      	mov	r2, lr
	bl z_arm_fault
    1b00:	f000 f872 	bl	1be8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1b04:	bd01      	pop	{r0, pc}
    1b06:	bf00      	nop

00001b08 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1b08:	4b04      	ldr	r3, [pc, #16]	; (1b1c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1b0a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1b0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    1b0e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1b10:	d003      	beq.n	1b1a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1b12:	4903      	ldr	r1, [pc, #12]	; (1b20 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1b18:	600a      	str	r2, [r1, #0]

00001b1a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1b1a:	4770      	bx	lr
	ldr r3, =_kernel
    1b1c:	20000358 	.word	0x20000358
	ldr r1, =_SCS_ICSR
    1b20:	e000ed04 	.word	0xe000ed04

00001b24 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1b24:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b26:	4b17      	ldr	r3, [pc, #92]	; (1b84 <mem_manage_fault+0x60>)
{
    1b28:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1b30:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1b32:	0790      	lsls	r0, r2, #30
    1b34:	d516      	bpl.n	1b64 <mem_manage_fault+0x40>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1b36:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b3a:	0612      	lsls	r2, r2, #24
    1b3c:	d504      	bpl.n	1b48 <mem_manage_fault+0x24>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    1b3e:	b119      	cbz	r1, 1b48 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1b46:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b4e:	06d2      	lsls	r2, r2, #27
    1b50:	d40b      	bmi.n	1b6a <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1b52:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1b54:	4a0b      	ldr	r2, [pc, #44]	; (1b84 <mem_manage_fault+0x60>)
    1b56:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b58:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1b5c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    1b5e:	2300      	movs	r3, #0
    1b60:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1b62:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1b64:	f06f 0015 	mvn.w	r0, #21
    1b68:	e7ee      	b.n	1b48 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1b6a:	685b      	ldr	r3, [r3, #4]
    1b6c:	051b      	lsls	r3, r3, #20
    1b6e:	d5f0      	bpl.n	1b52 <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1b70:	4629      	mov	r1, r5
    1b72:	f7ff fed5 	bl	1920 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1b76:	2800      	cmp	r0, #0
    1b78:	d0eb      	beq.n	1b52 <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1b7a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1b7e:	2002      	movs	r0, #2
    1b80:	e7e8      	b.n	1b54 <mem_manage_fault+0x30>
    1b82:	bf00      	nop
    1b84:	e000ed00 	.word	0xe000ed00

00001b88 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1b88:	4b0d      	ldr	r3, [pc, #52]	; (1bc0 <bus_fault.isra.0+0x38>)
    1b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b90:	0592      	lsls	r2, r2, #22
    1b92:	d508      	bpl.n	1ba6 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b98:	0412      	lsls	r2, r2, #16
    1b9a:	d504      	bpl.n	1ba6 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1b9c:	b118      	cbz	r0, 1ba6 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1ba4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1ba6:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <bus_fault.isra.0+0x38>)
    1ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bac:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1bae:	bf58      	it	pl
    1bb0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    1bb4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1bb6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1bba:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1bbc:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1bbe:	4770      	bx	lr
    1bc0:	e000ed00 	.word	0xe000ed00

00001bc4 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1bc4:	4b07      	ldr	r3, [pc, #28]	; (1be4 <usage_fault.isra.0+0x20>)
    1bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bd4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1bd8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1bdc:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1bde:	2000      	movs	r0, #0
    1be0:	4770      	bx	lr
    1be2:	bf00      	nop
    1be4:	e000ed00 	.word	0xe000ed00

00001be8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1be8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bea:	4b37      	ldr	r3, [pc, #220]	; (1cc8 <z_arm_fault+0xe0>)
    1bec:	685b      	ldr	r3, [r3, #4]
{
    1bee:	b08a      	sub	sp, #40	; 0x28
    1bf0:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bf6:	2500      	movs	r5, #0
    1bf8:	f385 8811 	msr	BASEPRI, r5
    1bfc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1c00:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1c04:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1c08:	d111      	bne.n	1c2e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1c0a:	f002 010c 	and.w	r1, r2, #12
    1c0e:	2908      	cmp	r1, #8
    1c10:	d00d      	beq.n	1c2e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1c12:	0711      	lsls	r1, r2, #28
    1c14:	d401      	bmi.n	1c1a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1c16:	4606      	mov	r6, r0
			*nested_exc = true;
    1c18:	2501      	movs	r5, #1
	*recoverable = false;
    1c1a:	2200      	movs	r2, #0
    1c1c:	3b03      	subs	r3, #3
    1c1e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1c22:	2b03      	cmp	r3, #3
    1c24:	d848      	bhi.n	1cb8 <z_arm_fault+0xd0>
    1c26:	e8df f003 	tbb	[pc, r3]
    1c2a:	3f04      	.short	0x3f04
    1c2c:	3c43      	.short	0x3c43
		return NULL;
    1c2e:	462e      	mov	r6, r5
    1c30:	e7f3      	b.n	1c1a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c32:	4b25      	ldr	r3, [pc, #148]	; (1cc8 <z_arm_fault+0xe0>)
    1c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c36:	0792      	lsls	r2, r2, #30
    1c38:	d43e      	bmi.n	1cb8 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1c3a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1c3c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1c40:	d009      	beq.n	1c56 <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
    1c42:	3328      	adds	r3, #40	; 0x28
    1c44:	781b      	ldrb	r3, [r3, #0]
    1c46:	b1f3      	cbz	r3, 1c86 <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
    1c48:	f10d 0207 	add.w	r2, sp, #7
    1c4c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1c4e:	4630      	mov	r0, r6
    1c50:	f7ff ff68 	bl	1b24 <mem_manage_fault>
		reason = usage_fault(esf);
    1c54:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1c56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c5a:	b993      	cbnz	r3, 1c82 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1c5c:	2220      	movs	r2, #32
    1c5e:	4631      	mov	r1, r6
    1c60:	a802      	add	r0, sp, #8
    1c62:	f002 fbb7 	bl	43d4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c68:	b345      	cbz	r5, 1cbc <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1c6e:	b922      	cbnz	r2, 1c7a <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1c70:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1c74:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c78:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1c7a:	a902      	add	r1, sp, #8
    1c7c:	4620      	mov	r0, r4
    1c7e:	f002 fb7f 	bl	4380 <z_arm_fatal_error>
}
    1c82:	b00a      	add	sp, #40	; 0x28
    1c84:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1c86:	4b11      	ldr	r3, [pc, #68]	; (1ccc <z_arm_fault+0xe4>)
    1c88:	781b      	ldrb	r3, [r3, #0]
    1c8a:	b12b      	cbz	r3, 1c98 <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
    1c8c:	f10d 0107 	add.w	r1, sp, #7
    1c90:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1c92:	f7ff ff79 	bl	1b88 <bus_fault.isra.0>
    1c96:	e7dd      	b.n	1c54 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
    1c98:	4b0d      	ldr	r3, [pc, #52]	; (1cd0 <z_arm_fault+0xe8>)
    1c9a:	8818      	ldrh	r0, [r3, #0]
    1c9c:	b284      	uxth	r4, r0
    1c9e:	2c00      	cmp	r4, #0
    1ca0:	d0d9      	beq.n	1c56 <z_arm_fault+0x6e>
		reason = usage_fault(esf);
    1ca2:	f7ff ff8f 	bl	1bc4 <usage_fault.isra.0>
    1ca6:	e7d5      	b.n	1c54 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
    1ca8:	f10d 0207 	add.w	r2, sp, #7
    1cac:	2100      	movs	r1, #0
    1cae:	e7ce      	b.n	1c4e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    1cb0:	f10d 0107 	add.w	r1, sp, #7
    1cb4:	2000      	movs	r0, #0
    1cb6:	e7ec      	b.n	1c92 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1cb8:	2400      	movs	r4, #0
    1cba:	e7cc      	b.n	1c56 <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1cbc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1cc0:	f023 0301 	bic.w	r3, r3, #1
    1cc4:	e7d8      	b.n	1c78 <z_arm_fault+0x90>
    1cc6:	bf00      	nop
    1cc8:	e000ed00 	.word	0xe000ed00
    1ccc:	e000ed29 	.word	0xe000ed29
    1cd0:	e000ed2a 	.word	0xe000ed2a

00001cd4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1cd4:	4a02      	ldr	r2, [pc, #8]	; (1ce0 <z_arm_fault_init+0xc>)
    1cd6:	6953      	ldr	r3, [r2, #20]
    1cd8:	f043 0310 	orr.w	r3, r3, #16
    1cdc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1cde:	4770      	bx	lr
    1ce0:	e000ed00 	.word	0xe000ed00

00001ce4 <z_arm_interrupt_init>:
    1ce4:	4804      	ldr	r0, [pc, #16]	; (1cf8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1ce6:	2300      	movs	r3, #0
    1ce8:	2120      	movs	r1, #32
    1cea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1cec:	3301      	adds	r3, #1
    1cee:	2b27      	cmp	r3, #39	; 0x27
    1cf0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1cf4:	d1f9      	bne.n	1cea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1cf6:	4770      	bx	lr
    1cf8:	e000e100 	.word	0xe000e100

00001cfc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1cfc:	b508      	push	{r3, lr}
	if (_current == thread) {
    1cfe:	4b0e      	ldr	r3, [pc, #56]	; (1d38 <z_impl_k_thread_abort+0x3c>)
    1d00:	689b      	ldr	r3, [r3, #8]
    1d02:	4283      	cmp	r3, r0
    1d04:	d107      	bne.n	1d16 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1d06:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1d0a:	b193      	cbz	r3, 1d32 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1d0c:	4a0b      	ldr	r2, [pc, #44]	; (1d3c <z_impl_k_thread_abort+0x40>)
    1d0e:	6853      	ldr	r3, [r2, #4]
    1d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1d14:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    1d16:	f001 fc11 	bl	353c <z_thread_single_abort>
	__asm__ volatile(
    1d1a:	f04f 0320 	mov.w	r3, #32
    1d1e:	f3ef 8011 	mrs	r0, BASEPRI
    1d22:	f383 8811 	msr	BASEPRI, r3
    1d26:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    1d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    1d2e:	f002 bcbc 	b.w	46aa <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    1d32:	f001 fe61 	bl	39f8 <z_self_abort>
    1d36:	bf00      	nop
    1d38:	20000358 	.word	0x20000358
    1d3c:	e000ed00 	.word	0xe000ed00

00001d40 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1d42:	4b08      	ldr	r3, [pc, #32]	; (1d64 <z_arm_configure_static_mpu_regions+0x24>)
    1d44:	9301      	str	r3, [sp, #4]
    1d46:	4b08      	ldr	r3, [pc, #32]	; (1d68 <z_arm_configure_static_mpu_regions+0x28>)
    1d48:	9302      	str	r3, [sp, #8]
    1d4a:	4b08      	ldr	r3, [pc, #32]	; (1d6c <z_arm_configure_static_mpu_regions+0x2c>)
    1d4c:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    1d4e:	ab01      	add	r3, sp, #4
    1d50:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1d52:	4a07      	ldr	r2, [pc, #28]	; (1d70 <z_arm_configure_static_mpu_regions+0x30>)
    1d54:	4b07      	ldr	r3, [pc, #28]	; (1d74 <z_arm_configure_static_mpu_regions+0x34>)
    1d56:	2101      	movs	r1, #1
    1d58:	4668      	mov	r0, sp
    1d5a:	f000 f8a7 	bl	1eac <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1d5e:	b005      	add	sp, #20
    1d60:	f85d fb04 	ldr.w	pc, [sp], #4
    1d64:	20000000 	.word	0x20000000
    1d68:	00000000 	.word	0x00000000
    1d6c:	060b0000 	.word	0x060b0000
    1d70:	20000000 	.word	0x20000000
    1d74:	20010000 	.word	0x20010000

00001d78 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    1d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
    1d7a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    1d7c:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
    1d7e:	9301      	str	r3, [sp, #4]
    1d80:	4b06      	ldr	r3, [pc, #24]	; (1d9c <z_arm_configure_dynamic_mpu_regions+0x24>)
    1d82:	2220      	movs	r2, #32
    1d84:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    1d88:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
    1d8a:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
    1d8c:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
    1d8e:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
    1d90:	f000 f896 	bl	1ec0 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    1d94:	b005      	add	sp, #20
    1d96:	f85d fb04 	ldr.w	pc, [sp], #4
    1d9a:	bf00      	nop
    1d9c:	150b0000 	.word	0x150b0000

00001da0 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1da0:	f8df c084 	ldr.w	ip, [pc, #132]	; 1e28 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1da6:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1da8:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    1daa:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    1dac:	428f      	cmp	r7, r1
    1dae:	db00      	blt.n	1db2 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    1db2:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    1db6:	f8de 4004 	ldr.w	r4, [lr, #4]
    1dba:	b394      	cbz	r4, 1e22 <mpu_configure_regions+0x82>
		if (do_sanity_check &&
    1dbc:	b143      	cbz	r3, 1dd0 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1dbe:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1dc0:	422c      	tst	r4, r5
    1dc2:	d119      	bne.n	1df8 <mpu_configure_regions+0x58>
		&&
    1dc4:	2c1f      	cmp	r4, #31
    1dc6:	d917      	bls.n	1df8 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1U)) == 0U);
    1dc8:	f8de 2000 	ldr.w	r2, [lr]
		&&
    1dcc:	4215      	tst	r5, r2
    1dce:	d113      	bne.n	1df8 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1dd0:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    1dd2:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    1dd4:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    1dd8:	f8de 0008 	ldr.w	r0, [lr, #8]
    1ddc:	d90f      	bls.n	1dfe <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1dde:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1de2:	d80e      	bhi.n	1e02 <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1de4:	3c01      	subs	r4, #1
    1de6:	fab4 f484 	clz	r4, r4
    1dea:	f1c4 041f 	rsb	r4, r4, #31
    1dee:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1df0:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1df2:	ea44 0400 	orr.w	r4, r4, r0
    1df6:	d906      	bls.n	1e06 <mpu_configure_regions+0x66>
			return -EINVAL;
    1df8:	f06f 0015 	mvn.w	r0, #21
    1dfc:	e7d8      	b.n	1db0 <mpu_configure_regions+0x10>
		return REGION_32B;
    1dfe:	2408      	movs	r4, #8
    1e00:	e7f6      	b.n	1df0 <mpu_configure_regions+0x50>
		return REGION_4G;
    1e02:	243e      	movs	r4, #62	; 0x3e
    1e04:	e7f4      	b.n	1df0 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e06:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1e0a:	4315      	orrs	r5, r2
    1e0c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e10:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1e14:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    1e18:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e1a:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e1e:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    1e22:	3701      	adds	r7, #1
    1e24:	e7c2      	b.n	1dac <mpu_configure_regions+0xc>
    1e26:	bf00      	nop
    1e28:	e000ed90 	.word	0xe000ed90

00001e2c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1e2c:	4b03      	ldr	r3, [pc, #12]	; (1e3c <arm_core_mpu_enable+0x10>)
    1e2e:	2205      	movs	r2, #5
    1e30:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1e32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e36:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1e3a:	4770      	bx	lr
    1e3c:	e000ed90 	.word	0xe000ed90

00001e40 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1e40:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1e44:	4b01      	ldr	r3, [pc, #4]	; (1e4c <arm_core_mpu_disable+0xc>)
    1e46:	2200      	movs	r2, #0
    1e48:	605a      	str	r2, [r3, #4]
}
    1e4a:	4770      	bx	lr
    1e4c:	e000ed90 	.word	0xe000ed90

00001e50 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1e50:	4913      	ldr	r1, [pc, #76]	; (1ea0 <arm_mpu_init+0x50>)
    1e52:	6808      	ldr	r0, [r1, #0]
    1e54:	2808      	cmp	r0, #8
{
    1e56:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1e58:	d81e      	bhi.n	1e98 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1e5a:	f7ff fff1 	bl	1e40 <arm_core_mpu_disable>
	MPU->RNR = index;
    1e5e:	4c11      	ldr	r4, [pc, #68]	; (1ea4 <arm_mpu_init+0x54>)
    1e60:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e62:	2200      	movs	r2, #0
    1e64:	4290      	cmp	r0, r2
    1e66:	f101 010c 	add.w	r1, r1, #12
    1e6a:	d105      	bne.n	1e78 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1e6c:	4b0e      	ldr	r3, [pc, #56]	; (1ea8 <arm_mpu_init+0x58>)
    1e6e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1e70:	f7ff ffdc 	bl	1e2c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1e74:	2000      	movs	r0, #0
}
    1e76:	bd10      	pop	{r4, pc}
    1e78:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e7a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1e7e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1e82:	4313      	orrs	r3, r2
    1e84:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e88:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1e8e:	f043 0301 	orr.w	r3, r3, #1
    1e92:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e94:	3201      	adds	r2, #1
    1e96:	e7e5      	b.n	1e64 <arm_mpu_init+0x14>
		return -1;
    1e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e9c:	e7eb      	b.n	1e76 <arm_mpu_init+0x26>
    1e9e:	bf00      	nop
    1ea0:	00004ac8 	.word	0x00004ac8
    1ea4:	e000ed90 	.word	0xe000ed90
    1ea8:	200007af 	.word	0x200007af

00001eac <arm_core_mpu_configure_static_mpu_regions>:
{
    1eac:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1eae:	4c03      	ldr	r4, [pc, #12]	; (1ebc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1eb0:	2301      	movs	r3, #1
    1eb2:	7822      	ldrb	r2, [r4, #0]
    1eb4:	f7ff ff74 	bl	1da0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1eb8:	7020      	strb	r0, [r4, #0]
}
    1eba:	bd10      	pop	{r4, pc}
    1ebc:	200007af 	.word	0x200007af

00001ec0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    1ec0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1ec2:	4a08      	ldr	r2, [pc, #32]	; (1ee4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    1ec4:	2300      	movs	r3, #0
    1ec6:	7812      	ldrb	r2, [r2, #0]
    1ec8:	f7ff ff6a 	bl	1da0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1ecc:	f110 0f16 	cmn.w	r0, #22
    1ed0:	d003      	beq.n	1eda <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1ed2:	4b05      	ldr	r3, [pc, #20]	; (1ee8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    1ed4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1ed6:	2807      	cmp	r0, #7
    1ed8:	dd00      	ble.n	1edc <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    1eda:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    1edc:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1ede:	611a      	str	r2, [r3, #16]
    1ee0:	3001      	adds	r0, #1
    1ee2:	e7f8      	b.n	1ed6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    1ee4:	200007af 	.word	0x200007af
    1ee8:	e000ed90 	.word	0xe000ed90

00001eec <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1eec:	4b01      	ldr	r3, [pc, #4]	; (1ef4 <__stdout_hook_install+0x8>)
    1eee:	6018      	str	r0, [r3, #0]
}
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop
    1ef4:	20000094 	.word	0x20000094

00001ef8 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    1ef8:	3902      	subs	r1, #2
    1efa:	2901      	cmp	r1, #1
    1efc:	d802      	bhi.n	1f04 <z_impl_zephyr_fputc+0xc>
    1efe:	4b03      	ldr	r3, [pc, #12]	; (1f0c <z_impl_zephyr_fputc+0x14>)
    1f00:	681b      	ldr	r3, [r3, #0]
    1f02:	4718      	bx	r3
}
    1f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f08:	4770      	bx	lr
    1f0a:	bf00      	nop
    1f0c:	20000094 	.word	0x20000094

00001f10 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    1f10:	b40f      	push	{r0, r1, r2, r3}
    1f12:	b507      	push	{r0, r1, r2, lr}
    1f14:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    1f16:	2102      	movs	r1, #2
{
    1f18:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    1f1c:	4804      	ldr	r0, [pc, #16]	; (1f30 <printf+0x20>)
	va_start(vargs, format);
    1f1e:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    1f20:	f7fe ffbe 	bl	ea0 <cbvprintf>
	va_end(vargs);

	return r;
}
    1f24:	b003      	add	sp, #12
    1f26:	f85d eb04 	ldr.w	lr, [sp], #4
    1f2a:	b004      	add	sp, #16
    1f2c:	4770      	bx	lr
    1f2e:	bf00      	nop
    1f30:	00004477 	.word	0x00004477

00001f34 <nordicsemi_nrf52_init>:
    1f34:	f04f 0320 	mov.w	r3, #32
    1f38:	f3ef 8211 	mrs	r2, BASEPRI
    1f3c:	f383 8811 	msr	BASEPRI, r3
    1f40:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1f44:	4906      	ldr	r1, [pc, #24]	; (1f60 <nordicsemi_nrf52_init+0x2c>)
    1f46:	2301      	movs	r3, #1
    1f48:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1f4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1f50:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1f54:	f382 8811 	msr	BASEPRI, r2
    1f58:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1f5c:	2000      	movs	r0, #0
    1f5e:	4770      	bx	lr
    1f60:	4001e000 	.word	0x4001e000

00001f64 <sys_arch_reboot>:
    *p_gpregret = val;
    1f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f68:	b2c0      	uxtb	r0, r0
    1f6a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1f6e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1f72:	4905      	ldr	r1, [pc, #20]	; (1f88 <sys_arch_reboot+0x24>)
    1f74:	4b05      	ldr	r3, [pc, #20]	; (1f8c <sys_arch_reboot+0x28>)
    1f76:	68ca      	ldr	r2, [r1, #12]
    1f78:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1f7c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1f7e:	60cb      	str	r3, [r1, #12]
    1f80:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1f84:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1f86:	e7fd      	b.n	1f84 <sys_arch_reboot+0x20>
    1f88:	e000ed00 	.word	0xe000ed00
    1f8c:	05fa0004 	.word	0x05fa0004

00001f90 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1f90:	b120      	cbz	r0, 1f9c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1f92:	4b03      	ldr	r3, [pc, #12]	; (1fa0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1f94:	0180      	lsls	r0, r0, #6
    1f96:	f043 0301 	orr.w	r3, r3, #1
    1f9a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1f9c:	4770      	bx	lr
    1f9e:	bf00      	nop
    1fa0:	00004a90 	.word	0x00004a90

00001fa4 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    1fa4:	4a05      	ldr	r2, [pc, #20]	; (1fbc <adc_context_start_sampling.isra.0+0x18>)
    1fa6:	2301      	movs	r3, #1
    1fa8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    1fac:	b108      	cbz	r0, 1fb2 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1fae:	60d3      	str	r3, [r2, #12]
}
    1fb0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1fb2:	6013      	str	r3, [r2, #0]
    1fb4:	4a02      	ldr	r2, [pc, #8]	; (1fc0 <adc_context_start_sampling.isra.0+0x1c>)
    1fb6:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    1fb8:	4770      	bx	lr
    1fba:	bf00      	nop
    1fbc:	40007000 	.word	0x40007000
    1fc0:	40007004 	.word	0x40007004

00001fc4 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    1fc4:	7908      	ldrb	r0, [r1, #4]
{
    1fc6:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    1fc8:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    1fcc:	2c07      	cmp	r4, #7
    1fce:	d81f      	bhi.n	2010 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    1fd0:	780b      	ldrb	r3, [r1, #0]
    1fd2:	2b09      	cmp	r3, #9
    1fd4:	d81c      	bhi.n	2010 <adc_nrfx_channel_setup+0x4c>
    1fd6:	e8df f003 	tbb	[pc, r3]
    1fda:	0606      	.short	0x0606
    1fdc:	1b060606 	.word	0x1b060606
    1fe0:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    1fe4:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    1fe6:	784a      	ldrb	r2, [r1, #1]
    1fe8:	2a03      	cmp	r2, #3
    1fea:	d018      	beq.n	201e <adc_nrfx_channel_setup+0x5a>
    1fec:	2a04      	cmp	r2, #4
    1fee:	d10f      	bne.n	2010 <adc_nrfx_channel_setup+0x4c>
    1ff0:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    1ff2:	884a      	ldrh	r2, [r1, #2]
    1ff4:	f244 060a 	movw	r6, #16394	; 0x400a
    1ff8:	42b2      	cmp	r2, r6
    1ffa:	d044      	beq.n	2086 <adc_nrfx_channel_setup+0xc2>
    1ffc:	d811      	bhi.n	2022 <adc_nrfx_channel_setup+0x5e>
    1ffe:	f244 0603 	movw	r6, #16387	; 0x4003
    2002:	42b2      	cmp	r2, r6
    2004:	d03b      	beq.n	207e <adc_nrfx_channel_setup+0xba>
    2006:	f244 0605 	movw	r6, #16389	; 0x4005
    200a:	42b2      	cmp	r2, r6
    200c:	d039      	beq.n	2082 <adc_nrfx_channel_setup+0xbe>
    200e:	b3d2      	cbz	r2, 2086 <adc_nrfx_channel_setup+0xc2>
    2010:	f06f 0015 	mvn.w	r0, #21
    2014:	e032      	b.n	207c <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    2016:	2306      	movs	r3, #6
		break;
    2018:	e7e5      	b.n	1fe6 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    201a:	2307      	movs	r3, #7
		break;
    201c:	e7e3      	b.n	1fe6 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    201e:	2501      	movs	r5, #1
    2020:	e7e7      	b.n	1ff2 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    2022:	f244 0614 	movw	r6, #16404	; 0x4014
    2026:	42b2      	cmp	r2, r6
    2028:	d02f      	beq.n	208a <adc_nrfx_channel_setup+0xc6>
    202a:	f244 0628 	movw	r6, #16424	; 0x4028
    202e:	42b2      	cmp	r2, r6
    2030:	d02d      	beq.n	208e <adc_nrfx_channel_setup+0xca>
    2032:	f244 060f 	movw	r6, #16399	; 0x400f
    2036:	42b2      	cmp	r2, r6
    2038:	d1ea      	bne.n	2010 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    203a:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    203c:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    2040:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2042:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    2046:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    204a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    204e:	0122      	lsls	r2, r4, #4
    2050:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2054:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    2058:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    205a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    205e:	0123      	lsls	r3, r4, #4
    2060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2064:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2068:	798a      	ldrb	r2, [r1, #6]
    206a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    206e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    2072:	4b08      	ldr	r3, [pc, #32]	; (2094 <adc_nrfx_channel_setup+0xd0>)
    2074:	441c      	add	r4, r3
    2076:	794b      	ldrb	r3, [r1, #5]
    2078:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
}
    207c:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    207e:	2200      	movs	r2, #0
    2080:	e7dc      	b.n	203c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    2082:	2201      	movs	r2, #1
    2084:	e7da      	b.n	203c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    2086:	2202      	movs	r2, #2
    2088:	e7d8      	b.n	203c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    208a:	2204      	movs	r2, #4
    208c:	e7d6      	b.n	203c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    208e:	2205      	movs	r2, #5
    2090:	e7d4      	b.n	203c <adc_nrfx_channel_setup+0x78>
    2092:	bf00      	nop
    2094:	20000000 	.word	0x20000000

00002098 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2098:	4b2d      	ldr	r3, [pc, #180]	; (2150 <saadc_irq_handler+0xb8>)
    209a:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
    209c:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    209e:	2a00      	cmp	r2, #0
    20a0:	d048      	beq.n	2134 <saadc_irq_handler+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    20a2:	2200      	movs	r2, #0
    20a4:	601a      	str	r2, [r3, #0]
    20a6:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    20a8:	4c2a      	ldr	r4, [pc, #168]	; (2154 <saadc_irq_handler+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20aa:	4b2b      	ldr	r3, [pc, #172]	; (2158 <saadc_irq_handler+0xc0>)
    20ac:	2101      	movs	r1, #1
    20ae:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    20b0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    20b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    20b6:	b3c3      	cbz	r3, 212a <saadc_irq_handler+0x92>
		adc_sequence_callback callback = ctx->options.callback;
    20b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    20ba:	b143      	cbz	r3, 20ce <saadc_irq_handler+0x36>
			action = callback(dev,
    20bc:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    20c0:	f104 0164 	add.w	r1, r4, #100	; 0x64
    20c4:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    20c6:	2801      	cmp	r0, #1
    20c8:	d014      	beq.n	20f4 <saadc_irq_handler+0x5c>
    20ca:	2802      	cmp	r0, #2
    20cc:	d028      	beq.n	2120 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    20ce:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    20d2:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
    20d6:	429a      	cmp	r2, r3
    20d8:	d922      	bls.n	2120 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    20da:	3301      	adds	r3, #1
    20dc:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    20e0:	4b1e      	ldr	r3, [pc, #120]	; (215c <saadc_irq_handler+0xc4>)
    20e2:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    20e6:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    20ea:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    20ec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    20f0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    20f4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    20f6:	b92b      	cbnz	r3, 2104 <saadc_irq_handler+0x6c>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    20f8:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    20fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2100:	f7ff bf50 	b.w	1fa4 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2104:	f3bf 8f5b 	dmb	ish
    2108:	e854 3f00 	ldrex	r3, [r4]
    210c:	1e5a      	subs	r2, r3, #1
    210e:	e844 2100 	strex	r1, r2, [r4]
    2112:	2900      	cmp	r1, #0
    2114:	d1f8      	bne.n	2108 <saadc_irq_handler+0x70>
    2116:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    211a:	2b01      	cmp	r3, #1
    211c:	dcec      	bgt.n	20f8 <saadc_irq_handler+0x60>
    211e:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    2120:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    2122:	b113      	cbz	r3, 212a <saadc_irq_handler+0x92>
	z_impl_k_timer_stop(timer);
    2124:	480e      	ldr	r0, [pc, #56]	; (2160 <saadc_irq_handler+0xc8>)
    2126:	f002 fbba 	bl	489e <z_impl_k_timer_stop>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    212a:	480e      	ldr	r0, [pc, #56]	; (2164 <saadc_irq_handler+0xcc>)
    212c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2130:	f001 bb88 	b.w	3844 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2134:	4b0c      	ldr	r3, [pc, #48]	; (2168 <saadc_irq_handler+0xd0>)
    2136:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    2138:	2900      	cmp	r1, #0
    213a:	d0f0      	beq.n	211e <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    213c:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    213e:	4a06      	ldr	r2, [pc, #24]	; (2158 <saadc_irq_handler+0xc0>)
    2140:	681b      	ldr	r3, [r3, #0]
    2142:	2301      	movs	r3, #1
    2144:	6013      	str	r3, [r2, #0]
    2146:	f842 3c08 	str.w	r3, [r2, #-8]
    214a:	f842 3c04 	str.w	r3, [r2, #-4]
}
    214e:	e7e6      	b.n	211e <saadc_irq_handler+0x86>
    2150:	40007104 	.word	0x40007104
    2154:	20000000 	.word	0x20000000
    2158:	40007008 	.word	0x40007008
    215c:	40007000 	.word	0x40007000
    2160:	20000008 	.word	0x20000008
    2164:	20000050 	.word	0x20000050
    2168:	40007110 	.word	0x40007110

0000216c <adc_nrfx_read>:
{
    216c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    216e:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    2170:	485d      	ldr	r0, [pc, #372]	; (22e8 <adc_nrfx_read+0x17c>)
    2172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    217a:	f001 fb83 	bl	3884 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    217e:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
    2180:	b910      	cbnz	r0, 2188 <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
    2182:	f06f 0415 	mvn.w	r4, #21
    2186:	e097      	b.n	22b8 <adc_nrfx_read+0x14c>
	if (!selected_channels ||
    2188:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    218c:	d1f9      	bne.n	2182 <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
    218e:	4c57      	ldr	r4, [pc, #348]	; (22ec <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    2190:	4f57      	ldr	r7, [pc, #348]	; (22f0 <adc_nrfx_read+0x184>)
	active_channels = 0U;
    2192:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    2194:	fa20 f302 	lsr.w	r3, r0, r2
    2198:	f013 0301 	ands.w	r3, r3, #1
    219c:	d032      	beq.n	2204 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
    219e:	18bb      	adds	r3, r7, r2
    21a0:	f893 c088 	ldrb.w	ip, [r3, #136]	; 0x88
    21a4:	f1bc 0f00 	cmp.w	ip, #0
    21a8:	d0eb      	beq.n	2182 <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    21aa:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    21ae:	7c6e      	ldrb	r6, [r5, #17]
    21b0:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    21b4:	3e00      	subs	r6, #0
    21b6:	bf18      	it	ne
    21b8:	2601      	movne	r6, #1
    21ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    21be:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    21c2:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    21c6:	f102 0351 	add.w	r3, r2, #81	; 0x51
    21ca:	011b      	lsls	r3, r3, #4
			++active_channels;
    21cc:	3101      	adds	r1, #1
    21ce:	f844 c003 	str.w	ip, [r4, r3]
    21d2:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    21d4:	3201      	adds	r2, #1
    21d6:	2a08      	cmp	r2, #8
    21d8:	d1dc      	bne.n	2194 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
    21da:	7c2b      	ldrb	r3, [r5, #16]
    21dc:	3b08      	subs	r3, #8
    21de:	2b06      	cmp	r3, #6
    21e0:	d8cf      	bhi.n	2182 <adc_nrfx_read+0x16>
    21e2:	a201      	add	r2, pc, #4	; (adr r2, 21e8 <adc_nrfx_read+0x7c>)
    21e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    21e8:	000022cd 	.word	0x000022cd
    21ec:	00002183 	.word	0x00002183
    21f0:	0000220f 	.word	0x0000220f
    21f4:	00002183 	.word	0x00002183
    21f8:	000022c5 	.word	0x000022c5
    21fc:	00002183 	.word	0x00002183
    2200:	000022c9 	.word	0x000022c9
    2204:	f102 0651 	add.w	r6, r2, #81	; 0x51
    2208:	0136      	lsls	r6, r6, #4
    220a:	51a3      	str	r3, [r4, r6]
}
    220c:	e7e2      	b.n	21d4 <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
    220e:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    2210:	4b36      	ldr	r3, [pc, #216]	; (22ec <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2212:	2901      	cmp	r1, #1
    2214:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    2218:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    221a:	d959      	bls.n	22d0 <adc_nrfx_read+0x164>
    221c:	2a00      	cmp	r2, #0
    221e:	d1b0      	bne.n	2182 <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
    2220:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    2224:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    2226:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    2228:	b112      	cbz	r2, 2230 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    222a:	8912      	ldrh	r2, [r2, #8]
    222c:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    2230:	68ea      	ldr	r2, [r5, #12]
    2232:	429a      	cmp	r2, r3
    2234:	d354      	bcc.n	22e0 <adc_nrfx_read+0x174>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2236:	4b2d      	ldr	r3, [pc, #180]	; (22ec <adc_nrfx_read+0x180>)
    2238:	68aa      	ldr	r2, [r5, #8]
    223a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
    223e:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    2240:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    2244:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2246:	4c2a      	ldr	r4, [pc, #168]	; (22f0 <adc_nrfx_read+0x184>)
    2248:	f104 0664 	add.w	r6, r4, #100	; 0x64
    224c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    224e:	683b      	ldr	r3, [r7, #0]
    2250:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
    2252:	682a      	ldr	r2, [r5, #0]
	ctx->status = 0;
    2254:	2600      	movs	r6, #0
    2256:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    2258:	2a00      	cmp	r2, #0
    225a:	d03c      	beq.n	22d6 <adc_nrfx_read+0x16a>
		ctx->options = *sequence->options;
    225c:	ca07      	ldmia	r2, {r0, r1, r2}
    225e:	f104 0378 	add.w	r3, r4, #120	; 0x78
    2262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ctx->sequence.options = &ctx->options;
    2266:	6663      	str	r3, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    2268:	f8a4 6084 	strh.w	r6, [r4, #132]	; 0x84
		if (ctx->options.interval_us != 0U) {
    226c:	b398      	cbz	r0, 22d6 <adc_nrfx_read+0x16a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    226e:	f3bf 8f5b 	dmb	ish
    2272:	e854 3f00 	ldrex	r3, [r4]
    2276:	e844 6200 	strex	r2, r6, [r4]
    227a:	2a00      	cmp	r2, #0
    227c:	d1f9      	bne.n	2272 <adc_nrfx_read+0x106>
    227e:	f3bf 8f5b 	dmb	ish
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    2282:	481c      	ldr	r0, [pc, #112]	; (22f4 <adc_nrfx_read+0x188>)
    2284:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    2286:	4a1c      	ldr	r2, [pc, #112]	; (22f8 <adc_nrfx_read+0x18c>)
    2288:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    228c:	2100      	movs	r1, #0
    228e:	2300      	movs	r3, #0
    2290:	fbe5 0106 	umlal	r0, r1, r5, r6
    2294:	f7fe f9a6 	bl	5e4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    2298:	2200      	movs	r2, #0
    229a:	e9cd 0100 	strd	r0, r1, [sp]
    229e:	2300      	movs	r3, #0
    22a0:	f104 0008 	add.w	r0, r4, #8
    22a4:	f001 fd40 	bl	3d28 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    22a8:	4814      	ldr	r0, [pc, #80]	; (22fc <adc_nrfx_read+0x190>)
    22aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    22ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    22b2:	f001 fae7 	bl	3884 <z_impl_k_sem_take>
	return ctx->status;
    22b6:	6e24      	ldr	r4, [r4, #96]	; 0x60
	z_impl_k_sem_give(sem);
    22b8:	480b      	ldr	r0, [pc, #44]	; (22e8 <adc_nrfx_read+0x17c>)
    22ba:	f001 fac3 	bl	3844 <z_impl_k_sem_give>
}
    22be:	4620      	mov	r0, r4
    22c0:	b003      	add	sp, #12
    22c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    22c4:	2202      	movs	r2, #2
		break;
    22c6:	e7a3      	b.n	2210 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    22c8:	2203      	movs	r2, #3
		break;
    22ca:	e7a1      	b.n	2210 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    22cc:	2200      	movs	r2, #0
    22ce:	e79f      	b.n	2210 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
    22d0:	2a08      	cmp	r2, #8
    22d2:	d9a5      	bls.n	2220 <adc_nrfx_read+0xb4>
    22d4:	e755      	b.n	2182 <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
    22d6:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    22da:	f7ff fe63 	bl	1fa4 <adc_context_start_sampling.isra.0>
    22de:	e7e3      	b.n	22a8 <adc_nrfx_read+0x13c>
		return -ENOMEM;
    22e0:	f06f 040b 	mvn.w	r4, #11
    22e4:	e7e8      	b.n	22b8 <adc_nrfx_read+0x14c>
    22e6:	bf00      	nop
    22e8:	20000040 	.word	0x20000040
    22ec:	40007000 	.word	0x40007000
    22f0:	20000000 	.word	0x20000000
    22f4:	000f423f 	.word	0x000f423f
    22f8:	000f4240 	.word	0x000f4240
    22fc:	20000050 	.word	0x20000050

00002300 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2300:	4b0d      	ldr	r3, [pc, #52]	; (2338 <init_saadc+0x38>)

DEVICE_DECLARE(adc_0);

static int init_saadc(const struct device *dev)
{
    2302:	b510      	push	{r4, lr}
    2304:	2400      	movs	r4, #0
    2306:	601c      	str	r4, [r3, #0]
    2308:	681b      	ldr	r3, [r3, #0]
    230a:	4b0c      	ldr	r3, [pc, #48]	; (233c <init_saadc+0x3c>)
    230c:	601c      	str	r4, [r3, #0]
    230e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2310:	4b0b      	ldr	r3, [pc, #44]	; (2340 <init_saadc+0x40>)
    2312:	2212      	movs	r2, #18
    2314:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    2318:	2007      	movs	r0, #7
    231a:	f7ff faaf 	bl	187c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    231e:	4622      	mov	r2, r4
    2320:	2101      	movs	r1, #1
    2322:	2007      	movs	r0, #7
    2324:	f7ff fac8 	bl	18b8 <z_arm_irq_priority_set>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
    2328:	4806      	ldr	r0, [pc, #24]	; (2344 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    232a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    232c:	b913      	cbnz	r3, 2334 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    232e:	3040      	adds	r0, #64	; 0x40
    2330:	f001 fa88 	bl	3844 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    2334:	2000      	movs	r0, #0
    2336:	bd10      	pop	{r4, pc}
    2338:	40007104 	.word	0x40007104
    233c:	40007110 	.word	0x40007110
    2340:	40007000 	.word	0x40007000
    2344:	20000000 	.word	0x20000000

00002348 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2348:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    234a:	4b09      	ldr	r3, [pc, #36]	; (2370 <gpio_nrfx_init+0x28>)
    234c:	781a      	ldrb	r2, [r3, #0]
    234e:	b96a      	cbnz	r2, 236c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2350:	2101      	movs	r1, #1
    2352:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2354:	2006      	movs	r0, #6
    2356:	2105      	movs	r1, #5
    2358:	f7ff faae 	bl	18b8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    235c:	2006      	movs	r0, #6
    235e:	f7ff fa8d 	bl	187c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2362:	4b04      	ldr	r3, [pc, #16]	; (2374 <gpio_nrfx_init+0x2c>)
    2364:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2368:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    236c:	2000      	movs	r0, #0
    236e:	bd08      	pop	{r3, pc}
    2370:	200007b0 	.word	0x200007b0
    2374:	40006000 	.word	0x40006000

00002378 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2378:	4b2a      	ldr	r3, [pc, #168]	; (2424 <gpio_nrfx_config+0xac>)
{
    237a:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    237c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    237e:	482a      	ldr	r0, [pc, #168]	; (2428 <gpio_nrfx_config+0xb0>)
    2380:	4013      	ands	r3, r2
    2382:	4283      	cmp	r3, r0
    2384:	d03e      	beq.n	2404 <gpio_nrfx_config+0x8c>
    2386:	d80d      	bhi.n	23a4 <gpio_nrfx_config+0x2c>
    2388:	2b06      	cmp	r3, #6
    238a:	d015      	beq.n	23b8 <gpio_nrfx_config+0x40>
    238c:	d805      	bhi.n	239a <gpio_nrfx_config+0x22>
    238e:	b19b      	cbz	r3, 23b8 <gpio_nrfx_config+0x40>
    2390:	2b02      	cmp	r3, #2
    2392:	d039      	beq.n	2408 <gpio_nrfx_config+0x90>
    2394:	f06f 0015 	mvn.w	r0, #21
    2398:	e033      	b.n	2402 <gpio_nrfx_config+0x8a>
    239a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    239e:	d1f9      	bne.n	2394 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    23a0:	2301      	movs	r3, #1
    23a2:	e009      	b.n	23b8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    23a4:	4821      	ldr	r0, [pc, #132]	; (242c <gpio_nrfx_config+0xb4>)
    23a6:	4283      	cmp	r3, r0
    23a8:	d030      	beq.n	240c <gpio_nrfx_config+0x94>
    23aa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    23ae:	d02f      	beq.n	2410 <gpio_nrfx_config+0x98>
    23b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    23b4:	d1ee      	bne.n	2394 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    23b6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    23b8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    23ba:	bf54      	ite	pl
    23bc:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    23c0:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    23c2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    23c6:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    23ca:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    23ce:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    23d2:	d007      	beq.n	23e4 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    23d4:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    23d8:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    23da:	d01b      	beq.n	2414 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    23dc:	2201      	movs	r2, #1
    23de:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    23e0:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    23e4:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    23e8:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    23ec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    23f0:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    23f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    23f8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    23fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2400:	2000      	movs	r0, #0
}
    2402:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2404:	2307      	movs	r3, #7
    2406:	e7d7      	b.n	23b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    2408:	2304      	movs	r3, #4
    240a:	e7d5      	b.n	23b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    240c:	2305      	movs	r3, #5
    240e:	e7d3      	b.n	23b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    2410:	2303      	movs	r3, #3
    2412:	e7d1      	b.n	23b8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2414:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2416:	bf42      	ittt	mi
    2418:	2201      	movmi	r2, #1
    241a:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    241c:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    2420:	e7e0      	b.n	23e4 <gpio_nrfx_config+0x6c>
    2422:	bf00      	nop
    2424:	00f00006 	.word	0x00f00006
    2428:	00100006 	.word	0x00100006
    242c:	00400002 	.word	0x00400002

00002430 <gpio_nrfx_pin_interrupt_configure>:
{
    2430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2432:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2434:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    2436:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2438:	7a08      	ldrb	r0, [r1, #8]
    243a:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    243e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2442:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    2446:	d10c      	bne.n	2462 <gpio_nrfx_pin_interrupt_configure+0x32>
    *p_pin = pin_number & 0x1F;
    2448:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    244c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    2450:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    2454:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2458:	07cf      	lsls	r7, r1, #31
    245a:	d507      	bpl.n	246c <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
    245c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2460:	e0bd      	b.n	25de <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2462:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2466:	68f1      	ldr	r1, [r6, #12]
    2468:	f000 80aa 	beq.w	25c0 <gpio_nrfx_pin_interrupt_configure+0x190>
    246c:	68f0      	ldr	r0, [r6, #12]
    246e:	2101      	movs	r1, #1
    2470:	40a1      	lsls	r1, r4
    2472:	4301      	orrs	r1, r0
    2474:	6970      	ldr	r0, [r6, #20]
    2476:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2478:	2101      	movs	r1, #1
    247a:	40a1      	lsls	r1, r4
    247c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2480:	69b2      	ldr	r2, [r6, #24]
    2482:	bf0c      	ite	eq
    2484:	4308      	orreq	r0, r1
    2486:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2488:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    248c:	bf0c      	ite	eq
    248e:	430a      	orreq	r2, r1
    2490:	438a      	bicne	r2, r1
    2492:	61b2      	str	r2, [r6, #24]
    2494:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2496:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2498:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    249c:	bf0c      	ite	eq
    249e:	4311      	orreq	r1, r2
    24a0:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    24a4:	4a54      	ldr	r2, [pc, #336]	; (25f8 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
    24a6:	6131      	str	r1, [r6, #16]
    24a8:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    24ac:	2300      	movs	r3, #0
    24ae:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    24b0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    24b4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    24b8:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    24bc:	4285      	cmp	r5, r0
    24be:	f040 8084 	bne.w	25ca <gpio_nrfx_pin_interrupt_configure+0x19a>
		    && (intenset & BIT(i))) {
    24c2:	fa21 f003 	lsr.w	r0, r1, r3
    24c6:	07c0      	lsls	r0, r0, #31
    24c8:	d57f      	bpl.n	25ca <gpio_nrfx_pin_interrupt_configure+0x19a>
			(void)atomic_and(mask, ~BIT(i));
    24ca:	2101      	movs	r1, #1
    24cc:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    24ce:	484b      	ldr	r0, [pc, #300]	; (25fc <gpio_nrfx_pin_interrupt_configure+0x1cc>)
    24d0:	f3bf 8f5b 	dmb	ish
    24d4:	43cf      	mvns	r7, r1
    24d6:	e850 cf00 	ldrex	ip, [r0]
    24da:	ea0c 0c07 	and.w	ip, ip, r7
    24de:	e840 ce00 	strex	lr, ip, [r0]
    24e2:	f1be 0f00 	cmp.w	lr, #0
    24e6:	d1f6      	bne.n	24d6 <gpio_nrfx_pin_interrupt_configure+0xa6>
    24e8:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    24ec:	009b      	lsls	r3, r3, #2
    24ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    24f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    24f6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    24fa:	f020 0001 	bic.w	r0, r0, #1
    24fe:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    2502:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2506:	2100      	movs	r1, #0
    2508:	4628      	mov	r0, r5
    250a:	f001 ffcf 	bl	44ac <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    250e:	68f3      	ldr	r3, [r6, #12]
    2510:	40e3      	lsrs	r3, r4
    2512:	f013 0301 	ands.w	r3, r3, #1
    2516:	d051      	beq.n	25bc <gpio_nrfx_pin_interrupt_configure+0x18c>
		if (data->trig_edge & BIT(pin)) {
    2518:	6973      	ldr	r3, [r6, #20]
    251a:	40e3      	lsrs	r3, r4
    251c:	f013 0201 	ands.w	r2, r3, #1
    2520:	d05e      	beq.n	25e0 <gpio_nrfx_pin_interrupt_configure+0x1b0>
			if (data->double_edge & BIT(pin)) {
    2522:	69b3      	ldr	r3, [r6, #24]
    2524:	40e3      	lsrs	r3, r4
    2526:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2528:	bf5f      	itttt	pl
    252a:	6931      	ldrpl	r1, [r6, #16]
    252c:	fa21 f404 	lsrpl.w	r4, r1, r4
    2530:	f004 0401 	andpl.w	r4, r4, #1
    2534:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2538:	4930      	ldr	r1, [pc, #192]	; (25fc <gpio_nrfx_pin_interrupt_configure+0x1cc>)
    253a:	bf54      	ite	pl
    253c:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    253e:	2403      	movmi	r4, #3
    2540:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    2542:	2701      	movs	r7, #1
    2544:	fa07 f602 	lsl.w	r6, r7, r2
    2548:	f3bf 8f5b 	dmb	ish
    254c:	e851 0f00 	ldrex	r0, [r1]
    2550:	ea40 0306 	orr.w	r3, r0, r6
    2554:	e841 3c00 	strex	ip, r3, [r1]
    2558:	f1bc 0f00 	cmp.w	ip, #0
    255c:	d1f6      	bne.n	254c <gpio_nrfx_pin_interrupt_configure+0x11c>
    255e:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
    2562:	40d0      	lsrs	r0, r2
    2564:	f010 0301 	ands.w	r3, r0, #1
    2568:	d134      	bne.n	25d4 <gpio_nrfx_pin_interrupt_configure+0x1a4>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    256a:	0091      	lsls	r1, r2, #2
    256c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2570:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
    2574:	3240      	adds	r2, #64	; 0x40
    2576:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    257a:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    257e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    2582:	0092      	lsls	r2, r2, #2
    2584:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2588:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
    258a:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    258c:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    2590:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    2594:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2598:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    259c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    25a0:	4305      	orrs	r5, r0
    25a2:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    25a6:	6013      	str	r3, [r2, #0]
    25a8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    25aa:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    25ae:	f042 0201 	orr.w	r2, r2, #1
    25b2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
    25b6:	4a10      	ldr	r2, [pc, #64]	; (25f8 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
    25b8:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
    25bc:	4618      	mov	r0, r3
    25be:	e00e      	b.n	25de <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    25c0:	2001      	movs	r0, #1
    25c2:	40a0      	lsls	r0, r4
    25c4:	ea21 0100 	bic.w	r1, r1, r0
    25c8:	e754      	b.n	2474 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    25ca:	3301      	adds	r3, #1
    25cc:	2b08      	cmp	r3, #8
    25ce:	f47f af6f 	bne.w	24b0 <gpio_nrfx_pin_interrupt_configure+0x80>
    25d2:	e798      	b.n	2506 <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    25d4:	3201      	adds	r2, #1
    25d6:	2a08      	cmp	r2, #8
    25d8:	d1b4      	bne.n	2544 <gpio_nrfx_pin_interrupt_configure+0x114>
	return -ENODEV;
    25da:	f06f 0012 	mvn.w	r0, #18
}
    25de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
    25e0:	6931      	ldr	r1, [r6, #16]
    25e2:	40e1      	lsrs	r1, r4
    25e4:	f001 0101 	and.w	r1, r1, #1
    25e8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    25ec:	4628      	mov	r0, r5
    25ee:	b2c9      	uxtb	r1, r1
    25f0:	f001 ff5c 	bl	44ac <nrf_gpio_cfg_sense_set>
	int res = 0;
    25f4:	4610      	mov	r0, r2
    25f6:	e7f2      	b.n	25de <gpio_nrfx_pin_interrupt_configure+0x1ae>
    25f8:	40006000 	.word	0x40006000
    25fc:	20000348 	.word	0x20000348

00002600 <gpiote_event_handler>:
{
    2600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2604:	4d3f      	ldr	r5, [pc, #252]	; (2704 <gpiote_event_handler+0x104>)
    2606:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    2608:	2e00      	cmp	r6, #0
    260a:	d04e      	beq.n	26aa <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
    260c:	4b3e      	ldr	r3, [pc, #248]	; (2708 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    260e:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
    2612:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2614:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    2616:	4301      	orrs	r1, r0
    2618:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
    261c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
    2620:	2701      	movs	r7, #1
    2622:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2626:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    2628:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
    262c:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
    2630:	bb72      	cbnz	r2, 2690 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2632:	602a      	str	r2, [r5, #0]
    2634:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
    2636:	4835      	ldr	r0, [pc, #212]	; (270c <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2638:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    263a:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    263c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    263e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    2642:	fa05 f103 	lsl.w	r1, r5, r3
    2646:	4211      	tst	r1, r2
    2648:	d011      	beq.n	266e <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    264a:	009a      	lsls	r2, r3, #2
    264c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2650:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    2654:	6811      	ldr	r1, [r2, #0]
    2656:	b151      	cbz	r1, 266e <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2658:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    265c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2660:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2662:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2666:	fa05 f101 	lsl.w	r1, r5, r1
    266a:	6812      	ldr	r2, [r2, #0]
    266c:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    266e:	3301      	adds	r3, #1
    2670:	2b08      	cmp	r3, #8
    2672:	d1e4      	bne.n	263e <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
    2674:	b9dc      	cbnz	r4, 26ae <gpiote_event_handler+0xae>
	if (port_event) {
    2676:	b14e      	cbz	r6, 268c <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
    2678:	4c23      	ldr	r4, [pc, #140]	; (2708 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    267a:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
    267e:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2680:	4301      	orrs	r1, r0
    2682:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
    2686:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    2688:	2600      	movs	r6, #0
	while (level_pins) {
    268a:	bb42      	cbnz	r2, 26de <gpiote_event_handler+0xde>
}
    268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    2690:	423a      	tst	r2, r7
    2692:	d006      	beq.n	26a2 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2694:	2100      	movs	r1, #0
    2696:	f008 001f 	and.w	r0, r8, #31
    269a:	f001 ff07 	bl	44ac <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    269e:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    26a2:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    26a6:	007f      	lsls	r7, r7, #1
    26a8:	e7c2      	b.n	2630 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    26aa:	4634      	mov	r4, r6
    26ac:	e7c3      	b.n	2636 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    26ae:	4b16      	ldr	r3, [pc, #88]	; (2708 <gpiote_event_handler+0x108>)
    26b0:	6859      	ldr	r1, [r3, #4]
    26b2:	2900      	cmp	r1, #0
    26b4:	d0df      	beq.n	2676 <gpiote_event_handler+0x76>
	return node->next;
    26b6:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    26b8:	4f15      	ldr	r7, [pc, #84]	; (2710 <gpiote_event_handler+0x110>)
    26ba:	2d00      	cmp	r5, #0
    26bc:	bf38      	it	cc
    26be:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    26c0:	688a      	ldr	r2, [r1, #8]
    26c2:	4022      	ands	r2, r4
    26c4:	d002      	beq.n	26cc <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
    26c6:	684b      	ldr	r3, [r1, #4]
    26c8:	4638      	mov	r0, r7
    26ca:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    26cc:	2d00      	cmp	r5, #0
    26ce:	d0d2      	beq.n	2676 <gpiote_event_handler+0x76>
    26d0:	682b      	ldr	r3, [r5, #0]
    26d2:	2b00      	cmp	r3, #0
    26d4:	bf38      	it	cc
    26d6:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    26d8:	4629      	mov	r1, r5
    26da:	461d      	mov	r5, r3
    26dc:	e7f0      	b.n	26c0 <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
    26de:	4215      	tst	r5, r2
    26e0:	d00c      	beq.n	26fc <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    26e2:	6921      	ldr	r1, [r4, #16]
    26e4:	40f1      	lsrs	r1, r6
    26e6:	f001 0101 	and.w	r1, r1, #1
    26ea:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    26ee:	b2c9      	uxtb	r1, r1
    26f0:	f006 001f 	and.w	r0, r6, #31
    26f4:	f001 feda 	bl	44ac <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    26f8:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    26fc:	3601      	adds	r6, #1
		bit <<= 1;
    26fe:	006d      	lsls	r5, r5, #1
    2700:	e7c3      	b.n	268a <gpiote_event_handler+0x8a>
    2702:	bf00      	nop
    2704:	4000617c 	.word	0x4000617c
    2708:	2000032c 	.word	0x2000032c
    270c:	40006000 	.word	0x40006000
    2710:	200000e4 	.word	0x200000e4

00002714 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2714:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    2716:	794b      	ldrb	r3, [r1, #5]
    2718:	2b01      	cmp	r3, #1
    271a:	d123      	bne.n	2764 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    271c:	798b      	ldrb	r3, [r1, #6]
    271e:	2b03      	cmp	r3, #3
    2720:	d120      	bne.n	2764 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2722:	79ca      	ldrb	r2, [r1, #7]
    2724:	b122      	cbz	r2, 2730 <uarte_nrfx_configure+0x1c>
    2726:	2a01      	cmp	r2, #1
    2728:	d11c      	bne.n	2764 <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    272a:	6843      	ldr	r3, [r0, #4]
    272c:	791b      	ldrb	r3, [r3, #4]
    272e:	b1cb      	cbz	r3, 2764 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2730:	790c      	ldrb	r4, [r1, #4]
    2732:	b114      	cbz	r4, 273a <uarte_nrfx_configure+0x26>
    2734:	2c02      	cmp	r4, #2
    2736:	d115      	bne.n	2764 <uarte_nrfx_configure+0x50>
    2738:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    273a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    273c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    273e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2742:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2744:	d062      	beq.n	280c <uarte_nrfx_configure+0xf8>
    2746:	d82b      	bhi.n	27a0 <uarte_nrfx_configure+0x8c>
    2748:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    274c:	d061      	beq.n	2812 <uarte_nrfx_configure+0xfe>
    274e:	d814      	bhi.n	277a <uarte_nrfx_configure+0x66>
    2750:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2754:	d05f      	beq.n	2816 <uarte_nrfx_configure+0x102>
    2756:	d808      	bhi.n	276a <uarte_nrfx_configure+0x56>
    2758:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    275c:	d05e      	beq.n	281c <uarte_nrfx_configure+0x108>
    275e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2762:	d05e      	beq.n	2822 <uarte_nrfx_configure+0x10e>
    2764:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2768:	e04f      	b.n	280a <uarte_nrfx_configure+0xf6>
    276a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    276e:	d05b      	beq.n	2828 <uarte_nrfx_configure+0x114>
    2770:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2774:	d1f6      	bne.n	2764 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2776:	4b37      	ldr	r3, [pc, #220]	; (2854 <uarte_nrfx_configure+0x140>)
    2778:	e03c      	b.n	27f4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    277a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    277e:	d056      	beq.n	282e <uarte_nrfx_configure+0x11a>
    2780:	d807      	bhi.n	2792 <uarte_nrfx_configure+0x7e>
    2782:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2786:	d054      	beq.n	2832 <uarte_nrfx_configure+0x11e>
    2788:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    278c:	d1ea      	bne.n	2764 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    278e:	4b32      	ldr	r3, [pc, #200]	; (2858 <uarte_nrfx_configure+0x144>)
    2790:	e030      	b.n	27f4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2792:	f647 2612 	movw	r6, #31250	; 0x7a12
    2796:	42b3      	cmp	r3, r6
    2798:	d1e4      	bne.n	2764 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    279a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    279e:	e029      	b.n	27f4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    27a0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    27a4:	d047      	beq.n	2836 <uarte_nrfx_configure+0x122>
    27a6:	d813      	bhi.n	27d0 <uarte_nrfx_configure+0xbc>
    27a8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    27ac:	d046      	beq.n	283c <uarte_nrfx_configure+0x128>
    27ae:	d809      	bhi.n	27c4 <uarte_nrfx_configure+0xb0>
    27b0:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    27b4:	42b3      	cmp	r3, r6
    27b6:	d043      	beq.n	2840 <uarte_nrfx_configure+0x12c>
    27b8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    27bc:	d1d2      	bne.n	2764 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    27be:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    27c2:	e017      	b.n	27f4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    27c4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    27c8:	d1cc      	bne.n	2764 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    27ca:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    27ce:	e011      	b.n	27f4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    27d0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    27d4:	d037      	beq.n	2846 <uarte_nrfx_configure+0x132>
    27d6:	d808      	bhi.n	27ea <uarte_nrfx_configure+0xd6>
    27d8:	4e20      	ldr	r6, [pc, #128]	; (285c <uarte_nrfx_configure+0x148>)
    27da:	42b3      	cmp	r3, r6
    27dc:	d036      	beq.n	284c <uarte_nrfx_configure+0x138>
    27de:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    27e2:	d1bf      	bne.n	2764 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    27e4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    27e8:	e004      	b.n	27f4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    27ea:	4e1d      	ldr	r6, [pc, #116]	; (2860 <uarte_nrfx_configure+0x14c>)
    27ec:	42b3      	cmp	r3, r6
    27ee:	d1b9      	bne.n	2764 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    27f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    27f4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    27f8:	68c3      	ldr	r3, [r0, #12]
    27fa:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    27fc:	4322      	orrs	r2, r4
    27fe:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2800:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2804:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2808:	2000      	movs	r0, #0
}
    280a:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    280c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2810:	e7f0      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2812:	4b14      	ldr	r3, [pc, #80]	; (2864 <uarte_nrfx_configure+0x150>)
    2814:	e7ee      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2816:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    281a:	e7eb      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    281c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2820:	e7e8      	b.n	27f4 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2822:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2826:	e7e5      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2828:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    282c:	e7e2      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    282e:	4b0e      	ldr	r3, [pc, #56]	; (2868 <uarte_nrfx_configure+0x154>)
    2830:	e7e0      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2832:	4b0e      	ldr	r3, [pc, #56]	; (286c <uarte_nrfx_configure+0x158>)
    2834:	e7de      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2836:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    283a:	e7db      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    283c:	4b0c      	ldr	r3, [pc, #48]	; (2870 <uarte_nrfx_configure+0x15c>)
    283e:	e7d9      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2840:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2844:	e7d6      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2846:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    284a:	e7d3      	b.n	27f4 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    284c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2850:	e7d0      	b.n	27f4 <uarte_nrfx_configure+0xe0>
    2852:	bf00      	nop
    2854:	0013b000 	.word	0x0013b000
    2858:	004ea000 	.word	0x004ea000
    285c:	0003d090 	.word	0x0003d090
    2860:	000f4240 	.word	0x000f4240
    2864:	00275000 	.word	0x00275000
    2868:	0075c000 	.word	0x0075c000
    286c:	003af000 	.word	0x003af000
    2870:	013a9000 	.word	0x013a9000

00002874 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2878:	68c7      	ldr	r7, [r0, #12]
{
    287a:	4606      	mov	r6, r0
    287c:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    287e:	f001 ffc0 	bl	4802 <k_is_in_isr>
    2882:	b9b8      	cbnz	r0, 28b4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    2884:	4b28      	ldr	r3, [pc, #160]	; (2928 <uarte_nrfx_poll_out+0xb4>)
    2886:	781b      	ldrb	r3, [r3, #0]
    2888:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    288c:	6872      	ldr	r2, [r6, #4]
    288e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    2890:	b193      	cbz	r3, 28b8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    2892:	f04f 0320 	mov.w	r3, #32
    2896:	f3ef 8411 	mrs	r4, BASEPRI
    289a:	f383 8811 	msr	BASEPRI, r3
    289e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    28a2:	4630      	mov	r0, r6
    28a4:	f001 fe91 	bl	45ca <is_tx_ready>
    28a8:	bb38      	cbnz	r0, 28fa <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    28aa:	f384 8811 	msr	BASEPRI, r4
    28ae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    28b2:	e7ee      	b.n	2892 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28b4:	2301      	movs	r3, #1
    28b6:	e7e9      	b.n	288c <uarte_nrfx_poll_out+0x18>
    28b8:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    28ba:	4630      	mov	r0, r6
    28bc:	f001 fe85 	bl	45ca <is_tx_ready>
    28c0:	b970      	cbnz	r0, 28e0 <uarte_nrfx_poll_out+0x6c>
    28c2:	2001      	movs	r0, #1
    28c4:	f001 fea8 	bl	4618 <nrfx_busy_wait>
    28c8:	3c01      	subs	r4, #1
    28ca:	d1f6      	bne.n	28ba <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    28cc:	2100      	movs	r1, #0
    28ce:	2021      	movs	r0, #33	; 0x21
    28d0:	f000 ff92 	bl	37f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    28d4:	e7f0      	b.n	28b8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    28d6:	f384 8811 	msr	BASEPRI, r4
    28da:	f3bf 8f6f 	isb	sy
}
    28de:	e7f5      	b.n	28cc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    28e0:	f04f 0320 	mov.w	r3, #32
    28e4:	f3ef 8411 	mrs	r4, BASEPRI
    28e8:	f383 8811 	msr	BASEPRI, r3
    28ec:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
    28f0:	4630      	mov	r0, r6
    28f2:	f001 fe6a 	bl	45ca <is_tx_ready>
    28f6:	2800      	cmp	r0, #0
    28f8:	d0ed      	beq.n	28d6 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    28fa:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    28fe:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2900:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2902:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2906:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    290a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    290e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    2912:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    2916:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    291a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    291c:	f384 8811 	msr	BASEPRI, r4
    2920:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    2924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2928:	200007b1 	.word	0x200007b1

0000292c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    292e:	2200      	movs	r2, #0
    2930:	4605      	mov	r5, r0
    2932:	2101      	movs	r1, #1
    2934:	2002      	movs	r0, #2
    2936:	f7fe ffbf 	bl	18b8 <z_arm_irq_priority_set>
    293a:	2002      	movs	r0, #2
    293c:	f7fe ff9e 	bl	187c <arch_irq_enable>
	return config->uarte_regs;
    2940:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2942:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    2944:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    2946:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    294a:	2200      	movs	r2, #0
    294c:	2140      	movs	r1, #64	; 0x40
    294e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
    2952:	2006      	movs	r0, #6
	data->dev = dev;
    2954:	6035      	str	r5, [r6, #0]
    2956:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    295a:	2103      	movs	r1, #3
    295c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    2960:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    2964:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2968:	2008      	movs	r0, #8
    296a:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    296e:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
    2972:	2220      	movs	r2, #32
    2974:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2978:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    297c:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
    297e:	2305      	movs	r3, #5
    2980:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    2984:	2307      	movs	r3, #7
    2986:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    298a:	3104      	adds	r1, #4
    298c:	4628      	mov	r0, r5
    298e:	f7ff fec1 	bl	2714 <uarte_nrfx_configure>
	if (err) {
    2992:	4607      	mov	r7, r0
    2994:	2800      	cmp	r0, #0
    2996:	d13c      	bne.n	2a12 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
    2998:	686b      	ldr	r3, [r5, #4]
    299a:	799b      	ldrb	r3, [r3, #6]
    299c:	b1cb      	cbz	r3, 29d2 <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    299e:	f106 000e 	add.w	r0, r6, #14
    29a2:	f000 fa63 	bl	2e6c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    29a6:	4b1d      	ldr	r3, [pc, #116]	; (2a1c <uarte_0_init+0xf0>)
    29a8:	4298      	cmp	r0, r3
    29aa:	d134      	bne.n	2a16 <uarte_0_init+0xea>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    29ac:	7bb0      	ldrb	r0, [r6, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    29ae:	00c3      	lsls	r3, r0, #3
    29b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    29b4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    29b8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    29bc:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    29c0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    29c4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    29c8:	4a15      	ldr	r2, [pc, #84]	; (2a20 <uarte_0_init+0xf4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    29ca:	2301      	movs	r3, #1
    29cc:	4083      	lsls	r3, r0
    29ce:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    29d2:	2308      	movs	r3, #8
    29d4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29d8:	2300      	movs	r3, #0
    29da:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    29de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    29e2:	f106 030d 	add.w	r3, r6, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    29e6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    29ea:	2301      	movs	r3, #1
    29ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    29f0:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    29f2:	686b      	ldr	r3, [r5, #4]
    29f4:	799b      	ldrb	r3, [r3, #6]
    29f6:	b91b      	cbnz	r3, 2a00 <uarte_0_init+0xd4>
    p_reg->INTENSET = mask;
    29f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    29fc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    2a00:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2a02:	360c      	adds	r6, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2a04:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2a08:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a0c:	2301      	movs	r3, #1
    2a0e:	60a3      	str	r3, [r4, #8]
    2a10:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2a12:	4638      	mov	r0, r7
    2a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
    2a16:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    2a1a:	e7fa      	b.n	2a12 <uarte_0_init+0xe6>
    2a1c:	0bad0000 	.word	0x0bad0000
    2a20:	4001f000 	.word	0x4001f000

00002a24 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2a24:	4b04      	ldr	r3, [pc, #16]	; (2a38 <nrf52_errata_108+0x14>)
    2a26:	6818      	ldr	r0, [r3, #0]
    2a28:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2a2a:	bf04      	itt	eq
    2a2c:	4b03      	ldreq	r3, [pc, #12]	; (2a3c <nrf52_errata_108+0x18>)
    2a2e:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    2a30:	1f83      	subs	r3, r0, #6
    2a32:	4258      	negs	r0, r3
    2a34:	4158      	adcs	r0, r3
    2a36:	4770      	bx	lr
    2a38:	10000130 	.word	0x10000130
    2a3c:	f0000fe0 	.word	0xf0000fe0

00002a40 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2a40:	4b07      	ldr	r3, [pc, #28]	; (2a60 <nrf52_errata_16+0x20>)
    2a42:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2a44:	2b06      	cmp	r3, #6
    2a46:	d109      	bne.n	2a5c <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2a48:	4b06      	ldr	r3, [pc, #24]	; (2a64 <nrf52_errata_16+0x24>)
    2a4a:	681b      	ldr	r3, [r3, #0]
    2a4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2a50:	3b03      	subs	r3, #3
    2a52:	2b03      	cmp	r3, #3
    2a54:	d802      	bhi.n	2a5c <nrf52_errata_16+0x1c>
    2a56:	4a04      	ldr	r2, [pc, #16]	; (2a68 <nrf52_errata_16+0x28>)
    2a58:	5cd0      	ldrb	r0, [r2, r3]
    2a5a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2a5c:	2000      	movs	r0, #0
    #endif
}
    2a5e:	4770      	bx	lr
    2a60:	f0000fe0 	.word	0xf0000fe0
    2a64:	f0000fe8 	.word	0xf0000fe8
    2a68:	00004cd9 	.word	0x00004cd9

00002a6c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2a6c:	4a02      	ldr	r2, [pc, #8]	; (2a78 <nvmc_wait+0xc>)
    2a6e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2a72:	2b00      	cmp	r3, #0
    2a74:	d0fb      	beq.n	2a6e <nvmc_wait+0x2>
}
    2a76:	4770      	bx	lr
    2a78:	4001e000 	.word	0x4001e000

00002a7c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2a7c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    2a7e:	f7ff ffd1 	bl	2a24 <nrf52_errata_108>
    2a82:	b128      	cbz	r0, 2a90 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2a84:	4b77      	ldr	r3, [pc, #476]	; (2c64 <SystemInit+0x1e8>)
    2a86:	4a78      	ldr	r2, [pc, #480]	; (2c68 <SystemInit+0x1ec>)
    2a88:	681b      	ldr	r3, [r3, #0]
    2a8a:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2a8e:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2a90:	f7ff ffd6 	bl	2a40 <nrf52_errata_16>
    2a94:	b110      	cbz	r0, 2a9c <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2a96:	4b75      	ldr	r3, [pc, #468]	; (2c6c <SystemInit+0x1f0>)
    2a98:	4a75      	ldr	r2, [pc, #468]	; (2c70 <SystemInit+0x1f4>)
    2a9a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2a9c:	f7ff ffc2 	bl	2a24 <nrf52_errata_108>
    2aa0:	b128      	cbz	r0, 2aae <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2aa2:	4b74      	ldr	r3, [pc, #464]	; (2c74 <SystemInit+0x1f8>)
    2aa4:	4a74      	ldr	r2, [pc, #464]	; (2c78 <SystemInit+0x1fc>)
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2aac:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    2aae:	f7ff ffc7 	bl	2a40 <nrf52_errata_16>
    2ab2:	b120      	cbz	r0, 2abe <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2ab4:	4a71      	ldr	r2, [pc, #452]	; (2c7c <SystemInit+0x200>)
    2ab6:	68d3      	ldr	r3, [r2, #12]
    2ab8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2abc:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2abe:	f7ff ffb1 	bl	2a24 <nrf52_errata_108>
    2ac2:	b140      	cbz	r0, 2ad6 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ac8:	2200      	movs	r2, #0
    2aca:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2ace:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2ad2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2ad6:	f7ff ffb3 	bl	2a40 <nrf52_errata_16>
    2ada:	b110      	cbz	r0, 2ae2 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    2adc:	4b68      	ldr	r3, [pc, #416]	; (2c80 <SystemInit+0x204>)
    2ade:	2203      	movs	r2, #3
    2ae0:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2ae2:	f7ff ffad 	bl	2a40 <nrf52_errata_16>
    2ae6:	b140      	cbz	r0, 2afa <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    2ae8:	4b66      	ldr	r3, [pc, #408]	; (2c84 <SystemInit+0x208>)
    2aea:	2205      	movs	r2, #5
    2aec:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2aee:	2201      	movs	r2, #1
    2af0:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    2af2:	2200      	movs	r2, #0
    2af4:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2af6:	223f      	movs	r2, #63	; 0x3f
    2af8:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2afa:	4b63      	ldr	r3, [pc, #396]	; (2c88 <SystemInit+0x20c>)
    2afc:	681a      	ldr	r2, [r3, #0]
    2afe:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2b00:	bf0b      	itete	eq
    2b02:	4b62      	ldreq	r3, [pc, #392]	; (2c8c <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    2b04:	4b62      	ldrne	r3, [pc, #392]	; (2c90 <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2b06:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    2b08:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2b0a:	bf02      	ittt	eq
    2b0c:	3308      	addeq	r3, #8
    2b0e:	681b      	ldreq	r3, [r3, #0]
    2b10:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2b14:	2a06      	cmp	r2, #6
    2b16:	d14d      	bne.n	2bb4 <SystemInit+0x138>
            {
                switch(var2)
    2b18:	3b03      	subs	r3, #3
    2b1a:	2b03      	cmp	r3, #3
    2b1c:	d803      	bhi.n	2b26 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2b1e:	4a5d      	ldr	r2, [pc, #372]	; (2c94 <SystemInit+0x218>)
    2b20:	5cd3      	ldrb	r3, [r2, r3]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d046      	beq.n	2bb4 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2b2a:	4b5b      	ldr	r3, [pc, #364]	; (2c98 <SystemInit+0x21c>)
    2b2c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2b30:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2b34:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2b38:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2b3c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2b40:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2b44:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2b48:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2b4c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2b50:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2b54:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2b58:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2b5c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2b60:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2b64:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2b68:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2b6c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2b70:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2b74:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2b78:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2b7c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2b80:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2b84:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2b88:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2b8c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2b90:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2b94:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2b98:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2b9c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2ba0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2ba4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2ba8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2bac:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2bb0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    2bb4:	f7ff ff36 	bl	2a24 <nrf52_errata_108>
    2bb8:	b128      	cbz	r0, 2bc6 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2bba:	4b38      	ldr	r3, [pc, #224]	; (2c9c <SystemInit+0x220>)
    2bbc:	4a38      	ldr	r2, [pc, #224]	; (2ca0 <SystemInit+0x224>)
    2bbe:	681b      	ldr	r3, [r3, #0]
    2bc0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2bc4:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2bc6:	f7ff ff2d 	bl	2a24 <nrf52_errata_108>
    2bca:	b148      	cbz	r0, 2be0 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bd0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2bd4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2bd6:	bf44      	itt	mi
    2bd8:	f06f 0201 	mvnmi.w	r2, #1
    2bdc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2be0:	4b29      	ldr	r3, [pc, #164]	; (2c88 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2be2:	681b      	ldr	r3, [r3, #0]
    2be4:	2b06      	cmp	r3, #6
    2be6:	d10c      	bne.n	2c02 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2be8:	4b29      	ldr	r3, [pc, #164]	; (2c90 <SystemInit+0x214>)
    2bea:	681b      	ldr	r3, [r3, #0]
    2bec:	3b03      	subs	r3, #3
    2bee:	2b03      	cmp	r3, #3
    2bf0:	d802      	bhi.n	2bf8 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    2bf2:	4a2c      	ldr	r2, [pc, #176]	; (2ca4 <SystemInit+0x228>)
    2bf4:	5cd3      	ldrb	r3, [r2, r3]
    2bf6:	b123      	cbz	r3, 2c02 <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    2bf8:	4a2b      	ldr	r2, [pc, #172]	; (2ca8 <SystemInit+0x22c>)
    2bfa:	6813      	ldr	r3, [r2, #0]
    2bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2c00:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2c02:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2c06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2c0a:	2a00      	cmp	r2, #0
    2c0c:	db03      	blt.n	2c16 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2c0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2c12:	2b00      	cmp	r3, #0
    2c14:	da22      	bge.n	2c5c <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c16:	4925      	ldr	r1, [pc, #148]	; (2cac <SystemInit+0x230>)
    2c18:	2301      	movs	r3, #1
    2c1a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2c1e:	f7ff ff25 	bl	2a6c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2c22:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    2c26:	2415      	movs	r4, #21
    2c28:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2c2c:	f7ff ff1e 	bl	2a6c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2c30:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2c34:	f7ff ff1a 	bl	2a6c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c38:	2300      	movs	r3, #0
    2c3a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2c3e:	f7ff ff15 	bl	2a6c <nvmc_wait>
    2c42:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2c46:	491a      	ldr	r1, [pc, #104]	; (2cb0 <SystemInit+0x234>)
    2c48:	4b1a      	ldr	r3, [pc, #104]	; (2cb4 <SystemInit+0x238>)
    2c4a:	68ca      	ldr	r2, [r1, #12]
    2c4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2c50:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2c52:	60cb      	str	r3, [r1, #12]
    2c54:	f3bf 8f4f 	dsb	sy
    __NOP();
    2c58:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2c5a:	e7fd      	b.n	2c58 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2c5c:	4b16      	ldr	r3, [pc, #88]	; (2cb8 <SystemInit+0x23c>)
    2c5e:	4a17      	ldr	r2, [pc, #92]	; (2cbc <SystemInit+0x240>)
    2c60:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2c62:	bd10      	pop	{r4, pc}
    2c64:	10000324 	.word	0x10000324
    2c68:	40013540 	.word	0x40013540
    2c6c:	4007c074 	.word	0x4007c074
    2c70:	baadf00d 	.word	0xbaadf00d
    2c74:	10000244 	.word	0x10000244
    2c78:	4000053c 	.word	0x4000053c
    2c7c:	e000edf0 	.word	0xe000edf0
    2c80:	400005a0 	.word	0x400005a0
    2c84:	40005610 	.word	0x40005610
    2c88:	10000130 	.word	0x10000130
    2c8c:	f0000fe0 	.word	0xf0000fe0
    2c90:	10000134 	.word	0x10000134
    2c94:	00004cd1 	.word	0x00004cd1
    2c98:	4000c000 	.word	0x4000c000
    2c9c:	10000258 	.word	0x10000258
    2ca0:	40000ee4 	.word	0x40000ee4
    2ca4:	00004cd5 	.word	0x00004cd5
    2ca8:	4000173c 	.word	0x4000173c
    2cac:	4001e000 	.word	0x4001e000
    2cb0:	e000ed00 	.word	0xe000ed00
    2cb4:	05fa0004 	.word	0x05fa0004
    2cb8:	200000a8 	.word	0x200000a8
    2cbc:	03d09000 	.word	0x03d09000

00002cc0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2cc0:	4b04      	ldr	r3, [pc, #16]	; (2cd4 <nrfx_clock_init+0x14>)
    2cc2:	791a      	ldrb	r2, [r3, #4]
    2cc4:	b922      	cbnz	r2, 2cd0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2cc6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2cc8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2cca:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2ccc:	4802      	ldr	r0, [pc, #8]	; (2cd8 <nrfx_clock_init+0x18>)
    2cce:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2cd0:	4802      	ldr	r0, [pc, #8]	; (2cdc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2cd2:	4770      	bx	lr
    2cd4:	2000034c 	.word	0x2000034c
    2cd8:	0bad0000 	.word	0x0bad0000
    2cdc:	0bad000c 	.word	0x0bad000c

00002ce0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    2ce0:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2ce2:	b110      	cbz	r0, 2cea <nrfx_clock_start+0xa>
    2ce4:	2801      	cmp	r0, #1
    2ce6:	d033      	beq.n	2d50 <nrfx_clock_start+0x70>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    2ce8:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2cf2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    2cf6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    2cfa:	4619      	mov	r1, r3
    2cfc:	d024      	beq.n	2d48 <nrfx_clock_start+0x68>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2cfe:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    2d02:	2a01      	cmp	r2, #1
    2d04:	d120      	bne.n	2d48 <nrfx_clock_start+0x68>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d06:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d0a:	4b16      	ldr	r3, [pc, #88]	; (2d64 <nrfx_clock_start+0x84>)
    2d0c:	2200      	movs	r2, #0
    2d0e:	601a      	str	r2, [r3, #0]
    2d10:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d16:	2202      	movs	r2, #2
    2d18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    2d1c:	4a12      	ldr	r2, [pc, #72]	; (2d68 <nrfx_clock_start+0x88>)
    2d1e:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    2d20:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    2d24:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
    2d26:	4b11      	ldr	r3, [pc, #68]	; (2d6c <nrfx_clock_start+0x8c>)
    2d28:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    2d2a:	f044 0101 	orr.w	r1, r4, #1
    2d2e:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    2d30:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    2d32:	6859      	ldr	r1, [r3, #4]
    2d34:	1b49      	subs	r1, r1, r5
    2d36:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    2d3a:	d3fa      	bcc.n	2d32 <nrfx_clock_start+0x52>
    DWT->CTRL = dwt_ctrl;
    2d3c:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d3e:	4b0c      	ldr	r3, [pc, #48]	; (2d70 <nrfx_clock_start+0x90>)
    CoreDebug->DEMCR = core_debug;
    2d40:	60d0      	str	r0, [r2, #12]
    2d42:	2201      	movs	r2, #1
    2d44:	601a      	str	r2, [r3, #0]
}
    2d46:	e7cf      	b.n	2ce8 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d48:	2300      	movs	r3, #0
    2d4a:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    2d4e:	e7dc      	b.n	2d0a <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d50:	4b08      	ldr	r3, [pc, #32]	; (2d74 <nrfx_clock_start+0x94>)
    2d52:	2200      	movs	r2, #0
    2d54:	601a      	str	r2, [r3, #0]
    2d56:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d5c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d60:	6018      	str	r0, [r3, #0]
}
    2d62:	e7c1      	b.n	2ce8 <nrfx_clock_start+0x8>
    2d64:	40000104 	.word	0x40000104
    2d68:	e000edf0 	.word	0xe000edf0
    2d6c:	e0001000 	.word	0xe0001000
    2d70:	40000008 	.word	0x40000008
    2d74:	40000100 	.word	0x40000100

00002d78 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2d78:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2d7a:	b110      	cbz	r0, 2d82 <nrfx_clock_stop+0xa>
    2d7c:	2801      	cmp	r0, #1
    2d7e:	d018      	beq.n	2db2 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2d80:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    2d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d86:	2202      	movs	r2, #2
    2d88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d8c:	4a18      	ldr	r2, [pc, #96]	; (2df0 <nrfx_clock_stop+0x78>)
    2d8e:	6010      	str	r0, [r2, #0]
    2d90:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d92:	4a18      	ldr	r2, [pc, #96]	; (2df4 <nrfx_clock_stop+0x7c>)
    2d94:	2101      	movs	r1, #1
    2d96:	6011      	str	r1, [r2, #0]
    2d98:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2d9c:	461c      	mov	r4, r3
    2d9e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    2da2:	03db      	lsls	r3, r3, #15
    2da4:	d5ec      	bpl.n	2d80 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2da6:	2001      	movs	r0, #1
    2da8:	f001 fc36 	bl	4618 <nrfx_busy_wait>
    2dac:	3d01      	subs	r5, #1
    2dae:	d1f6      	bne.n	2d9e <nrfx_clock_stop+0x26>
    2db0:	e7e6      	b.n	2d80 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2db2:	4b11      	ldr	r3, [pc, #68]	; (2df8 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    2db4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2db8:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2dba:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dbe:	601a      	str	r2, [r3, #0]
    2dc0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dc2:	4b0e      	ldr	r3, [pc, #56]	; (2dfc <nrfx_clock_stop+0x84>)
    2dc4:	f242 7510 	movw	r5, #10000	; 0x2710
    2dc8:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2dca:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2dce:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    2dd2:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2dd4:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2dd8:	d505      	bpl.n	2de6 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    2dda:	b123      	cbz	r3, 2de6 <nrfx_clock_stop+0x6e>
    2ddc:	2001      	movs	r0, #1
    2dde:	f001 fc1b 	bl	4618 <nrfx_busy_wait>
    2de2:	3d01      	subs	r5, #1
    2de4:	d1f1      	bne.n	2dca <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    2de6:	4b06      	ldr	r3, [pc, #24]	; (2e00 <nrfx_clock_stop+0x88>)
    2de8:	2200      	movs	r2, #0
    2dea:	715a      	strb	r2, [r3, #5]
    2dec:	e7c8      	b.n	2d80 <nrfx_clock_stop+0x8>
    2dee:	bf00      	nop
    2df0:	40000104 	.word	0x40000104
    2df4:	4000000c 	.word	0x4000000c
    2df8:	40000100 	.word	0x40000100
    2dfc:	40000004 	.word	0x40000004
    2e00:	2000034c 	.word	0x2000034c

00002e04 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e04:	4b16      	ldr	r3, [pc, #88]	; (2e60 <nrfx_power_clock_irq_handler+0x5c>)
    2e06:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2e08:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2e0a:	b16a      	cbz	r2, 2e28 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e0c:	2200      	movs	r2, #0
    2e0e:	601a      	str	r2, [r3, #0]
    2e10:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    2e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e16:	2201      	movs	r2, #1
    2e18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2e1c:	4b11      	ldr	r3, [pc, #68]	; (2e64 <nrfx_power_clock_irq_handler+0x60>)
    2e1e:	7958      	ldrb	r0, [r3, #5]
    2e20:	b910      	cbnz	r0, 2e28 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    2e22:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2e24:	681b      	ldr	r3, [r3, #0]
    2e26:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e28:	4b0f      	ldr	r3, [pc, #60]	; (2e68 <nrfx_power_clock_irq_handler+0x64>)
    2e2a:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2e2c:	b172      	cbz	r2, 2e4c <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e2e:	2200      	movs	r2, #0
    2e30:	601a      	str	r2, [r3, #0]
    2e32:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e38:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e3c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2e40:	0792      	lsls	r2, r2, #30
    2e42:	d104      	bne.n	2e4e <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e44:	2201      	movs	r2, #1
    2e46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e4a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2e4c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2e4e:	2202      	movs	r2, #2
    2e50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e54:	4b03      	ldr	r3, [pc, #12]	; (2e64 <nrfx_power_clock_irq_handler+0x60>)
}
    2e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e5a:	681b      	ldr	r3, [r3, #0]
    2e5c:	2001      	movs	r0, #1
    2e5e:	4718      	bx	r3
    2e60:	40000100 	.word	0x40000100
    2e64:	2000034c 	.word	0x2000034c
    2e68:	40000104 	.word	0x40000104

00002e6c <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    2e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    2e70:	4a14      	ldr	r2, [pc, #80]	; (2ec4 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    2e72:	4e15      	ldr	r6, [pc, #84]	; (2ec8 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    2e74:	4f15      	ldr	r7, [pc, #84]	; (2ecc <nrfx_ppi_channel_alloc+0x60>)
{
    2e76:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    2e78:	4815      	ldr	r0, [pc, #84]	; (2ed0 <nrfx_ppi_channel_alloc+0x64>)
{
    2e7a:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    2e7c:	f04f 0e01 	mov.w	lr, #1
    2e80:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    2e84:	f04f 0320 	mov.w	r3, #32
    2e88:	f3ef 8811 	mrs	r8, BASEPRI
    2e8c:	f383 8811 	msr	BASEPRI, r3
    2e90:	f3bf 8f6f 	isb	sy
    2e94:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    2e98:	4213      	tst	r3, r2
    2e9a:	d007      	beq.n	2eac <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    2e9c:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    2e9e:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    2ea0:	bf01      	itttt	eq
    2ea2:	4319      	orreq	r1, r3
    2ea4:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    2ea6:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    2eaa:	4638      	moveq	r0, r7
	__asm__ volatile(
    2eac:	f388 8811 	msr	BASEPRI, r8
    2eb0:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    2eb4:	42b8      	cmp	r0, r7
    2eb6:	d003      	beq.n	2ec0 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    2eb8:	439a      	bics	r2, r3
    2eba:	f104 0401 	add.w	r4, r4, #1
    2ebe:	d1df      	bne.n	2e80 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ec4:	000fffff 	.word	0x000fffff
    2ec8:	20000354 	.word	0x20000354
    2ecc:	0bad0000 	.word	0x0bad0000
    2ed0:	0bad0002 	.word	0x0bad0002

00002ed4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    2ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2ed6:	4b10      	ldr	r3, [pc, #64]	; (2f18 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    2ed8:	4f10      	ldr	r7, [pc, #64]	; (2f1c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2eda:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    2ede:	3001      	adds	r0, #1
    2ee0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2ee4:	42ae      	cmp	r6, r5
    2ee6:	d800      	bhi.n	2eea <z_sys_init_run_level+0x16>
		}
	}
}
    2ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    2eea:	e9d5 3400 	ldrd	r3, r4, [r5]
    2eee:	4620      	mov	r0, r4
    2ef0:	4798      	blx	r3
    2ef2:	b170      	cbz	r0, 2f12 <z_sys_init_run_level+0x3e>
    2ef4:	b16c      	cbz	r4, 2f12 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
    2ef6:	1be4      	subs	r4, r4, r7
    2ef8:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2efa:	0961      	lsrs	r1, r4, #5
    2efc:	4a08      	ldr	r2, [pc, #32]	; (2f20 <z_sys_init_run_level+0x4c>)
    2efe:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    2f02:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    2f06:	2301      	movs	r3, #1
    2f08:	fa03 f404 	lsl.w	r4, r3, r4
    2f0c:	4304      	orrs	r4, r0
    2f0e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2f12:	3508      	adds	r5, #8
    2f14:	e7e6      	b.n	2ee4 <z_sys_init_run_level+0x10>
    2f16:	bf00      	nop
    2f18:	00004b40 	.word	0x00004b40
    2f1c:	200000b4 	.word	0x200000b4
    2f20:	20000104 	.word	0x20000104

00002f24 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    2f24:	4b08      	ldr	r3, [pc, #32]	; (2f48 <z_device_ready+0x24>)
    2f26:	1ac0      	subs	r0, r0, r3
    2f28:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2f2a:	4b08      	ldr	r3, [pc, #32]	; (2f4c <z_device_ready+0x28>)
    2f2c:	0942      	lsrs	r2, r0, #5
    2f2e:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    2f32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    2f36:	2301      	movs	r3, #1
    2f38:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    2f3c:	4210      	tst	r0, r2
}
    2f3e:	bf0c      	ite	eq
    2f40:	4618      	moveq	r0, r3
    2f42:	2000      	movne	r0, #0
    2f44:	4770      	bx	lr
    2f46:	bf00      	nop
    2f48:	200000b4 	.word	0x200000b4
    2f4c:	20000104 	.word	0x20000104

00002f50 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    2f50:	4911      	ldr	r1, [pc, #68]	; (2f98 <z_impl_device_get_binding+0x48>)
{
    2f52:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    2f54:	4c11      	ldr	r4, [pc, #68]	; (2f9c <z_impl_device_get_binding+0x4c>)
{
    2f56:	4605      	mov	r5, r0
    2f58:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    2f5a:	428c      	cmp	r4, r1
    2f5c:	d104      	bne.n	2f68 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f5e:	4c0f      	ldr	r4, [pc, #60]	; (2f9c <z_impl_device_get_binding+0x4c>)
    2f60:	42b4      	cmp	r4, r6
    2f62:	d10a      	bne.n	2f7a <z_impl_device_get_binding+0x2a>
	return NULL;
    2f64:	2400      	movs	r4, #0
    2f66:	e014      	b.n	2f92 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    2f68:	4620      	mov	r0, r4
    2f6a:	f7ff ffdb 	bl	2f24 <z_device_ready>
    2f6e:	b110      	cbz	r0, 2f76 <z_impl_device_get_binding+0x26>
    2f70:	6823      	ldr	r3, [r4, #0]
    2f72:	42ab      	cmp	r3, r5
    2f74:	d00d      	beq.n	2f92 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f76:	3410      	adds	r4, #16
    2f78:	e7ef      	b.n	2f5a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2f7a:	4620      	mov	r0, r4
    2f7c:	f7ff ffd2 	bl	2f24 <z_device_ready>
    2f80:	b908      	cbnz	r0, 2f86 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f82:	3410      	adds	r4, #16
    2f84:	e7ec      	b.n	2f60 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2f86:	6821      	ldr	r1, [r4, #0]
    2f88:	4628      	mov	r0, r5
    2f8a:	f001 fa17 	bl	43bc <strcmp>
    2f8e:	2800      	cmp	r0, #0
    2f90:	d1f7      	bne.n	2f82 <z_impl_device_get_binding+0x32>
}
    2f92:	4620      	mov	r0, r4
    2f94:	bd70      	pop	{r4, r5, r6, pc}
    2f96:	bf00      	nop
    2f98:	20000104 	.word	0x20000104
    2f9c:	200000b4 	.word	0x200000b4

00002fa0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    2fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
    2fa2:	4e1c      	ldr	r6, [pc, #112]	; (3014 <idle+0x74>)
{
    2fa4:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    2fa6:	2700      	movs	r7, #0
	__asm__ volatile(
    2fa8:	f04f 0220 	mov.w	r2, #32
    2fac:	f3ef 8311 	mrs	r3, BASEPRI
    2fb0:	f382 8811 	msr	BASEPRI, r2
    2fb4:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    2fb8:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    2fba:	b188      	cbz	r0, 2fe0 <idle+0x40>
			cpu->pending_abort = NULL;
    2fbc:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    2fbe:	f383 8811 	msr	BASEPRI, r3
    2fc2:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
    2fc6:	f000 fab9 	bl	353c <z_thread_single_abort>
	__asm__ volatile(
    2fca:	f04f 0320 	mov.w	r3, #32
    2fce:	f3ef 8011 	mrs	r0, BASEPRI
    2fd2:	f383 8811 	msr	BASEPRI, r3
    2fd6:	f3bf 8f6f 	isb	sy
    2fda:	f001 fb66 	bl	46aa <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
    2fde:	e7e3      	b.n	2fa8 <idle+0x8>
	__asm__ volatile(
    2fe0:	f383 8811 	msr	BASEPRI, r3
    2fe4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2fe8:	f04f 0220 	mov.w	r2, #32
    2fec:	f3ef 8311 	mrs	r3, BASEPRI
    2ff0:	f382 8811 	msr	BASEPRI, r2
    2ff4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    2ff8:	f001 fc23 	bl	4842 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2ffc:	2101      	movs	r1, #1
    2ffe:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
    3000:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3002:	bfd8      	it	le
    3004:	4608      	movle	r0, r1
    3006:	f001 fc2c 	bl	4862 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    300a:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    300c:	f7fe fd1e 	bl	1a4c <arch_cpu_idle>
}
    3010:	e7ca      	b.n	2fa8 <idle+0x8>
    3012:	bf00      	nop
    3014:	20000358 	.word	0x20000358

00003018 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3018:	4802      	ldr	r0, [pc, #8]	; (3024 <z_bss_zero+0xc>)
    301a:	4a03      	ldr	r2, [pc, #12]	; (3028 <z_bss_zero+0x10>)
    301c:	2100      	movs	r1, #0
    301e:	1a12      	subs	r2, r2, r0
    3020:	f001 ba03 	b.w	442a <memset>
    3024:	20000108 	.word	0x20000108
    3028:	200007b4 	.word	0x200007b4

0000302c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    302c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    302e:	4806      	ldr	r0, [pc, #24]	; (3048 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3030:	4a06      	ldr	r2, [pc, #24]	; (304c <z_data_copy+0x20>)
    3032:	4907      	ldr	r1, [pc, #28]	; (3050 <z_data_copy+0x24>)
    3034:	1a12      	subs	r2, r2, r0
    3036:	f001 f9cd 	bl	43d4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    303a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    303e:	4a05      	ldr	r2, [pc, #20]	; (3054 <z_data_copy+0x28>)
    3040:	4905      	ldr	r1, [pc, #20]	; (3058 <z_data_copy+0x2c>)
    3042:	4806      	ldr	r0, [pc, #24]	; (305c <z_data_copy+0x30>)
    3044:	f001 b9c6 	b.w	43d4 <memcpy>
    3048:	20000000 	.word	0x20000000
    304c:	20000108 	.word	0x20000108
    3050:	00004d28 	.word	0x00004d28
    3054:	00000000 	.word	0x00000000
    3058:	00004d28 	.word	0x00004d28
    305c:	20000000 	.word	0x20000000

00003060 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3060:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    3062:	4b0c      	ldr	r3, [pc, #48]	; (3094 <bg_thread_main+0x34>)
    3064:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3066:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3068:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    306a:	f7ff ff33 	bl	2ed4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    306e:	4a0a      	ldr	r2, [pc, #40]	; (3098 <bg_thread_main+0x38>)
    3070:	490a      	ldr	r1, [pc, #40]	; (309c <bg_thread_main+0x3c>)
    3072:	480b      	ldr	r0, [pc, #44]	; (30a0 <bg_thread_main+0x40>)
    3074:	f000 fee6 	bl	3e44 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3078:	2003      	movs	r0, #3
    307a:	f7ff ff2b 	bl	2ed4 <z_sys_init_run_level>

	z_init_static_threads();
    307e:	f000 fc5d 	bl	393c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3082:	f7fd fc29 	bl	8d8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3086:	4a07      	ldr	r2, [pc, #28]	; (30a4 <bg_thread_main+0x44>)
    3088:	7b13      	ldrb	r3, [r2, #12]
    308a:	f023 0301 	bic.w	r3, r3, #1
    308e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3090:	bd08      	pop	{r3, pc}
    3092:	bf00      	nop
    3094:	200007b1 	.word	0x200007b1
    3098:	00004bc2 	.word	0x00004bc2
    309c:	00004cdd 	.word	0x00004cdd
    30a0:	00004cfc 	.word	0x00004cfc
    30a4:	20000188 	.word	0x20000188

000030a8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    30a8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    30ac:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 31a4 <z_cstart+0xfc>
    30b0:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    30b2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    30b6:	4d33      	ldr	r5, [pc, #204]	; (3184 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
    30b8:	4e33      	ldr	r6, [pc, #204]	; (3188 <z_cstart+0xe0>)
    30ba:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    30bc:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 31a8 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
    30c0:	4f32      	ldr	r7, [pc, #200]	; (318c <z_cstart+0xe4>)
    30c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30c6:	2400      	movs	r4, #0
    30c8:	616b      	str	r3, [r5, #20]
    30ca:	23e0      	movs	r3, #224	; 0xe0
    30cc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    30d0:	77ec      	strb	r4, [r5, #31]
    30d2:	762c      	strb	r4, [r5, #24]
    30d4:	766c      	strb	r4, [r5, #25]
    30d6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    30d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    30de:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    30e0:	f7fe fdf8 	bl	1cd4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    30e4:	f7fe fcac 	bl	1a40 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    30e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30ec:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    30ee:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    30f0:	4d27      	ldr	r5, [pc, #156]	; (3190 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    30f2:	f240 1301 	movw	r3, #257	; 0x101
    30f6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    30fa:	ab06      	add	r3, sp, #24
    30fc:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    30fe:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    3100:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    3104:	f7ff fee6 	bl	2ed4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3108:	2001      	movs	r0, #1
    310a:	f7ff fee3 	bl	2ed4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    310e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    3112:	f000 fb17 	bl	3744 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3116:	4b1f      	ldr	r3, [pc, #124]	; (3194 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    3118:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    311a:	491f      	ldr	r1, [pc, #124]	; (3198 <z_cstart+0xf0>)
    311c:	9305      	str	r3, [sp, #20]
    311e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3122:	4653      	mov	r3, sl
    3124:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    3128:	e9cd 4401 	strd	r4, r4, [sp, #4]
    312c:	9400      	str	r4, [sp, #0]
    312e:	4630      	mov	r0, r6
    3130:	f000 fbd2 	bl	38d8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3134:	7b73      	ldrb	r3, [r6, #13]
    3136:	4680      	mov	r8, r0
    3138:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    313c:	4630      	mov	r0, r6
    313e:	7373      	strb	r3, [r6, #13]
    3140:	f001 fadf 	bl	4702 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3144:	230f      	movs	r3, #15
    3146:	e9cd 4302 	strd	r4, r3, [sp, #8]
    314a:	4914      	ldr	r1, [pc, #80]	; (319c <z_cstart+0xf4>)
    314c:	4b14      	ldr	r3, [pc, #80]	; (31a0 <z_cstart+0xf8>)
    314e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3152:	e9cd b404 	strd	fp, r4, [sp, #16]
    3156:	e9cd 5400 	strd	r5, r4, [sp]
    315a:	4638      	mov	r0, r7
    315c:	f000 fbbc 	bl	38d8 <z_setup_new_thread>
    3160:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3162:	60ef      	str	r7, [r5, #12]
    3164:	f023 0304 	bic.w	r3, r3, #4
    3168:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    316a:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
    316e:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
    3172:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    3174:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3178:	4652      	mov	r2, sl
    317a:	4641      	mov	r1, r8
    317c:	4630      	mov	r0, r6
    317e:	f7fe fbe9 	bl	1954 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3182:	bf00      	nop
    3184:	e000ed00 	.word	0xe000ed00
    3188:	20000188 	.word	0x20000188
    318c:	20000108 	.word	0x20000108
    3190:	20000358 	.word	0x20000358
    3194:	00004d23 	.word	0x00004d23
    3198:	200007c0 	.word	0x200007c0
    319c:	200017e0 	.word	0x200017e0
    31a0:	00002fa1 	.word	0x00002fa1
    31a4:	20002160 	.word	0x20002160
    31a8:	00003061 	.word	0x00003061

000031ac <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    31ac:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    31ae:	4c08      	ldr	r4, [pc, #32]	; (31d0 <z_reset_time_slice+0x24>)
    31b0:	6823      	ldr	r3, [r4, #0]
    31b2:	b15b      	cbz	r3, 31cc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    31b4:	f7fe fafe 	bl	17b4 <z_clock_elapsed>
    31b8:	4603      	mov	r3, r0
    31ba:	6820      	ldr	r0, [r4, #0]
    31bc:	4a05      	ldr	r2, [pc, #20]	; (31d4 <z_reset_time_slice+0x28>)
    31be:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    31c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    31c4:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    31c6:	2100      	movs	r1, #0
    31c8:	f001 bb4b 	b.w	4862 <z_set_timeout_expiry>
}
    31cc:	bd10      	pop	{r4, pc}
    31ce:	bf00      	nop
    31d0:	20000394 	.word	0x20000394
    31d4:	20000358 	.word	0x20000358

000031d8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    31d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31da:	4605      	mov	r5, r0
    31dc:	460c      	mov	r4, r1
    31de:	f04f 0320 	mov.w	r3, #32
    31e2:	f3ef 8611 	mrs	r6, BASEPRI
    31e6:	f383 8811 	msr	BASEPRI, r3
    31ea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    31ee:	4b0d      	ldr	r3, [pc, #52]	; (3224 <k_sched_time_slice_set+0x4c>)
    31f0:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    31f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    31f6:	f240 30e7 	movw	r0, #999	; 0x3e7
    31fa:	2100      	movs	r1, #0
    31fc:	615a      	str	r2, [r3, #20]
    31fe:	fbe7 0105 	umlal	r0, r1, r7, r5
    3202:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3206:	2300      	movs	r3, #0
    3208:	f7fd f9ec 	bl	5e4 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    320c:	4b06      	ldr	r3, [pc, #24]	; (3228 <k_sched_time_slice_set+0x50>)
    320e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3210:	4b06      	ldr	r3, [pc, #24]	; (322c <k_sched_time_slice_set+0x54>)
    3212:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    3214:	f7ff ffca 	bl	31ac <z_reset_time_slice>
	__asm__ volatile(
    3218:	f386 8811 	msr	BASEPRI, r6
    321c:	f3bf 8f6f 	isb	sy
	}
}
    3220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3222:	bf00      	nop
    3224:	20000358 	.word	0x20000358
    3228:	20000394 	.word	0x20000394
    322c:	20000390 	.word	0x20000390

00003230 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3230:	b949      	cbnz	r1, 3246 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3232:	f3ef 8005 	mrs	r0, IPSR
    3236:	b930      	cbnz	r0, 3246 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    3238:	4b05      	ldr	r3, [pc, #20]	; (3250 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    323a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    323c:	689b      	ldr	r3, [r3, #8]
    323e:	429a      	cmp	r2, r3
    3240:	d001      	beq.n	3246 <z_reschedule+0x16>
	ret = arch_swap(key);
    3242:	f7fe bb01 	b.w	1848 <arch_swap>
    3246:	f381 8811 	msr	BASEPRI, r1
    324a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    324e:	4770      	bx	lr
    3250:	20000358 	.word	0x20000358

00003254 <k_sched_lock>:
	__asm__ volatile(
    3254:	f04f 0320 	mov.w	r3, #32
    3258:	f3ef 8111 	mrs	r1, BASEPRI
    325c:	f383 8811 	msr	BASEPRI, r3
    3260:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3264:	4b04      	ldr	r3, [pc, #16]	; (3278 <k_sched_lock+0x24>)
    3266:	689a      	ldr	r2, [r3, #8]
    3268:	7bd3      	ldrb	r3, [r2, #15]
    326a:	3b01      	subs	r3, #1
    326c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    326e:	f381 8811 	msr	BASEPRI, r1
    3272:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    3276:	4770      	bx	lr
    3278:	20000358 	.word	0x20000358

0000327c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    327c:	4b09      	ldr	r3, [pc, #36]	; (32a4 <z_priq_dumb_remove+0x28>)
    327e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    3282:	4282      	cmp	r2, r0
    3284:	d105      	bne.n	3292 <z_priq_dumb_remove+0x16>
    3286:	689b      	ldr	r3, [r3, #8]
    3288:	428b      	cmp	r3, r1
    328a:	d102      	bne.n	3292 <z_priq_dumb_remove+0x16>
    328c:	7b4b      	ldrb	r3, [r1, #13]
    328e:	06db      	lsls	r3, r3, #27
    3290:	d106      	bne.n	32a0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    3292:	e9d1 3200 	ldrd	r3, r2, [r1]
    3296:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3298:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    329a:	2300      	movs	r3, #0
	node->prev = NULL;
    329c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    32a0:	4770      	bx	lr
    32a2:	bf00      	nop
    32a4:	20000358 	.word	0x20000358

000032a8 <update_cache>:
{
    32a8:	b538      	push	{r3, r4, r5, lr}
    32aa:	4c12      	ldr	r4, [pc, #72]	; (32f4 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
    32ac:	6923      	ldr	r3, [r4, #16]
    32ae:	68a2      	ldr	r2, [r4, #8]
{
    32b0:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    32b2:	b10b      	cbz	r3, 32b8 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    32b4:	68e5      	ldr	r5, [r4, #12]
    32b6:	e00c      	b.n	32d2 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    32b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    32bc:	f001 fa17 	bl	46ee <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    32c0:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
    32c2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    32c4:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    32c6:	bf44      	itt	mi
    32c8:	f043 0308 	orrmi.w	r3, r3, #8
    32cc:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    32ce:	2d00      	cmp	r5, #0
    32d0:	d0f0      	beq.n	32b4 <update_cache+0xc>
	if (preempt_ok != 0) {
    32d2:	b949      	cbnz	r1, 32e8 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    32d4:	7b53      	ldrb	r3, [r2, #13]
    32d6:	06db      	lsls	r3, r3, #27
    32d8:	d106      	bne.n	32e8 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    32da:	69ab      	ldr	r3, [r5, #24]
    32dc:	b923      	cbnz	r3, 32e8 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    32de:	89d3      	ldrh	r3, [r2, #14]
    32e0:	2b7f      	cmp	r3, #127	; 0x7f
    32e2:	d901      	bls.n	32e8 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    32e4:	62a2      	str	r2, [r4, #40]	; 0x28
}
    32e6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    32e8:	4295      	cmp	r5, r2
    32ea:	d001      	beq.n	32f0 <update_cache+0x48>
			z_reset_time_slice();
    32ec:	f7ff ff5e 	bl	31ac <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    32f0:	62a5      	str	r5, [r4, #40]	; 0x28
}
    32f2:	e7f8      	b.n	32e6 <update_cache+0x3e>
    32f4:	20000358 	.word	0x20000358

000032f8 <k_sched_unlock>:
{
    32f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    32fa:	f04f 0320 	mov.w	r3, #32
    32fe:	f3ef 8411 	mrs	r4, BASEPRI
    3302:	f383 8811 	msr	BASEPRI, r3
    3306:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    330a:	4b08      	ldr	r3, [pc, #32]	; (332c <k_sched_unlock+0x34>)
    330c:	689a      	ldr	r2, [r3, #8]
    330e:	7bd3      	ldrb	r3, [r2, #15]
    3310:	3301      	adds	r3, #1
    3312:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3314:	2000      	movs	r0, #0
    3316:	f7ff ffc7 	bl	32a8 <update_cache>
	__asm__ volatile(
    331a:	f384 8811 	msr	BASEPRI, r4
    331e:	f3bf 8f6f 	isb	sy
}
    3322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3326:	f001 b9cc 	b.w	46c2 <z_reschedule_unlocked>
    332a:	bf00      	nop
    332c:	20000358 	.word	0x20000358

00003330 <ready_thread>:
{
    3330:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3332:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    3336:	7b43      	ldrb	r3, [r0, #13]
    3338:	2a00      	cmp	r2, #0
    333a:	db2c      	blt.n	3396 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    333c:	06db      	lsls	r3, r3, #27
    333e:	d12a      	bne.n	3396 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    3340:	6983      	ldr	r3, [r0, #24]
    3342:	bb43      	cbnz	r3, 3396 <ready_thread+0x66>
	return list->head == list;
    3344:	4a15      	ldr	r2, [pc, #84]	; (339c <ready_thread+0x6c>)
    3346:	4611      	mov	r1, r2
    3348:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    334c:	428c      	cmp	r4, r1
    334e:	bf18      	it	ne
    3350:	4623      	movne	r3, r4
    3352:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3354:	6b14      	ldr	r4, [r2, #48]	; 0x30
    3356:	bf38      	it	cc
    3358:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    335a:	b1b3      	cbz	r3, 338a <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    335c:	f990 600e 	ldrsb.w	r6, [r0, #14]
    3360:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3364:	42ae      	cmp	r6, r5
    3366:	db03      	blt.n	3370 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    3368:	42a3      	cmp	r3, r4
    336a:	d00e      	beq.n	338a <ready_thread+0x5a>
    336c:	681b      	ldr	r3, [r3, #0]
    336e:	e7f4      	b.n	335a <ready_thread+0x2a>
	node->prev = successor->prev;
    3370:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3372:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    3376:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3378:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    337a:	7b43      	ldrb	r3, [r0, #13]
    337c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3380:	7343      	strb	r3, [r0, #13]
}
    3382:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3384:	2000      	movs	r0, #0
    3386:	f7ff bf8f 	b.w	32a8 <update_cache>
	node->prev = list->tail;
    338a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    338e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3390:	6018      	str	r0, [r3, #0]
	list->tail = node;
    3392:	6310      	str	r0, [r2, #48]	; 0x30
}
    3394:	e7f1      	b.n	337a <ready_thread+0x4a>
}
    3396:	bc70      	pop	{r4, r5, r6}
    3398:	4770      	bx	lr
    339a:	bf00      	nop
    339c:	20000358 	.word	0x20000358

000033a0 <z_sched_start>:
{
    33a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    33a2:	f04f 0220 	mov.w	r2, #32
    33a6:	f3ef 8411 	mrs	r4, BASEPRI
    33aa:	f382 8811 	msr	BASEPRI, r2
    33ae:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    33b2:	7b42      	ldrb	r2, [r0, #13]
    33b4:	0751      	lsls	r1, r2, #29
    33b6:	d404      	bmi.n	33c2 <z_sched_start+0x22>
	__asm__ volatile(
    33b8:	f384 8811 	msr	BASEPRI, r4
    33bc:	f3bf 8f6f 	isb	sy
}
    33c0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    33c2:	f022 0204 	bic.w	r2, r2, #4
    33c6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    33c8:	f7ff ffb2 	bl	3330 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    33cc:	4621      	mov	r1, r4
    33ce:	4802      	ldr	r0, [pc, #8]	; (33d8 <z_sched_start+0x38>)
}
    33d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    33d4:	f7ff bf2c 	b.w	3230 <z_reschedule>
    33d8:	200007b2 	.word	0x200007b2

000033dc <move_thread_to_end_of_prio_q>:
{
    33dc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    33de:	f990 300d 	ldrsb.w	r3, [r0, #13]
    33e2:	2b00      	cmp	r3, #0
{
    33e4:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    33e6:	da02      	bge.n	33ee <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    33e8:	4817      	ldr	r0, [pc, #92]	; (3448 <move_thread_to_end_of_prio_q+0x6c>)
    33ea:	f7ff ff47 	bl	327c <z_priq_dumb_remove>
	return list->head == list;
    33ee:	4a17      	ldr	r2, [pc, #92]	; (344c <move_thread_to_end_of_prio_q+0x70>)
    33f0:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    33f2:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
    33f4:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    33f8:	4283      	cmp	r3, r0
    33fa:	bf08      	it	eq
    33fc:	2300      	moveq	r3, #0
    33fe:	2b00      	cmp	r3, #0
    3400:	bf38      	it	cc
    3402:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3404:	b1d3      	cbz	r3, 343c <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    3406:	f991 600e 	ldrsb.w	r6, [r1, #14]
    340a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    340e:	42ae      	cmp	r6, r5
    3410:	db03      	blt.n	341a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    3412:	42a3      	cmp	r3, r4
    3414:	d012      	beq.n	343c <move_thread_to_end_of_prio_q+0x60>
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	e7f4      	b.n	3404 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    341a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    341c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    3420:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3422:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    3424:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    3426:	6890      	ldr	r0, [r2, #8]
    3428:	f063 037f 	orn	r3, r3, #127	; 0x7f
    342c:	734b      	strb	r3, [r1, #13]
    342e:	1a43      	subs	r3, r0, r1
    3430:	4258      	negs	r0, r3
}
    3432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3436:	4158      	adcs	r0, r3
    3438:	f7ff bf36 	b.w	32a8 <update_cache>
	node->prev = list->tail;
    343c:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    3440:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3442:	6019      	str	r1, [r3, #0]
	list->tail = node;
    3444:	6311      	str	r1, [r2, #48]	; 0x30
}
    3446:	e7ed      	b.n	3424 <move_thread_to_end_of_prio_q+0x48>
    3448:	20000384 	.word	0x20000384
    344c:	20000358 	.word	0x20000358

00003450 <z_time_slice>:
{
    3450:	b570      	push	{r4, r5, r6, lr}
    3452:	4601      	mov	r1, r0
	__asm__ volatile(
    3454:	f04f 0320 	mov.w	r3, #32
    3458:	f3ef 8411 	mrs	r4, BASEPRI
    345c:	f383 8811 	msr	BASEPRI, r3
    3460:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3464:	4b16      	ldr	r3, [pc, #88]	; (34c0 <z_time_slice+0x70>)
    3466:	4a17      	ldr	r2, [pc, #92]	; (34c4 <z_time_slice+0x74>)
    3468:	6898      	ldr	r0, [r3, #8]
    346a:	6815      	ldr	r5, [r2, #0]
    346c:	42a8      	cmp	r0, r5
    346e:	461d      	mov	r5, r3
    3470:	d106      	bne.n	3480 <z_time_slice+0x30>
			z_reset_time_slice();
    3472:	f7ff fe9b 	bl	31ac <z_reset_time_slice>
	__asm__ volatile(
    3476:	f384 8811 	msr	BASEPRI, r4
    347a:	f3bf 8f6f 	isb	sy
}
    347e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    3480:	2600      	movs	r6, #0
    3482:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    3484:	4a10      	ldr	r2, [pc, #64]	; (34c8 <z_time_slice+0x78>)
    3486:	6812      	ldr	r2, [r2, #0]
    3488:	b1ba      	cbz	r2, 34ba <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    348a:	89c2      	ldrh	r2, [r0, #14]
    348c:	2a7f      	cmp	r2, #127	; 0x7f
    348e:	d814      	bhi.n	34ba <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3490:	7b42      	ldrb	r2, [r0, #13]
    3492:	06d2      	lsls	r2, r2, #27
    3494:	d111      	bne.n	34ba <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3496:	4a0d      	ldr	r2, [pc, #52]	; (34cc <z_time_slice+0x7c>)
    3498:	f990 600e 	ldrsb.w	r6, [r0, #14]
    349c:	6812      	ldr	r2, [r2, #0]
    349e:	4296      	cmp	r6, r2
    34a0:	db0b      	blt.n	34ba <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    34a2:	4a0b      	ldr	r2, [pc, #44]	; (34d0 <z_time_slice+0x80>)
    34a4:	4290      	cmp	r0, r2
    34a6:	d008      	beq.n	34ba <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    34a8:	695a      	ldr	r2, [r3, #20]
    34aa:	428a      	cmp	r2, r1
    34ac:	dc02      	bgt.n	34b4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    34ae:	f7ff ff95 	bl	33dc <move_thread_to_end_of_prio_q>
    34b2:	e7de      	b.n	3472 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    34b4:	1a52      	subs	r2, r2, r1
    34b6:	615a      	str	r2, [r3, #20]
    34b8:	e7dd      	b.n	3476 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    34ba:	2300      	movs	r3, #0
    34bc:	616b      	str	r3, [r5, #20]
    34be:	e7da      	b.n	3476 <z_time_slice+0x26>
    34c0:	20000358 	.word	0x20000358
    34c4:	2000038c 	.word	0x2000038c
    34c8:	20000394 	.word	0x20000394
    34cc:	20000390 	.word	0x20000390
    34d0:	20000108 	.word	0x20000108

000034d4 <z_impl_k_thread_suspend>:
{
    34d4:	b570      	push	{r4, r5, r6, lr}
    34d6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    34d8:	3018      	adds	r0, #24
    34da:	f001 f99c 	bl	4816 <z_abort_timeout>
	__asm__ volatile(
    34de:	f04f 0320 	mov.w	r3, #32
    34e2:	f3ef 8611 	mrs	r6, BASEPRI
    34e6:	f383 8811 	msr	BASEPRI, r3
    34ea:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    34ee:	f994 300d 	ldrsb.w	r3, [r4, #13]
    34f2:	2b00      	cmp	r3, #0
    34f4:	da07      	bge.n	3506 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    34f6:	480f      	ldr	r0, [pc, #60]	; (3534 <z_impl_k_thread_suspend+0x60>)
    34f8:	4621      	mov	r1, r4
    34fa:	f7ff febf 	bl	327c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    34fe:	7b63      	ldrb	r3, [r4, #13]
    3500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3504:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    3506:	4d0c      	ldr	r5, [pc, #48]	; (3538 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3508:	7b63      	ldrb	r3, [r4, #13]
    350a:	68a8      	ldr	r0, [r5, #8]
    350c:	f043 0310 	orr.w	r3, r3, #16
    3510:	7363      	strb	r3, [r4, #13]
    3512:	1b03      	subs	r3, r0, r4
    3514:	4258      	negs	r0, r3
    3516:	4158      	adcs	r0, r3
    3518:	f7ff fec6 	bl	32a8 <update_cache>
	__asm__ volatile(
    351c:	f386 8811 	msr	BASEPRI, r6
    3520:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3524:	68ab      	ldr	r3, [r5, #8]
    3526:	42a3      	cmp	r3, r4
    3528:	d103      	bne.n	3532 <z_impl_k_thread_suspend+0x5e>
}
    352a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    352e:	f001 b8c8 	b.w	46c2 <z_reschedule_unlocked>
}
    3532:	bd70      	pop	{r4, r5, r6, pc}
    3534:	20000384 	.word	0x20000384
    3538:	20000358 	.word	0x20000358

0000353c <z_thread_single_abort>:
{
    353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3540:	4604      	mov	r4, r0
	__asm__ volatile(
    3542:	f04f 0320 	mov.w	r3, #32
    3546:	f3ef 8211 	mrs	r2, BASEPRI
    354a:	f383 8811 	msr	BASEPRI, r3
    354e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    3552:	7b43      	ldrb	r3, [r0, #13]
    3554:	f013 0f28 	tst.w	r3, #40	; 0x28
    3558:	d005      	beq.n	3566 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    355a:	f382 8811 	msr	BASEPRI, r2
    355e:	f3bf 8f6f 	isb	sy
}
    3562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    3566:	f043 0320 	orr.w	r3, r3, #32
    356a:	7343      	strb	r3, [r0, #13]
    356c:	f382 8811 	msr	BASEPRI, r2
    3570:	f3bf 8f6f 	isb	sy
    3574:	3018      	adds	r0, #24
    3576:	f001 f94e 	bl	4816 <z_abort_timeout>
	__asm__ volatile(
    357a:	f04f 0320 	mov.w	r3, #32
    357e:	f3ef 8611 	mrs	r6, BASEPRI
    3582:	f383 8811 	msr	BASEPRI, r3
    3586:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    358a:	7b63      	ldrb	r3, [r4, #13]
    358c:	06d8      	lsls	r0, r3, #27
    358e:	d116      	bne.n	35be <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    3590:	69a2      	ldr	r2, [r4, #24]
    3592:	b9a2      	cbnz	r2, 35be <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    3594:	0619      	lsls	r1, r3, #24
    3596:	d507      	bpl.n	35a8 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    3598:	4826      	ldr	r0, [pc, #152]	; (3634 <z_thread_single_abort+0xf8>)
    359a:	4621      	mov	r1, r4
    359c:	f7ff fe6e 	bl	327c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    35a0:	7b63      	ldrb	r3, [r4, #13]
    35a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    35a6:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    35a8:	4b23      	ldr	r3, [pc, #140]	; (3638 <z_thread_single_abort+0xfc>)
    35aa:	6898      	ldr	r0, [r3, #8]
    35ac:	1b02      	subs	r2, r0, r4
    35ae:	4250      	negs	r0, r2
    35b0:	4150      	adcs	r0, r2
    35b2:	f7ff fe79 	bl	32a8 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    35b6:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    35ba:	2700      	movs	r7, #0
    35bc:	e01d      	b.n	35fa <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    35be:	079b      	lsls	r3, r3, #30
    35c0:	d5f9      	bpl.n	35b6 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    35c2:	68a0      	ldr	r0, [r4, #8]
    35c4:	4621      	mov	r1, r4
    35c6:	f7ff fe59 	bl	327c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    35ca:	7b63      	ldrb	r3, [r4, #13]
    35cc:	f023 0302 	bic.w	r3, r3, #2
    35d0:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    35d2:	2300      	movs	r3, #0
    35d4:	60a3      	str	r3, [r4, #8]
    35d6:	e7ee      	b.n	35b6 <z_thread_single_abort+0x7a>
    35d8:	f105 0018 	add.w	r0, r5, #24
    35dc:	f001 f91b 	bl	4816 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    35e0:	68a8      	ldr	r0, [r5, #8]
    35e2:	4629      	mov	r1, r5
    35e4:	f7ff fe4a 	bl	327c <z_priq_dumb_remove>
    35e8:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    35ea:	60af      	str	r7, [r5, #8]
    35ec:	f023 0302 	bic.w	r3, r3, #2
    35f0:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    35f2:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    35f4:	4628      	mov	r0, r5
    35f6:	f7ff fe9b 	bl	3330 <ready_thread>
	return list->head == list;
    35fa:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    35fc:	4545      	cmp	r5, r8
    35fe:	d001      	beq.n	3604 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    3600:	2d00      	cmp	r5, #0
    3602:	d1e9      	bne.n	35d8 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    3604:	4b0c      	ldr	r3, [pc, #48]	; (3638 <z_thread_single_abort+0xfc>)
    3606:	689a      	ldr	r2, [r3, #8]
    3608:	4b0c      	ldr	r3, [pc, #48]	; (363c <z_thread_single_abort+0x100>)
    360a:	429a      	cmp	r2, r3
    360c:	d102      	bne.n	3614 <z_thread_single_abort+0xd8>
			update_cache(1);
    360e:	2001      	movs	r0, #1
    3610:	f7ff fe4a 	bl	32a8 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    3614:	7b63      	ldrb	r3, [r4, #13]
    3616:	f043 0308 	orr.w	r3, r3, #8
    361a:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    361c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    361e:	f386 8811 	msr	BASEPRI, r6
    3622:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    3626:	2b00      	cmp	r3, #0
    3628:	d09b      	beq.n	3562 <z_thread_single_abort+0x26>
		fn_abort(thread);
    362a:	4620      	mov	r0, r4
}
    362c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    3630:	4718      	bx	r3
    3632:	bf00      	nop
    3634:	20000384 	.word	0x20000384
    3638:	20000358 	.word	0x20000358
    363c:	20000108 	.word	0x20000108

00003640 <unready_thread>:
{
    3640:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3642:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3646:	2b00      	cmp	r3, #0
{
    3648:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    364a:	da06      	bge.n	365a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    364c:	4807      	ldr	r0, [pc, #28]	; (366c <unready_thread+0x2c>)
    364e:	f7ff fe15 	bl	327c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    3652:	7b4b      	ldrb	r3, [r1, #13]
    3654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3658:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    365a:	4b05      	ldr	r3, [pc, #20]	; (3670 <unready_thread+0x30>)
    365c:	6898      	ldr	r0, [r3, #8]
    365e:	1a43      	subs	r3, r0, r1
    3660:	4258      	negs	r0, r3
    3662:	4158      	adcs	r0, r3
}
    3664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3668:	f7ff be1e 	b.w	32a8 <update_cache>
    366c:	20000384 	.word	0x20000384
    3670:	20000358 	.word	0x20000358

00003674 <pend>:
{
    3674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3678:	4606      	mov	r6, r0
    367a:	4614      	mov	r4, r2
    367c:	461d      	mov	r5, r3
	__asm__ volatile(
    367e:	f04f 0320 	mov.w	r3, #32
    3682:	f3ef 8711 	mrs	r7, BASEPRI
    3686:	f383 8811 	msr	BASEPRI, r3
    368a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    368e:	f001 f868 	bl	4762 <add_to_waitq_locked>
	__asm__ volatile(
    3692:	f387 8811 	msr	BASEPRI, r7
    3696:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    369a:	1c6b      	adds	r3, r5, #1
    369c:	bf08      	it	eq
    369e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    36a2:	d008      	beq.n	36b6 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    36a4:	4622      	mov	r2, r4
    36a6:	462b      	mov	r3, r5
    36a8:	f106 0018 	add.w	r0, r6, #24
    36ac:	4903      	ldr	r1, [pc, #12]	; (36bc <pend+0x48>)
}
    36ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36b2:	f000 ba05 	b.w	3ac0 <z_add_timeout>
    36b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36ba:	bf00      	nop
    36bc:	00004723 	.word	0x00004723

000036c0 <z_pend_curr>:
{
    36c0:	b510      	push	{r4, lr}
	pending_current = _current;
    36c2:	4b07      	ldr	r3, [pc, #28]	; (36e0 <z_pend_curr+0x20>)
    36c4:	6898      	ldr	r0, [r3, #8]
    36c6:	4b07      	ldr	r3, [pc, #28]	; (36e4 <z_pend_curr+0x24>)
{
    36c8:	460c      	mov	r4, r1
	pending_current = _current;
    36ca:	6018      	str	r0, [r3, #0]
{
    36cc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    36ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    36d2:	f7ff ffcf 	bl	3674 <pend>
    36d6:	4620      	mov	r0, r4
}
    36d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36dc:	f7fe b8b4 	b.w	1848 <arch_swap>
    36e0:	20000358 	.word	0x20000358
    36e4:	2000038c 	.word	0x2000038c

000036e8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
    36e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ea:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    36ec:	f001 f8d3 	bl	4896 <z_tick_get_32>
    36f0:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    36f2:	f04f 0320 	mov.w	r3, #32
    36f6:	f3ef 8711 	mrs	r7, BASEPRI
    36fa:	f383 8811 	msr	BASEPRI, r3
    36fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3702:	4e0d      	ldr	r6, [pc, #52]	; (3738 <z_tick_sleep.part.0+0x50>)
    3704:	4b0d      	ldr	r3, [pc, #52]	; (373c <z_tick_sleep.part.0+0x54>)
    3706:	68b0      	ldr	r0, [r6, #8]
    3708:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    370a:	f7ff ff99 	bl	3640 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    370e:	68b0      	ldr	r0, [r6, #8]
    3710:	490b      	ldr	r1, [pc, #44]	; (3740 <z_tick_sleep.part.0+0x58>)
    3712:	462a      	mov	r2, r5
    3714:	17eb      	asrs	r3, r5, #31
    3716:	3018      	adds	r0, #24
    3718:	f000 f9d2 	bl	3ac0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    371c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    371e:	7b53      	ldrb	r3, [r2, #13]
    3720:	f043 0310 	orr.w	r3, r3, #16
    3724:	7353      	strb	r3, [r2, #13]
    3726:	4638      	mov	r0, r7
    3728:	f7fe f88e 	bl	1848 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    372c:	f001 f8b3 	bl	4896 <z_tick_get_32>
    3730:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    3732:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3738:	20000358 	.word	0x20000358
    373c:	2000038c 	.word	0x2000038c
    3740:	00004723 	.word	0x00004723

00003744 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3744:	4b04      	ldr	r3, [pc, #16]	; (3758 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3746:	2100      	movs	r1, #0
    3748:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    374c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    3750:	4608      	mov	r0, r1
    3752:	f7ff bd41 	b.w	31d8 <k_sched_time_slice_set>
    3756:	bf00      	nop
    3758:	20000358 	.word	0x20000358

0000375c <z_impl_k_yield>:
{
    375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    375e:	4c24      	ldr	r4, [pc, #144]	; (37f0 <z_impl_k_yield+0x94>)
    3760:	4b24      	ldr	r3, [pc, #144]	; (37f4 <z_impl_k_yield+0x98>)
    3762:	68a2      	ldr	r2, [r4, #8]
    3764:	429a      	cmp	r2, r3
    3766:	d030      	beq.n	37ca <z_impl_k_yield+0x6e>
    3768:	f04f 0320 	mov.w	r3, #32
    376c:	f3ef 8511 	mrs	r5, BASEPRI
    3770:	f383 8811 	msr	BASEPRI, r3
    3774:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    3778:	68a1      	ldr	r1, [r4, #8]
    377a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    377e:	f7ff fd7d 	bl	327c <z_priq_dumb_remove>
	return list->head == list;
    3782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    3784:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3786:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3788:	4283      	cmp	r3, r0
    378a:	bf08      	it	eq
    378c:	2300      	moveq	r3, #0
    378e:	2b00      	cmp	r3, #0
    3790:	bf38      	it	cc
    3792:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3794:	b32b      	cbz	r3, 37e2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    3796:	f992 700e 	ldrsb.w	r7, [r2, #14]
    379a:	f993 600e 	ldrsb.w	r6, [r3, #14]
    379e:	42b7      	cmp	r7, r6
    37a0:	db03      	blt.n	37aa <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    37a2:	428b      	cmp	r3, r1
    37a4:	d01d      	beq.n	37e2 <z_impl_k_yield+0x86>
    37a6:	681b      	ldr	r3, [r3, #0]
    37a8:	e7f4      	b.n	3794 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    37aa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    37ac:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    37b0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    37b2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    37b4:	7b53      	ldrb	r3, [r2, #13]
    37b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    37ba:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    37bc:	2001      	movs	r0, #1
    37be:	f7ff fd73 	bl	32a8 <update_cache>
	__asm__ volatile(
    37c2:	f385 8811 	msr	BASEPRI, r5
    37c6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    37ca:	f04f 0320 	mov.w	r3, #32
    37ce:	f3ef 8011 	mrs	r0, BASEPRI
    37d2:	f383 8811 	msr	BASEPRI, r3
    37d6:	f3bf 8f6f 	isb	sy
}
    37da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    37de:	f7fe b833 	b.w	1848 <arch_swap>
	node->prev = list->tail;
    37e2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    37e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    37e8:	601a      	str	r2, [r3, #0]
	list->tail = node;
    37ea:	6322      	str	r2, [r4, #48]	; 0x30
}
    37ec:	e7e2      	b.n	37b4 <z_impl_k_yield+0x58>
    37ee:	bf00      	nop
    37f0:	20000358 	.word	0x20000358
    37f4:	20000108 	.word	0x20000108

000037f8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    37f8:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    37fa:	3301      	adds	r3, #1
    37fc:	bf08      	it	eq
    37fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    3802:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3804:	d106      	bne.n	3814 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3806:	4b0b      	ldr	r3, [pc, #44]	; (3834 <z_impl_k_sleep+0x3c>)
    3808:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    380a:	f7ff fe63 	bl	34d4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    380e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    3812:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    3814:	4604      	mov	r4, r0
	if (ticks == 0) {
    3816:	b948      	cbnz	r0, 382c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    3818:	f7ff ffa0 	bl	375c <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
    381c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3820:	fb84 3400 	smull	r3, r4, r4, r0
    3824:	0bd8      	lsrs	r0, r3, #15
    3826:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    382a:	e7f2      	b.n	3812 <z_impl_k_sleep+0x1a>
    382c:	f7ff ff5c 	bl	36e8 <z_tick_sleep.part.0>
    3830:	4604      	mov	r4, r0
    3832:	e7f3      	b.n	381c <z_impl_k_sleep+0x24>
    3834:	20000358 	.word	0x20000358

00003838 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3838:	4b01      	ldr	r3, [pc, #4]	; (3840 <z_impl_k_current_get+0x8>)
    383a:	6898      	ldr	r0, [r3, #8]
    383c:	4770      	bx	lr
    383e:	bf00      	nop
    3840:	20000358 	.word	0x20000358

00003844 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3844:	b538      	push	{r3, r4, r5, lr}
    3846:	4604      	mov	r4, r0
    3848:	f04f 0320 	mov.w	r3, #32
    384c:	f3ef 8511 	mrs	r5, BASEPRI
    3850:	f383 8811 	msr	BASEPRI, r3
    3854:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    3858:	f000 ffae 	bl	47b8 <z_unpend_first_thread>

	if (thread != NULL) {
    385c:	b148      	cbz	r0, 3872 <z_impl_k_sem_give+0x2e>
    385e:	2200      	movs	r2, #0
    3860:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3862:	f000 ff4e 	bl	4702 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3866:	4629      	mov	r1, r5
    3868:	4805      	ldr	r0, [pc, #20]	; (3880 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    386a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    386e:	f7ff bcdf 	b.w	3230 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3872:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3876:	429a      	cmp	r2, r3
    3878:	bf18      	it	ne
    387a:	3301      	addne	r3, #1
    387c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    387e:	e7f2      	b.n	3866 <z_impl_k_sem_give+0x22>
    3880:	200007b2 	.word	0x200007b2

00003884 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3884:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3886:	4614      	mov	r4, r2
    3888:	461d      	mov	r5, r3
    388a:	f04f 0320 	mov.w	r3, #32
    388e:	f3ef 8111 	mrs	r1, BASEPRI
    3892:	f383 8811 	msr	BASEPRI, r3
    3896:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    389a:	6883      	ldr	r3, [r0, #8]
    389c:	b143      	cbz	r3, 38b0 <z_impl_k_sem_take+0x2c>
		sem->count--;
    389e:	3b01      	subs	r3, #1
    38a0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    38a2:	f381 8811 	msr	BASEPRI, r1
    38a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    38aa:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    38ac:	b003      	add	sp, #12
    38ae:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    38b0:	ea54 0305 	orrs.w	r3, r4, r5
    38b4:	d106      	bne.n	38c4 <z_impl_k_sem_take+0x40>
    38b6:	f381 8811 	msr	BASEPRI, r1
    38ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    38be:	f06f 000f 	mvn.w	r0, #15
    38c2:	e7f3      	b.n	38ac <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    38c4:	4602      	mov	r2, r0
    38c6:	e9cd 4500 	strd	r4, r5, [sp]
    38ca:	4802      	ldr	r0, [pc, #8]	; (38d4 <z_impl_k_sem_take+0x50>)
    38cc:	f7ff fef8 	bl	36c0 <z_pend_curr>
	return ret;
    38d0:	e7ec      	b.n	38ac <z_impl_k_sem_take+0x28>
    38d2:	bf00      	nop
    38d4:	200007b2 	.word	0x200007b2

000038d8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    38d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    38dc:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    38e0:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    38e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    38e6:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    38e8:	2504      	movs	r5, #4
    38ea:	7345      	strb	r5, [r0, #13]
{
    38ec:	460f      	mov	r7, r1

	thread_base->prio = priority;
    38ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    38f0:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    38f2:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
    38f4:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    38f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    38f8:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    38fa:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    38fe:	3720      	adds	r7, #32
	node->prev = NULL;
    3900:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3904:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
    3908:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    390a:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    390e:	9202      	str	r2, [sp, #8]
    3910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3912:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3914:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3918:	9200      	str	r2, [sp, #0]
    391a:	4642      	mov	r2, r8
{
    391c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    391e:	f7fd ffe3 	bl	18e8 <arch_new_thread>
	if (!_current) {
    3922:	4b05      	ldr	r3, [pc, #20]	; (3938 <z_setup_new_thread+0x60>)
    3924:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    3926:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    392a:	b103      	cbz	r3, 392e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    392e:	6763      	str	r3, [r4, #116]	; 0x74
}
    3930:	4640      	mov	r0, r8
    3932:	b004      	add	sp, #16
    3934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3938:	20000358 	.word	0x20000358

0000393c <z_init_static_threads>:
{
    393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3940:	4e2a      	ldr	r6, [pc, #168]	; (39ec <z_init_static_threads+0xb0>)
    3942:	4d2b      	ldr	r5, [pc, #172]	; (39f0 <z_init_static_threads+0xb4>)
{
    3944:	b086      	sub	sp, #24
    3946:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    3948:	42b5      	cmp	r5, r6
    394a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    394e:	d310      	bcc.n	3972 <z_init_static_threads+0x36>
	k_sched_lock();
    3950:	f7ff fc80 	bl	3254 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3954:	4c26      	ldr	r4, [pc, #152]	; (39f0 <z_init_static_threads+0xb4>)
    3956:	f8df a09c 	ldr.w	sl, [pc, #156]	; 39f4 <z_init_static_threads+0xb8>
    395a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    395e:	f240 36e7 	movw	r6, #999	; 0x3e7
    3962:	2700      	movs	r7, #0
    3964:	4544      	cmp	r4, r8
    3966:	d321      	bcc.n	39ac <z_init_static_threads+0x70>
}
    3968:	b006      	add	sp, #24
    396a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    396e:	f7ff bcc3 	b.w	32f8 <k_sched_unlock>
		z_setup_new_thread(
    3972:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3976:	9305      	str	r3, [sp, #20]
    3978:	f854 3c10 	ldr.w	r3, [r4, #-16]
    397c:	9304      	str	r3, [sp, #16]
    397e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3982:	9303      	str	r3, [sp, #12]
    3984:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3988:	9302      	str	r3, [sp, #8]
    398a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    398e:	9301      	str	r3, [sp, #4]
    3990:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3994:	9300      	str	r3, [sp, #0]
    3996:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    399a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    399e:	f7ff ff9b 	bl	38d8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    39a2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    39a6:	65dd      	str	r5, [r3, #92]	; 0x5c
    39a8:	4625      	mov	r5, r4
    39aa:	e7cd      	b.n	3948 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    39ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    39ae:	1c5a      	adds	r2, r3, #1
    39b0:	d00d      	beq.n	39ce <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    39b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    39b6:	4630      	mov	r0, r6
    39b8:	4639      	mov	r1, r7
    39ba:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    39be:	42b9      	cmp	r1, r7
    39c0:	bf08      	it	eq
    39c2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    39c4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    39c6:	d104      	bne.n	39d2 <z_init_static_threads+0x96>
	z_sched_start(thread);
    39c8:	4628      	mov	r0, r5
    39ca:	f7ff fce9 	bl	33a0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    39ce:	3430      	adds	r4, #48	; 0x30
    39d0:	e7c8      	b.n	3964 <z_init_static_threads+0x28>
    39d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    39d6:	2300      	movs	r3, #0
    39d8:	f7fc fe04 	bl	5e4 <__aeabi_uldivmod>
    39dc:	4602      	mov	r2, r0
    39de:	460b      	mov	r3, r1
    39e0:	f105 0018 	add.w	r0, r5, #24
    39e4:	4651      	mov	r1, sl
    39e6:	f000 f86b 	bl	3ac0 <z_add_timeout>
    39ea:	e7f0      	b.n	39ce <z_init_static_threads+0x92>
    39ec:	20000108 	.word	0x20000108
    39f0:	20000108 	.word	0x20000108
    39f4:	00004723 	.word	0x00004723

000039f8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
    39f8:	b508      	push	{r3, lr}
	__asm__ volatile(
    39fa:	f04f 0320 	mov.w	r3, #32
    39fe:	f3ef 8411 	mrs	r4, BASEPRI
    3a02:	f383 8811 	msr	BASEPRI, r3
    3a06:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    3a0a:	4b04      	ldr	r3, [pc, #16]	; (3a1c <z_self_abort+0x24>)
    3a0c:	6898      	ldr	r0, [r3, #8]
    3a0e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    3a10:	f7ff fd60 	bl	34d4 <z_impl_k_thread_suspend>
    3a14:	4620      	mov	r0, r4
    3a16:	f7fd ff17 	bl	1848 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
    3a1a:	bf00      	nop
    3a1c:	20000358 	.word	0x20000358

00003a20 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    3a20:	4b03      	ldr	r3, [pc, #12]	; (3a30 <elapsed+0x10>)
    3a22:	681b      	ldr	r3, [r3, #0]
    3a24:	b90b      	cbnz	r3, 3a2a <elapsed+0xa>
    3a26:	f7fd bec5 	b.w	17b4 <z_clock_elapsed>
}
    3a2a:	2000      	movs	r0, #0
    3a2c:	4770      	bx	lr
    3a2e:	bf00      	nop
    3a30:	20000398 	.word	0x20000398

00003a34 <remove_timeout>:
{
    3a34:	b530      	push	{r4, r5, lr}
    3a36:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3a38:	b168      	cbz	r0, 3a56 <remove_timeout+0x22>
    3a3a:	4a0a      	ldr	r2, [pc, #40]	; (3a64 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    3a3c:	6852      	ldr	r2, [r2, #4]
    3a3e:	4290      	cmp	r0, r2
    3a40:	d009      	beq.n	3a56 <remove_timeout+0x22>
	if (next(t) != NULL) {
    3a42:	b143      	cbz	r3, 3a56 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3a44:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3a48:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3a4c:	1912      	adds	r2, r2, r4
    3a4e:	eb45 0101 	adc.w	r1, r5, r1
    3a52:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    3a56:	6842      	ldr	r2, [r0, #4]
    3a58:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3a5a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3a5c:	2300      	movs	r3, #0
	node->prev = NULL;
    3a5e:	e9c0 3300 	strd	r3, r3, [r0]
}
    3a62:	bd30      	pop	{r4, r5, pc}
    3a64:	200000ac 	.word	0x200000ac

00003a68 <next_timeout>:

static int32_t next_timeout(void)
{
    3a68:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    3a6a:	4b13      	ldr	r3, [pc, #76]	; (3ab8 <next_timeout+0x50>)
    3a6c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a6e:	429c      	cmp	r4, r3
    3a70:	bf08      	it	eq
    3a72:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3a74:	f7ff ffd4 	bl	3a20 <elapsed>
    3a78:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    3a7a:	b1bc      	cbz	r4, 3aac <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3a7c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    3a80:	1b40      	subs	r0, r0, r5
    3a82:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3a86:	2801      	cmp	r0, #1
    3a88:	f171 0300 	sbcs.w	r3, r1, #0
    3a8c:	db11      	blt.n	3ab2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3a8e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3a92:	2300      	movs	r3, #0
    3a94:	4282      	cmp	r2, r0
    3a96:	eb73 0401 	sbcs.w	r4, r3, r1
    3a9a:	da00      	bge.n	3a9e <next_timeout+0x36>
    3a9c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3a9e:	4b07      	ldr	r3, [pc, #28]	; (3abc <next_timeout+0x54>)
    3aa0:	695b      	ldr	r3, [r3, #20]
    3aa2:	b113      	cbz	r3, 3aaa <next_timeout+0x42>
    3aa4:	4298      	cmp	r0, r3
    3aa6:	bfa8      	it	ge
    3aa8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3aaa:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3aac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3ab0:	e7f5      	b.n	3a9e <next_timeout+0x36>
    3ab2:	2000      	movs	r0, #0
    3ab4:	e7f3      	b.n	3a9e <next_timeout+0x36>
    3ab6:	bf00      	nop
    3ab8:	200000ac 	.word	0x200000ac
    3abc:	20000358 	.word	0x20000358

00003ac0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    3ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ac4:	9101      	str	r1, [sp, #4]
    3ac6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ac8:	1c4b      	adds	r3, r1, #1
    3aca:	bf08      	it	eq
    3acc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3ad0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ad2:	d06c      	beq.n	3bae <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    3ad4:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    3ad6:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    3ada:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    3ade:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    3ae2:	ebb3 0804 	subs.w	r8, r3, r4
    3ae6:	eb6b 0905 	sbc.w	r9, fp, r5
    3aea:	f1b8 0f00 	cmp.w	r8, #0
    3aee:	f179 0300 	sbcs.w	r3, r9, #0
    3af2:	db0f      	blt.n	3b14 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    3af4:	f7ff ff94 	bl	3a20 <elapsed>
    3af8:	4a33      	ldr	r2, [pc, #204]	; (3bc8 <z_add_timeout+0x108>)
    3afa:	e9d2 1c00 	ldrd	r1, ip, [r2]
    3afe:	f06f 0301 	mvn.w	r3, #1
    3b02:	1a5b      	subs	r3, r3, r1
    3b04:	eb6b 020c 	sbc.w	r2, fp, ip
    3b08:	1b1e      	subs	r6, r3, r4
    3b0a:	eb62 0705 	sbc.w	r7, r2, r5
    3b0e:	1a34      	subs	r4, r6, r0
    3b10:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3b14:	9b01      	ldr	r3, [sp, #4]
    3b16:	f8ca 3008 	str.w	r3, [sl, #8]
    3b1a:	f04f 0320 	mov.w	r3, #32
    3b1e:	f3ef 8611 	mrs	r6, BASEPRI
    3b22:	f383 8811 	msr	BASEPRI, r3
    3b26:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    3b2a:	f7ff ff79 	bl	3a20 <elapsed>
	ticks = MAX(1, ticks);
    3b2e:	2c01      	cmp	r4, #1
    3b30:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    3b34:	4b25      	ldr	r3, [pc, #148]	; (3bcc <z_add_timeout+0x10c>)
    3b36:	bfb8      	it	lt
    3b38:	2401      	movlt	r4, #1
    3b3a:	681a      	ldr	r2, [r3, #0]
    3b3c:	bfb8      	it	lt
    3b3e:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
    3b40:	1824      	adds	r4, r4, r0
    3b42:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b46:	429a      	cmp	r2, r3
    3b48:	e9ca 4504 	strd	r4, r5, [sl, #16]
    3b4c:	d001      	beq.n	3b52 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3b4e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    3b50:	b952      	cbnz	r2, 3b68 <z_add_timeout+0xa8>
	node->prev = list->tail;
    3b52:	685a      	ldr	r2, [r3, #4]
    3b54:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    3b58:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    3b5a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    3b5e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    3b62:	f8c3 a004 	str.w	sl, [r3, #4]
}
    3b66:	e014      	b.n	3b92 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
    3b68:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    3b6c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    3b70:	4544      	cmp	r4, r8
    3b72:	eb75 0109 	sbcs.w	r1, r5, r9
    3b76:	da1d      	bge.n	3bb4 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
    3b78:	ebb8 0004 	subs.w	r0, r8, r4
    3b7c:	eb69 0105 	sbc.w	r1, r9, r5
    3b80:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    3b84:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3b86:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    3b8a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    3b8e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    3b92:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b94:	429a      	cmp	r2, r3
    3b96:	d006      	beq.n	3ba6 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3b98:	4592      	cmp	sl, r2
    3b9a:	d104      	bne.n	3ba6 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
    3b9c:	f7ff ff64 	bl	3a68 <next_timeout>
    3ba0:	2100      	movs	r1, #0
    3ba2:	f7fd fda1 	bl	16e8 <z_clock_set_timeout>
	__asm__ volatile(
    3ba6:	f386 8811 	msr	BASEPRI, r6
    3baa:	f3bf 8f6f 	isb	sy
		}
	}
}
    3bae:	b003      	add	sp, #12
    3bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    3bb4:	ebb4 0008 	subs.w	r0, r4, r8
    3bb8:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    3bbc:	42ba      	cmp	r2, r7
    3bbe:	e9ca 0104 	strd	r0, r1, [sl, #16]
    3bc2:	d0c6      	beq.n	3b52 <z_add_timeout+0x92>
    3bc4:	6812      	ldr	r2, [r2, #0]
    3bc6:	e7c3      	b.n	3b50 <z_add_timeout+0x90>
    3bc8:	20000208 	.word	0x20000208
    3bcc:	200000ac 	.word	0x200000ac

00003bd0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    3bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bd4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3bd6:	f7ff fc3b 	bl	3450 <z_time_slice>
	__asm__ volatile(
    3bda:	f04f 0320 	mov.w	r3, #32
    3bde:	f3ef 8411 	mrs	r4, BASEPRI
    3be2:	f383 8811 	msr	BASEPRI, r3
    3be6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3bea:	4d2c      	ldr	r5, [pc, #176]	; (3c9c <z_clock_announce+0xcc>)
    3bec:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3ca0 <z_clock_announce+0xd0>
	return list->head == list;
    3bf0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 3ca4 <z_clock_announce+0xd4>
    3bf4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    3bf6:	4651      	mov	r1, sl
    3bf8:	f8d5 c000 	ldr.w	ip, [r5]
    3bfc:	f8db 0000 	ldr.w	r0, [fp]
    3c00:	4662      	mov	r2, ip
    3c02:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c04:	4558      	cmp	r0, fp
    3c06:	e9da 8900 	ldrd	r8, r9, [sl]
    3c0a:	e9cd 2300 	strd	r2, r3, [sp]
    3c0e:	d00d      	beq.n	3c2c <z_clock_announce+0x5c>
    3c10:	b160      	cbz	r0, 3c2c <z_clock_announce+0x5c>
    3c12:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    3c16:	45b4      	cmp	ip, r6
    3c18:	41bb      	sbcs	r3, r7
    3c1a:	da1e      	bge.n	3c5a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3c1c:	9b00      	ldr	r3, [sp, #0]
    3c1e:	ebb6 0c03 	subs.w	ip, r6, r3
    3c22:	9b01      	ldr	r3, [sp, #4]
    3c24:	eb67 0603 	sbc.w	r6, r7, r3
    3c28:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    3c2c:	9b00      	ldr	r3, [sp, #0]
    3c2e:	eb13 0208 	adds.w	r2, r3, r8
    3c32:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    3c34:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    3c38:	eb43 0309 	adc.w	r3, r3, r9
    3c3c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    3c40:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    3c42:	f7ff ff11 	bl	3a68 <next_timeout>
    3c46:	4631      	mov	r1, r6
    3c48:	f7fd fd4e 	bl	16e8 <z_clock_set_timeout>
	__asm__ volatile(
    3c4c:	f384 8811 	msr	BASEPRI, r4
    3c50:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3c54:	b003      	add	sp, #12
    3c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    3c5a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    3c5e:	f04f 0200 	mov.w	r2, #0
    3c62:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    3c66:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    3c6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    3c6e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    3c72:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    3c76:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    3c78:	f7ff fedc 	bl	3a34 <remove_timeout>
    3c7c:	f384 8811 	msr	BASEPRI, r4
    3c80:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3c84:	6883      	ldr	r3, [r0, #8]
    3c86:	4798      	blx	r3
	__asm__ volatile(
    3c88:	f04f 0320 	mov.w	r3, #32
    3c8c:	f3ef 8411 	mrs	r4, BASEPRI
    3c90:	f383 8811 	msr	BASEPRI, r3
    3c94:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    3c98:	4901      	ldr	r1, [pc, #4]	; (3ca0 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3c9a:	e7ad      	b.n	3bf8 <z_clock_announce+0x28>
    3c9c:	20000398 	.word	0x20000398
    3ca0:	20000208 	.word	0x20000208
    3ca4:	200000ac 	.word	0x200000ac

00003ca8 <z_tick_get>:

int64_t z_tick_get(void)
{
    3ca8:	b510      	push	{r4, lr}
    3caa:	f04f 0320 	mov.w	r3, #32
    3cae:	f3ef 8411 	mrs	r4, BASEPRI
    3cb2:	f383 8811 	msr	BASEPRI, r3
    3cb6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    3cba:	f7fd fd7b 	bl	17b4 <z_clock_elapsed>
    3cbe:	4b06      	ldr	r3, [pc, #24]	; (3cd8 <z_tick_get+0x30>)
    3cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cc4:	1812      	adds	r2, r2, r0
    3cc6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    3cca:	f384 8811 	msr	BASEPRI, r4
    3cce:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3cd2:	4610      	mov	r0, r2
    3cd4:	4619      	mov	r1, r3
    3cd6:	bd10      	pop	{r4, pc}
    3cd8:	20000208 	.word	0x20000208

00003cdc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    3cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    3cde:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    3ce2:	1c56      	adds	r6, r2, #1
    3ce4:	f143 0700 	adc.w	r7, r3, #0
    3ce8:	2f00      	cmp	r7, #0
    3cea:	bf08      	it	eq
    3cec:	2e02      	cmpeq	r6, #2
{
    3cee:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    3cf0:	d302      	bcc.n	3cf8 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3cf2:	490c      	ldr	r1, [pc, #48]	; (3d24 <z_timer_expiration_handler+0x48>)
    3cf4:	f7ff fee4 	bl	3ac0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    3cf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3cfa:	3301      	adds	r3, #1
    3cfc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    3cfe:	6a23      	ldr	r3, [r4, #32]
    3d00:	b10b      	cbz	r3, 3d06 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    3d02:	4620      	mov	r0, r4
    3d04:	4798      	blx	r3
	return list->head == list;
    3d06:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d0a:	42a5      	cmp	r5, r4
    3d0c:	d008      	beq.n	3d20 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    3d0e:	b13d      	cbz	r5, 3d20 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    3d10:	4628      	mov	r0, r5
    3d12:	f000 fcba 	bl	468a <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    3d16:	4628      	mov	r0, r5
    3d18:	f000 fcf3 	bl	4702 <z_ready_thread>
    3d1c:	2300      	movs	r3, #0
    3d1e:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
    3d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d22:	bf00      	nop
    3d24:	00003cdd 	.word	0x00003cdd

00003d28 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    3d28:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    3d2c:	4619      	mov	r1, r3
    3d2e:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    3d30:	1c4c      	adds	r4, r1, #1
{
    3d32:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    3d34:	bf08      	it	eq
    3d36:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    3d3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    3d3e:	4680      	mov	r8, r0
    3d40:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    3d42:	d047      	beq.n	3dd4 <z_impl_k_timer_start+0xac>
    3d44:	4614      	mov	r4, r2
    3d46:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    3d48:	ea54 0305 	orrs.w	r3, r4, r5
    3d4c:	d016      	beq.n	3d7c <z_impl_k_timer_start+0x54>
    3d4e:	f06f 0301 	mvn.w	r3, #1
    3d52:	ebb3 0a02 	subs.w	sl, r3, r2
    3d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d5a:	eb63 0b05 	sbc.w	fp, r3, r5
    3d5e:	f1ba 0f00 	cmp.w	sl, #0
    3d62:	f17b 0300 	sbcs.w	r3, fp, #0
    3d66:	da09      	bge.n	3d7c <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
    3d68:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
    3d6c:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    3d70:	2c01      	cmp	r4, #1
    3d72:	f175 0300 	sbcs.w	r3, r5, #0
    3d76:	bfbc      	itt	lt
    3d78:	2401      	movlt	r4, #1
    3d7a:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    3d7c:	f06f 0301 	mvn.w	r3, #1
    3d80:	1a1b      	subs	r3, r3, r0
    3d82:	9300      	str	r3, [sp, #0]
    3d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d88:	eb63 0301 	sbc.w	r3, r3, r1
    3d8c:	9301      	str	r3, [sp, #4]
    3d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
    3d92:	2a00      	cmp	r2, #0
    3d94:	f173 0300 	sbcs.w	r3, r3, #0
    3d98:	da0c      	bge.n	3db4 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
    3d9a:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
    3d9e:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
    3da2:	f1b8 0f00 	cmp.w	r8, #0
    3da6:	f179 0300 	sbcs.w	r3, r9, #0
    3daa:	bfbc      	itt	lt
    3dac:	f04f 0800 	movlt.w	r8, #0
    3db0:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
    3db4:	4630      	mov	r0, r6
    3db6:	f000 fd2e 	bl	4816 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    3dba:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3dbc:	4907      	ldr	r1, [pc, #28]	; (3ddc <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
    3dbe:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3dc0:	4642      	mov	r2, r8
    3dc2:	464b      	mov	r3, r9
    3dc4:	4630      	mov	r0, r6
	timer->period = period;
    3dc6:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    3dca:	b002      	add	sp, #8
    3dcc:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3dd0:	f7ff be76 	b.w	3ac0 <z_add_timeout>
}
    3dd4:	b002      	add	sp, #8
    3dd6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    3dda:	bf00      	nop
    3ddc:	00003cdd 	.word	0x00003cdd

00003de0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    3de0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3de2:	4c06      	ldr	r4, [pc, #24]	; (3dfc <statics_init+0x1c>)
    3de4:	4d06      	ldr	r5, [pc, #24]	; (3e00 <statics_init+0x20>)
    3de6:	42ac      	cmp	r4, r5
    3de8:	d301      	bcc.n	3dee <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    3dea:	2000      	movs	r0, #0
    3dec:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    3dee:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    3df2:	4620      	mov	r0, r4
    3df4:	f000 fd75 	bl	48e2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3df8:	3414      	adds	r4, #20
    3dfa:	e7f4      	b.n	3de6 <statics_init+0x6>
    3dfc:	20000108 	.word	0x20000108
    3e00:	20000108 	.word	0x20000108

00003e04 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3e04:	4603      	mov	r3, r0
    3e06:	b158      	cbz	r0, 3e20 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3e08:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3e0a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3e0e:	2a01      	cmp	r2, #1
    3e10:	d003      	beq.n	3e1a <sys_notify_validate+0x16>
    3e12:	2a03      	cmp	r2, #3
    3e14:	d104      	bne.n	3e20 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3e16:	6802      	ldr	r2, [r0, #0]
    3e18:	b112      	cbz	r2, 3e20 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3e1a:	2000      	movs	r0, #0
    3e1c:	6098      	str	r0, [r3, #8]
    3e1e:	4770      	bx	lr
		return -EINVAL;
    3e20:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3e24:	4770      	bx	lr

00003e26 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3e26:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3e28:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    3e2a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    3e2e:	2a03      	cmp	r2, #3
    3e30:	f04f 0200 	mov.w	r2, #0
{
    3e34:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3e36:	bf0c      	ite	eq
    3e38:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    3e3a:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3e3c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3e3e:	4770      	bx	lr

00003e40 <arch_printk_char_out>:
}
    3e40:	2000      	movs	r0, #0
    3e42:	4770      	bx	lr

00003e44 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    3e44:	b40f      	push	{r0, r1, r2, r3}
    3e46:	b507      	push	{r0, r1, r2, lr}
    3e48:	a904      	add	r1, sp, #16
    3e4a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3e4e:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    3e50:	f7fc fdda 	bl	a08 <vprintk>
	}
	va_end(ap);
}
    3e54:	b003      	add	sp, #12
    3e56:	f85d eb04 	ldr.w	lr, [sp], #4
    3e5a:	b004      	add	sp, #16
    3e5c:	4770      	bx	lr

00003e5e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e5e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3e60:	f013 0307 	ands.w	r3, r3, #7
    3e64:	d105      	bne.n	3e72 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3e66:	6803      	ldr	r3, [r0, #0]
    3e68:	2b00      	cmp	r3, #0
		evt = EVT_START;
    3e6a:	bf0c      	ite	eq
    3e6c:	2000      	moveq	r0, #0
    3e6e:	2003      	movne	r0, #3
    3e70:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3e72:	2b02      	cmp	r3, #2
    3e74:	d105      	bne.n	3e82 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3e76:	8b43      	ldrh	r3, [r0, #26]
    3e78:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    3e7a:	bf14      	ite	ne
    3e7c:	2000      	movne	r0, #0
    3e7e:	2004      	moveq	r0, #4
    3e80:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3e82:	2b01      	cmp	r3, #1
    3e84:	d105      	bne.n	3e92 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3e86:	6803      	ldr	r3, [r0, #0]
    3e88:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    3e8a:	bf0c      	ite	eq
    3e8c:	2000      	moveq	r0, #0
    3e8e:	2005      	movne	r0, #5
    3e90:	4770      	bx	lr
	int evt = EVT_NOP;
    3e92:	2000      	movs	r0, #0
}
    3e94:	4770      	bx	lr

00003e96 <notify_one>:
{
    3e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e9a:	460d      	mov	r5, r1
    3e9c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3e9e:	4619      	mov	r1, r3
    3ea0:	1d28      	adds	r0, r5, #4
{
    3ea2:	4690      	mov	r8, r2
    3ea4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3ea6:	f7ff ffbe 	bl	3e26 <sys_notify_finalize>
	if (cb) {
    3eaa:	4604      	mov	r4, r0
    3eac:	b138      	cbz	r0, 3ebe <notify_one+0x28>
		cb(mgr, cli, state, res);
    3eae:	4633      	mov	r3, r6
    3eb0:	4642      	mov	r2, r8
    3eb2:	4629      	mov	r1, r5
    3eb4:	4638      	mov	r0, r7
    3eb6:	46a4      	mov	ip, r4
}
    3eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    3ebc:	4760      	bx	ip
}
    3ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003ec2 <transition_complete>:
{
    3ec2:	b410      	push	{r4}
	__asm__ volatile(
    3ec4:	f04f 0420 	mov.w	r4, #32
    3ec8:	f3ef 8211 	mrs	r2, BASEPRI
    3ecc:	f384 8811 	msr	BASEPRI, r4
    3ed0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3ed4:	6141      	str	r1, [r0, #20]
}
    3ed6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3ed8:	2101      	movs	r1, #1
    3eda:	f7fc bda3 	b.w	a24 <process_event>

00003ede <validate_args>:
{
    3ede:	b510      	push	{r4, lr}
    3ee0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3ee2:	b140      	cbz	r0, 3ef6 <validate_args+0x18>
    3ee4:	b139      	cbz	r1, 3ef6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    3ee6:	1d08      	adds	r0, r1, #4
    3ee8:	f7ff ff8c 	bl	3e04 <sys_notify_validate>
	if ((rv == 0)
    3eec:	b928      	cbnz	r0, 3efa <validate_args+0x1c>
	    && ((cli->notify.flags
    3eee:	68a3      	ldr	r3, [r4, #8]
    3ef0:	f033 0303 	bics.w	r3, r3, #3
    3ef4:	d001      	beq.n	3efa <validate_args+0x1c>
		rv = -EINVAL;
    3ef6:	f06f 0015 	mvn.w	r0, #21
}
    3efa:	bd10      	pop	{r4, pc}

00003efc <onoff_manager_init>:
{
    3efc:	b538      	push	{r3, r4, r5, lr}
    3efe:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3f00:	4605      	mov	r5, r0
    3f02:	b158      	cbz	r0, 3f1c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3f04:	b151      	cbz	r1, 3f1c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3f06:	680b      	ldr	r3, [r1, #0]
    3f08:	b143      	cbz	r3, 3f1c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3f0a:	684b      	ldr	r3, [r1, #4]
    3f0c:	b133      	cbz	r3, 3f1c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3f0e:	221c      	movs	r2, #28
    3f10:	2100      	movs	r1, #0
    3f12:	f000 fa8a 	bl	442a <memset>
    3f16:	612c      	str	r4, [r5, #16]
	return 0;
    3f18:	2000      	movs	r0, #0
}
    3f1a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3f1c:	f06f 0015 	mvn.w	r0, #21
    3f20:	e7fb      	b.n	3f1a <onoff_manager_init+0x1e>

00003f22 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3f22:	b570      	push	{r4, r5, r6, lr}
    3f24:	4604      	mov	r4, r0
    3f26:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3f28:	f7ff ffd9 	bl	3ede <validate_args>

	if (rv < 0) {
    3f2c:	1e05      	subs	r5, r0, #0
    3f2e:	db31      	blt.n	3f94 <onoff_request+0x72>
    3f30:	f04f 0320 	mov.w	r3, #32
    3f34:	f3ef 8111 	mrs	r1, BASEPRI
    3f38:	f383 8811 	msr	BASEPRI, r3
    3f3c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3f40:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3f42:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3f44:	f64f 75ff 	movw	r5, #65535	; 0xffff
    3f48:	42ab      	cmp	r3, r5
    3f4a:	f000 0207 	and.w	r2, r0, #7
    3f4e:	d02e      	beq.n	3fae <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3f50:	2a02      	cmp	r2, #2
    3f52:	d10e      	bne.n	3f72 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3f54:	3301      	adds	r3, #1
    3f56:	8363      	strh	r3, [r4, #26]
	rv = state;
    3f58:	4615      	mov	r5, r2
		notify = true;
    3f5a:	2301      	movs	r3, #1
	__asm__ volatile(
    3f5c:	f381 8811 	msr	BASEPRI, r1
    3f60:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3f64:	b1b3      	cbz	r3, 3f94 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    3f66:	2300      	movs	r3, #0
    3f68:	4631      	mov	r1, r6
    3f6a:	4620      	mov	r0, r4
    3f6c:	f7ff ff93 	bl	3e96 <notify_one>
    3f70:	e010      	b.n	3f94 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    3f72:	0783      	lsls	r3, r0, #30
    3f74:	d001      	beq.n	3f7a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    3f76:	2a06      	cmp	r2, #6
    3f78:	d10e      	bne.n	3f98 <onoff_request+0x76>
	parent->next = child;
    3f7a:	2300      	movs	r3, #0
    3f7c:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    3f7e:	6863      	ldr	r3, [r4, #4]
    3f80:	b993      	cbnz	r3, 3fa8 <onoff_request+0x86>
	list->head = node;
    3f82:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    3f86:	4615      	mov	r5, r2
    3f88:	b962      	cbnz	r2, 3fa4 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    3f8a:	460a      	mov	r2, r1
    3f8c:	4620      	mov	r0, r4
    3f8e:	2102      	movs	r1, #2
    3f90:	f7fc fd48 	bl	a24 <process_event>
		}
	}

	return rv;
}
    3f94:	4628      	mov	r0, r5
    3f96:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    3f98:	2a05      	cmp	r2, #5
    3f9a:	bf0c      	ite	eq
    3f9c:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    3fa0:	f06f 0504 	mvnne.w	r5, #4
    3fa4:	2300      	movs	r3, #0
    3fa6:	e7d9      	b.n	3f5c <onoff_request+0x3a>
	parent->next = child;
    3fa8:	601e      	str	r6, [r3, #0]
	list->tail = node;
    3faa:	6066      	str	r6, [r4, #4]
}
    3fac:	e7eb      	b.n	3f86 <onoff_request+0x64>
		rv = -EAGAIN;
    3fae:	f06f 050a 	mvn.w	r5, #10
    3fb2:	e7f7      	b.n	3fa4 <onoff_request+0x82>

00003fb4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3fb4:	4604      	mov	r4, r0
    3fb6:	b508      	push	{r3, lr}
    3fb8:	4608      	mov	r0, r1
    3fba:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3fbc:	461a      	mov	r2, r3
    3fbe:	47a0      	blx	r4
	return z_impl_k_current_get();
    3fc0:	f7ff fc3a 	bl	3838 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3fc4:	f7fd fe9a 	bl	1cfc <z_impl_k_thread_abort>

00003fc8 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    3fc8:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    3fca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    3fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    3fd2:	bf2c      	ite	cs
    3fd4:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    3fd8:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    3fdc:	4770      	bx	lr

00003fde <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    3fde:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    3fe2:	6880      	ldr	r0, [r0, #8]
    3fe4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    3fe8:	bf2c      	ite	cs
    3fea:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    3fee:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    3ff2:	4770      	bx	lr

00003ff4 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    3ff4:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    3ff6:	2201      	movs	r2, #1
    3ff8:	f7ff ffe6 	bl	3fc8 <chunk_field>
}
    3ffc:	0840      	lsrs	r0, r0, #1
    3ffe:	bd08      	pop	{r3, pc}

00004000 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4000:	6883      	ldr	r3, [r0, #8]
    4002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    4006:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    400a:	d308      	bcc.n	401e <set_chunk_used+0x1e>
		if (used) {
    400c:	684b      	ldr	r3, [r1, #4]
    400e:	b11a      	cbz	r2, 4018 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4010:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4014:	604b      	str	r3, [r1, #4]
    4016:	4770      	bx	lr
    4018:	f023 0301 	bic.w	r3, r3, #1
    401c:	e7fa      	b.n	4014 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    401e:	884b      	ldrh	r3, [r1, #2]
    4020:	b11a      	cbz	r2, 402a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4022:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4026:	804b      	strh	r3, [r1, #2]
		}
	}
}
    4028:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    402a:	f023 0301 	bic.w	r3, r3, #1
    402e:	e7fa      	b.n	4026 <set_chunk_used+0x26>

00004030 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4030:	0053      	lsls	r3, r2, #1
    4032:	2201      	movs	r2, #1
    4034:	f7ff bfd3 	b.w	3fde <chunk_set>

00004038 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    4038:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    403a:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    403c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    4040:	bf2c      	ite	cs
    4042:	2002      	movcs	r0, #2
    4044:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    4046:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    4048:	fab0 f080 	clz	r0, r0
}
    404c:	f1c0 001f 	rsb	r0, r0, #31
    4050:	4770      	bx	lr

00004052 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    4052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4056:	4604      	mov	r4, r0
    4058:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    405a:	f7ff ffcb 	bl	3ff4 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    405e:	68a3      	ldr	r3, [r4, #8]
    4060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4064:	4601      	mov	r1, r0
    4066:	d301      	bcc.n	406c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    4068:	2801      	cmp	r0, #1
    406a:	d035      	beq.n	40d8 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    406c:	4620      	mov	r0, r4
    406e:	f7ff ffe3 	bl	4038 <bucket_idx>
	if (b->next == 0U) {
    4072:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    4076:	6916      	ldr	r6, [r2, #16]
    4078:	b99e      	cbnz	r6, 40a2 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    407a:	2301      	movs	r3, #1
    407c:	fa03 f000 	lsl.w	r0, r3, r0
    4080:	68e3      	ldr	r3, [r4, #12]
    4082:	4303      	orrs	r3, r0
    4084:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    4086:	4629      	mov	r1, r5
		b->next = c;
    4088:	6115      	str	r5, [r2, #16]
    408a:	462b      	mov	r3, r5
    408c:	2202      	movs	r2, #2
    408e:	4620      	mov	r0, r4
    4090:	f7ff ffa5 	bl	3fde <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4094:	2203      	movs	r2, #3
    4096:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    4098:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    409a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    409e:	f7ff bf9e 	b.w	3fde <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    40a2:	2202      	movs	r2, #2
    40a4:	4631      	mov	r1, r6
    40a6:	4620      	mov	r0, r4
    40a8:	f7ff ff8e 	bl	3fc8 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    40ac:	2202      	movs	r2, #2
    40ae:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    40b0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    40b2:	4629      	mov	r1, r5
    40b4:	4620      	mov	r0, r4
    40b6:	f7ff ff92 	bl	3fde <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    40ba:	4633      	mov	r3, r6
    40bc:	2203      	movs	r2, #3
    40be:	4629      	mov	r1, r5
    40c0:	4620      	mov	r0, r4
    40c2:	f7ff ff8c 	bl	3fde <chunk_set>
    40c6:	2203      	movs	r2, #3
    40c8:	4639      	mov	r1, r7
    40ca:	462b      	mov	r3, r5
    40cc:	4620      	mov	r0, r4
    40ce:	f7ff ff86 	bl	3fde <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    40d2:	2202      	movs	r2, #2
    40d4:	4631      	mov	r1, r6
    40d6:	e7df      	b.n	4098 <free_list_add+0x46>
    40d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000040dc <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    40dc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    40e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40e2:	bf2c      	ite	cs
    40e4:	2508      	movcs	r5, #8
    40e6:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    40e8:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    40ea:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    40ec:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    40ee:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    40f2:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    40f6:	2200      	movs	r2, #0
    40f8:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    40fa:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
    40fc:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    40fe:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
    4100:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    4104:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4106:	4629      	mov	r1, r5
	h->len = buf_sz;
    4108:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    410a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    410c:	4620      	mov	r0, r4
    410e:	f7ff ff93 	bl	4038 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    4112:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4114:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4116:	1c41      	adds	r1, r0, #1
    4118:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    411a:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    411e:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    4120:	428b      	cmp	r3, r1
    4122:	db29      	blt.n	4178 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    4124:	4632      	mov	r2, r6
    4126:	4620      	mov	r0, r4
    4128:	2100      	movs	r1, #0
    412a:	f7ff ff81 	bl	4030 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    412e:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    4130:	4620      	mov	r0, r4
    4132:	2201      	movs	r2, #1
    4134:	2100      	movs	r1, #0
    4136:	f7ff ff63 	bl	4000 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    413a:	463a      	mov	r2, r7
    413c:	4631      	mov	r1, r6
    413e:	f7ff ff77 	bl	4030 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    4142:	4633      	mov	r3, r6
    4144:	4631      	mov	r1, r6
    4146:	4620      	mov	r0, r4
    4148:	2200      	movs	r2, #0
    414a:	f7ff ff48 	bl	3fde <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    414e:	4629      	mov	r1, r5
    4150:	4620      	mov	r0, r4
    4152:	2200      	movs	r2, #0
    4154:	f7ff ff6c 	bl	4030 <set_chunk_size>
    4158:	463b      	mov	r3, r7
    415a:	4629      	mov	r1, r5
    415c:	4620      	mov	r0, r4
    415e:	2200      	movs	r2, #0
    4160:	f7ff ff3d 	bl	3fde <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    4164:	4629      	mov	r1, r5
    4166:	4620      	mov	r0, r4
    4168:	2201      	movs	r2, #1
    416a:	f7ff ff49 	bl	4000 <set_chunk_used>

	free_list_add(h, chunk0_size);
    416e:	4631      	mov	r1, r6
}
    4170:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    4174:	f7ff bf6d 	b.w	4052 <free_list_add>
		h->buckets[i].next = 0;
    4178:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    417c:	3301      	adds	r3, #1
    417e:	e7cf      	b.n	4120 <sys_heap_init+0x44>

00004180 <encode_uint>:
{
    4180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4184:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    4186:	78d3      	ldrb	r3, [r2, #3]
{
    4188:	4614      	mov	r4, r2
	switch (specifier) {
    418a:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    418c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    4190:	4606      	mov	r6, r0
    4192:	460f      	mov	r7, r1
    4194:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    4196:	d02d      	beq.n	41f4 <encode_uint+0x74>
    4198:	d828      	bhi.n	41ec <encode_uint+0x6c>
		return 16;
    419a:	2b58      	cmp	r3, #88	; 0x58
    419c:	bf14      	ite	ne
    419e:	250a      	movne	r5, #10
    41a0:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    41a2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    41a6:	46aa      	mov	sl, r5
    41a8:	f04f 0b00 	mov.w	fp, #0
    41ac:	4652      	mov	r2, sl
    41ae:	465b      	mov	r3, fp
    41b0:	4630      	mov	r0, r6
    41b2:	4639      	mov	r1, r7
    41b4:	f7fc fa16 	bl	5e4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    41b8:	2a09      	cmp	r2, #9
    41ba:	b2d3      	uxtb	r3, r2
    41bc:	d81f      	bhi.n	41fe <encode_uint+0x7e>
    41be:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    41c0:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    41c2:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    41c4:	bf08      	it	eq
    41c6:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    41c8:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    41cc:	d301      	bcc.n	41d2 <encode_uint+0x52>
    41ce:	45c8      	cmp	r8, r9
    41d0:	d812      	bhi.n	41f8 <encode_uint+0x78>
	if (conv->flag_hash) {
    41d2:	7823      	ldrb	r3, [r4, #0]
    41d4:	069b      	lsls	r3, r3, #26
    41d6:	d505      	bpl.n	41e4 <encode_uint+0x64>
		if (radix == 8) {
    41d8:	2d08      	cmp	r5, #8
    41da:	d116      	bne.n	420a <encode_uint+0x8a>
			conv->altform_0 = true;
    41dc:	78a3      	ldrb	r3, [r4, #2]
    41de:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    41e2:	70a3      	strb	r3, [r4, #2]
}
    41e4:	4640      	mov	r0, r8
    41e6:	b003      	add	sp, #12
    41e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    41ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    41f0:	2b70      	cmp	r3, #112	; 0x70
    41f2:	e7d3      	b.n	419c <encode_uint+0x1c>
	switch (specifier) {
    41f4:	2508      	movs	r5, #8
    41f6:	e7d4      	b.n	41a2 <encode_uint+0x22>
		value /= radix;
    41f8:	4606      	mov	r6, r0
    41fa:	460f      	mov	r7, r1
    41fc:	e7d6      	b.n	41ac <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    41fe:	9a01      	ldr	r2, [sp, #4]
    4200:	2a19      	cmp	r2, #25
    4202:	bf94      	ite	ls
    4204:	3337      	addls	r3, #55	; 0x37
    4206:	3357      	addhi	r3, #87	; 0x57
    4208:	e7da      	b.n	41c0 <encode_uint+0x40>
		} else if (radix == 16) {
    420a:	2d10      	cmp	r5, #16
    420c:	d1ea      	bne.n	41e4 <encode_uint+0x64>
			conv->altform_0c = true;
    420e:	78a3      	ldrb	r3, [r4, #2]
    4210:	f043 0310 	orr.w	r3, r3, #16
    4214:	e7e5      	b.n	41e2 <encode_uint+0x62>

00004216 <outs>:
{
    4216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    421a:	4607      	mov	r7, r0
    421c:	4688      	mov	r8, r1
    421e:	4615      	mov	r5, r2
    4220:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4222:	4614      	mov	r4, r2
    4224:	42b4      	cmp	r4, r6
    4226:	eba4 0005 	sub.w	r0, r4, r5
    422a:	d302      	bcc.n	4232 <outs+0x1c>
    422c:	b93e      	cbnz	r6, 423e <outs+0x28>
    422e:	7823      	ldrb	r3, [r4, #0]
    4230:	b12b      	cbz	r3, 423e <outs+0x28>
		int rc = out((int)*sp++, ctx);
    4232:	f814 0b01 	ldrb.w	r0, [r4], #1
    4236:	4641      	mov	r1, r8
    4238:	47b8      	blx	r7
		if (rc < 0) {
    423a:	2800      	cmp	r0, #0
    423c:	daf2      	bge.n	4224 <outs+0xe>
}
    423e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004242 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4242:	4770      	bx	lr

00004244 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4244:	68c2      	ldr	r2, [r0, #12]
    4246:	b2cb      	uxtb	r3, r1
    4248:	210c      	movs	r1, #12
    424a:	fb03 2101 	mla	r1, r3, r1, r2
    424e:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    4250:	f000 0007 	and.w	r0, r0, #7
    4254:	4770      	bx	lr

00004256 <set_off_state>:
	__asm__ volatile(
    4256:	f04f 0320 	mov.w	r3, #32
    425a:	f3ef 8211 	mrs	r2, BASEPRI
    425e:	f383 8811 	msr	BASEPRI, r3
    4262:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4266:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4268:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    426c:	d001      	beq.n	4272 <set_off_state+0x1c>
    426e:	428b      	cmp	r3, r1
    4270:	d107      	bne.n	4282 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4272:	2301      	movs	r3, #1
    4274:	6003      	str	r3, [r0, #0]
	int err = 0;
    4276:	2000      	movs	r0, #0
	__asm__ volatile(
    4278:	f382 8811 	msr	BASEPRI, r2
    427c:	f3bf 8f6f 	isb	sy
}
    4280:	4770      	bx	lr
		err = -EPERM;
    4282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4286:	e7f7      	b.n	4278 <set_off_state+0x22>

00004288 <set_starting_state>:
{
    4288:	b510      	push	{r4, lr}
	__asm__ volatile(
    428a:	f04f 0320 	mov.w	r3, #32
    428e:	f3ef 8211 	mrs	r2, BASEPRI
    4292:	f383 8811 	msr	BASEPRI, r3
    4296:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    429a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    429c:	f003 0407 	and.w	r4, r3, #7
    42a0:	2c01      	cmp	r4, #1
    42a2:	d106      	bne.n	42b2 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    42a4:	6001      	str	r1, [r0, #0]
	int err = 0;
    42a6:	2000      	movs	r0, #0
	__asm__ volatile(
    42a8:	f382 8811 	msr	BASEPRI, r2
    42ac:	f3bf 8f6f 	isb	sy
}
    42b0:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    42b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    42b6:	428b      	cmp	r3, r1
		err = -EALREADY;
    42b8:	bf14      	ite	ne
    42ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    42be:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    42c2:	e7f1      	b.n	42a8 <set_starting_state+0x20>

000042c4 <set_on_state>:
	__asm__ volatile(
    42c4:	f04f 0320 	mov.w	r3, #32
    42c8:	f3ef 8211 	mrs	r2, BASEPRI
    42cc:	f383 8811 	msr	BASEPRI, r3
    42d0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    42d4:	6803      	ldr	r3, [r0, #0]
    42d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    42da:	f043 0302 	orr.w	r3, r3, #2
    42de:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    42e0:	f382 8811 	msr	BASEPRI, r2
    42e4:	f3bf 8f6f 	isb	sy
}
    42e8:	4770      	bx	lr

000042ea <onoff_started_callback>:
	return &data->mgr[type];
    42ea:	68c0      	ldr	r0, [r0, #12]
{
    42ec:	b410      	push	{r4}
	return &data->mgr[type];
    42ee:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    42f0:	241c      	movs	r4, #28
    42f2:	fb03 0004 	mla	r0, r3, r4, r0
    42f6:	2100      	movs	r1, #0
}
    42f8:	bc10      	pop	{r4}
	notify(mgr, 0);
    42fa:	4710      	bx	r2

000042fc <blocking_start_callback>:
{
    42fc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    42fe:	f7ff baa1 	b.w	3844 <z_impl_k_sem_give>

00004302 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4302:	2000      	movs	r0, #0
    4304:	f7fe bd38 	b.w	2d78 <nrfx_clock_stop>

00004308 <api_stop>:
{
    4308:	b538      	push	{r3, r4, r5, lr}
    430a:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    430c:	230c      	movs	r3, #12
{
    430e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    4310:	4363      	muls	r3, r4
    4312:	68c0      	ldr	r0, [r0, #12]
    4314:	3340      	adds	r3, #64	; 0x40
    4316:	2180      	movs	r1, #128	; 0x80
    4318:	4418      	add	r0, r3
    431a:	f7ff ff9c 	bl	4256 <set_off_state>
	if (err < 0) {
    431e:	2800      	cmp	r0, #0
    4320:	db05      	blt.n	432e <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    4322:	6869      	ldr	r1, [r5, #4]
    4324:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    4328:	6863      	ldr	r3, [r4, #4]
    432a:	4798      	blx	r3
	return 0;
    432c:	2000      	movs	r0, #0
}
    432e:	bd38      	pop	{r3, r4, r5, pc}

00004330 <api_start>:
{
    4330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4334:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    4336:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4338:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    433a:	436f      	muls	r7, r5
{
    433c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    433e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    4342:	2180      	movs	r1, #128	; 0x80
    4344:	4420      	add	r0, r4
{
    4346:	4690      	mov	r8, r2
    4348:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    434a:	f7ff ff9d 	bl	4288 <set_starting_state>
	if (err < 0) {
    434e:	2800      	cmp	r0, #0
    4350:	db07      	blt.n	4362 <api_start+0x32>
	subdata->cb = cb;
    4352:	443c      	add	r4, r7
	subdata->user_data = user_data;
    4354:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4358:	6873      	ldr	r3, [r6, #4]
    435a:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    435e:	4798      	blx	r3
	return 0;
    4360:	2000      	movs	r0, #0
}
    4362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004366 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4366:	4770      	bx	lr

00004368 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4368:	4770      	bx	lr

0000436a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    436a:	f7fd ba3d 	b.w	17e8 <_DoInit>

0000436e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    436e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    4370:	f7ff fffb 	bl	436a <SEGGER_RTT_Init>

	return 0;
}
    4374:	2000      	movs	r0, #0
    4376:	bd08      	pop	{r3, pc}

00004378 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4378:	2100      	movs	r1, #0
    437a:	2001      	movs	r0, #1
    437c:	f000 b800 	b.w	4380 <z_arm_fatal_error>

00004380 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4380:	f000 b956 	b.w	4630 <z_fatal_error>

00004384 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4384:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4386:	6800      	ldr	r0, [r0, #0]
    4388:	f000 b952 	b.w	4630 <z_fatal_error>

0000438c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    438c:	b508      	push	{r3, lr}
	handler();
    438e:	f7fd fb75 	bl	1a7c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4396:	f7fd bbb7 	b.w	1b08 <z_arm_exc_exit>

0000439a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    439a:	3901      	subs	r1, #1
    439c:	4603      	mov	r3, r0
    439e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    43a2:	b90a      	cbnz	r2, 43a8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    43a4:	701a      	strb	r2, [r3, #0]

	return dest;
}
    43a6:	4770      	bx	lr
		*d = *s;
    43a8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    43ac:	e7f7      	b.n	439e <strcpy+0x4>

000043ae <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    43ae:	4603      	mov	r3, r0
	size_t n = 0;
    43b0:	2000      	movs	r0, #0

	while (*s != '\0') {
    43b2:	5c1a      	ldrb	r2, [r3, r0]
    43b4:	b902      	cbnz	r2, 43b8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    43b6:	4770      	bx	lr
		n++;
    43b8:	3001      	adds	r0, #1
    43ba:	e7fa      	b.n	43b2 <strlen+0x4>

000043bc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    43bc:	1e43      	subs	r3, r0, #1
    43be:	3901      	subs	r1, #1
    43c0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    43c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    43c8:	4282      	cmp	r2, r0
    43ca:	d101      	bne.n	43d0 <strcmp+0x14>
    43cc:	2a00      	cmp	r2, #0
    43ce:	d1f7      	bne.n	43c0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    43d0:	1a10      	subs	r0, r2, r0
    43d2:	4770      	bx	lr

000043d4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    43d4:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    43d6:	ea81 0400 	eor.w	r4, r1, r0
    43da:	07a5      	lsls	r5, r4, #30
    43dc:	4603      	mov	r3, r0
    43de:	d00b      	beq.n	43f8 <memcpy+0x24>
    43e0:	3b01      	subs	r3, #1
    43e2:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    43e4:	4291      	cmp	r1, r2
    43e6:	d11b      	bne.n	4420 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    43e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    43ea:	2a00      	cmp	r2, #0
    43ec:	d0fc      	beq.n	43e8 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    43ee:	f811 4b01 	ldrb.w	r4, [r1], #1
    43f2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    43f6:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    43f8:	079c      	lsls	r4, r3, #30
    43fa:	d1f6      	bne.n	43ea <memcpy+0x16>
    43fc:	f022 0403 	bic.w	r4, r2, #3
    4400:	1f1d      	subs	r5, r3, #4
    4402:	0896      	lsrs	r6, r2, #2
    4404:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4406:	42b9      	cmp	r1, r7
    4408:	d105      	bne.n	4416 <memcpy+0x42>
    440a:	f06f 0503 	mvn.w	r5, #3
    440e:	fb05 2206 	mla	r2, r5, r6, r2
    4412:	4423      	add	r3, r4
    4414:	e7e4      	b.n	43e0 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4416:	f851 cb04 	ldr.w	ip, [r1], #4
    441a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    441e:	e7f2      	b.n	4406 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    4420:	f811 4b01 	ldrb.w	r4, [r1], #1
    4424:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4428:	e7dc      	b.n	43e4 <memcpy+0x10>

0000442a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    442a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    442c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    442e:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4430:	079c      	lsls	r4, r3, #30
    4432:	d111      	bne.n	4458 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4434:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4438:	f022 0603 	bic.w	r6, r2, #3
    443c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    4440:	441e      	add	r6, r3
    4442:	0894      	lsrs	r4, r2, #2
    4444:	42b3      	cmp	r3, r6
    4446:	d10d      	bne.n	4464 <memset+0x3a>
    4448:	f06f 0503 	mvn.w	r5, #3
    444c:	fb05 2204 	mla	r2, r5, r4, r2
    4450:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    4452:	4293      	cmp	r3, r2
    4454:	d109      	bne.n	446a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4456:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    4458:	2a00      	cmp	r2, #0
    445a:	d0fc      	beq.n	4456 <memset+0x2c>
		*(d_byte++) = c_byte;
    445c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4460:	3a01      	subs	r2, #1
    4462:	e7e5      	b.n	4430 <memset+0x6>
		*(d_word++) = c_word;
    4464:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    4468:	e7ec      	b.n	4444 <memset+0x1a>
		*(d_byte++) = c_byte;
    446a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    446e:	e7f0      	b.n	4452 <memset+0x28>

00004470 <_stdout_hook_default>:
}
    4470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4474:	4770      	bx	lr

00004476 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    4476:	f7fd bd3f 	b.w	1ef8 <z_impl_zephyr_fputc>

0000447a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    447a:	f7fe baff 	b.w	2a7c <SystemInit>

0000447e <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    447e:	f1a0 0308 	sub.w	r3, r0, #8
    4482:	f3bf 8f5b 	dmb	ish
    4486:	e853 2f00 	ldrex	r2, [r3]
    448a:	1c51      	adds	r1, r2, #1
    448c:	e843 1c00 	strex	ip, r1, [r3]
    4490:	f1bc 0f00 	cmp.w	ip, #0
    4494:	d1f7      	bne.n	4486 <adc_context_on_timer_expired+0x8>
    4496:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    449a:	b91a      	cbnz	r2, 44a4 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    449c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    44a0:	f7fd bd80 	b.w	1fa4 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    44a4:	f06f 030f 	mvn.w	r3, #15
    44a8:	6583      	str	r3, [r0, #88]	; 0x58
}
    44aa:	4770      	bx	lr

000044ac <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    44ac:	f000 001f 	and.w	r0, r0, #31
    44b0:	0080      	lsls	r0, r0, #2
    44b2:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    44b6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    44ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    44be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    44c2:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    44c6:	4770      	bx	lr

000044c8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    44c8:	6843      	ldr	r3, [r0, #4]
    44ca:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    44cc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    44d0:	600b      	str	r3, [r1, #0]
}
    44d2:	2000      	movs	r0, #0
    44d4:	4770      	bx	lr

000044d6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    44d6:	6843      	ldr	r3, [r0, #4]
    44d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    44da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    44de:	4042      	eors	r2, r0
    44e0:	400a      	ands	r2, r1
    44e2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    44e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    44e8:	2000      	movs	r0, #0
    44ea:	4770      	bx	lr

000044ec <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    44ec:	6843      	ldr	r3, [r0, #4]
    44ee:	685b      	ldr	r3, [r3, #4]
}
    44f0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    44f2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    44f6:	4770      	bx	lr

000044f8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    44f8:	6843      	ldr	r3, [r0, #4]
    44fa:	685b      	ldr	r3, [r3, #4]
}
    44fc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    44fe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4502:	4770      	bx	lr

00004504 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4504:	6843      	ldr	r3, [r0, #4]
    4506:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4508:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    450c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    450e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    4512:	2000      	movs	r0, #0
    4514:	4770      	bx	lr

00004516 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4516:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    4518:	6858      	ldr	r0, [r3, #4]
{
    451a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    451c:	b158      	cbz	r0, 4536 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    451e:	2400      	movs	r4, #0
    4520:	4281      	cmp	r1, r0
    4522:	d113      	bne.n	454c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    4524:	6808      	ldr	r0, [r1, #0]
    4526:	b95c      	cbnz	r4, 4540 <gpio_nrfx_manage_callback+0x2a>
    4528:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    452a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    452c:	42a1      	cmp	r1, r4
    452e:	d100      	bne.n	4532 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    4530:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4532:	2000      	movs	r0, #0
    4534:	6008      	str	r0, [r1, #0]
	if (set) {
    4536:	b972      	cbnz	r2, 4556 <gpio_nrfx_manage_callback+0x40>
	return 0;
    4538:	2000      	movs	r0, #0
}
    453a:	bd30      	pop	{r4, r5, pc}
    453c:	4628      	mov	r0, r5
    453e:	e7ef      	b.n	4520 <gpio_nrfx_manage_callback+0xa>
    4540:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4542:	6898      	ldr	r0, [r3, #8]
    4544:	4281      	cmp	r1, r0
	list->tail = node;
    4546:	bf08      	it	eq
    4548:	609c      	streq	r4, [r3, #8]
}
    454a:	e7f2      	b.n	4532 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    454c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    454e:	4604      	mov	r4, r0
    4550:	2d00      	cmp	r5, #0
    4552:	d1f3      	bne.n	453c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4554:	b13a      	cbz	r2, 4566 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    4556:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4558:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    455a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    455c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    455e:	2800      	cmp	r0, #0
    4560:	d1ea      	bne.n	4538 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4562:	6099      	str	r1, [r3, #8]
}
    4564:	e7e9      	b.n	453a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4566:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    456a:	e7e6      	b.n	453a <gpio_nrfx_manage_callback+0x24>

0000456c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    456c:	6843      	ldr	r3, [r0, #4]
    456e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    4570:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4574:	05d2      	lsls	r2, r2, #23
    4576:	d518      	bpl.n	45aa <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4578:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    457c:	b1aa      	cbz	r2, 45aa <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    457e:	f04f 0120 	mov.w	r1, #32
    4582:	f3ef 8211 	mrs	r2, BASEPRI
    4586:	f381 8811 	msr	BASEPRI, r1
    458a:	f3bf 8f6f 	isb	sy
    458e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4592:	b131      	cbz	r1, 45a2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4594:	2100      	movs	r1, #0
    4596:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    459a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    459e:	2101      	movs	r1, #1
    45a0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    45a2:	f382 8811 	msr	BASEPRI, r2
    45a6:	f3bf 8f6f 	isb	sy
}
    45aa:	4770      	bx	lr

000045ac <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    45ac:	68c2      	ldr	r2, [r0, #12]
{
    45ae:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    45b0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    45b4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    45b8:	2000      	movs	r0, #0
    45ba:	4770      	bx	lr

000045bc <uarte_nrfx_err_check>:
	return config->uarte_regs;
    45bc:	6843      	ldr	r3, [r0, #4]
    45be:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    45c0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    45c4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    45c8:	4770      	bx	lr

000045ca <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    45ca:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    45cc:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45ce:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    45d2:	b938      	cbnz	r0, 45e4 <is_tx_ready+0x1a>
    45d4:	7992      	ldrb	r2, [r2, #6]
    45d6:	b932      	cbnz	r2, 45e6 <is_tx_ready+0x1c>
    45d8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    45dc:	3800      	subs	r0, #0
    45de:	bf18      	it	ne
    45e0:	2001      	movne	r0, #1
    45e2:	4770      	bx	lr
    45e4:	2001      	movs	r0, #1
}
    45e6:	4770      	bx	lr

000045e8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    45e8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    45ea:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    45ec:	681b      	ldr	r3, [r3, #0]
    45ee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    45f2:	b148      	cbz	r0, 4608 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    45f4:	7b52      	ldrb	r2, [r2, #13]
    45f6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45f8:	2000      	movs	r0, #0
    45fa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    45fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4602:	2201      	movs	r2, #1
    4604:	601a      	str	r2, [r3, #0]
	return 0;
    4606:	4770      	bx	lr
		return -1;
    4608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    460c:	4770      	bx	lr

0000460e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    460e:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    4610:	2000      	movs	r0, #0
    4612:	f7fd fca7 	bl	1f64 <sys_arch_reboot>

00004616 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4616:	4700      	bx	r0

00004618 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4618:	f000 b8f9 	b.w	480e <z_impl_k_busy_wait>

0000461c <nrfx_clock_enable>:
{
    461c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    461e:	2000      	movs	r0, #0
    4620:	f7fd f93c 	bl	189c <arch_irq_is_enabled>
    4624:	b918      	cbnz	r0, 462e <nrfx_clock_enable+0x12>
}
    4626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    462a:	f7fd b927 	b.w	187c <arch_irq_enable>
    462e:	bd08      	pop	{r3, pc}

00004630 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4632:	4605      	mov	r5, r0
    4634:	460e      	mov	r6, r1
	__asm__ volatile(
    4636:	f04f 0320 	mov.w	r3, #32
    463a:	f3ef 8711 	mrs	r7, BASEPRI
    463e:	f383 8811 	msr	BASEPRI, r3
    4642:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4646:	f7ff f8f7 	bl	3838 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    464a:	4631      	mov	r1, r6
    464c:	4604      	mov	r4, r0
    464e:	4628      	mov	r0, r5
    4650:	f7ff ffdd 	bl	460e <k_sys_fatal_error_handler>
	__asm__ volatile(
    4654:	f387 8811 	msr	BASEPRI, r7
    4658:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    465c:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    465e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4662:	f7fd bb4b 	b.w	1cfc <z_impl_k_thread_abort>

00004666 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    4666:	f7ff be7f 	b.w	4368 <z_clock_idle_exit>

0000466a <z_find_first_thread_to_unpend>:
{
    466a:	b510      	push	{r4, lr}
	__asm__ volatile(
    466c:	f04f 0320 	mov.w	r3, #32
    4670:	f3ef 8411 	mrs	r4, BASEPRI
    4674:	f383 8811 	msr	BASEPRI, r3
    4678:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    467c:	f000 f837 	bl	46ee <z_priq_dumb_best>
	__asm__ volatile(
    4680:	f384 8811 	msr	BASEPRI, r4
    4684:	f3bf 8f6f 	isb	sy
}
    4688:	bd10      	pop	{r4, pc}

0000468a <z_unpend_thread_no_timeout>:
{
    468a:	b510      	push	{r4, lr}
	__asm__ volatile(
    468c:	f04f 0320 	mov.w	r3, #32
    4690:	f3ef 8411 	mrs	r4, BASEPRI
    4694:	f383 8811 	msr	BASEPRI, r3
    4698:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    469c:	f000 f81b 	bl	46d6 <unpend_thread_no_timeout>
	__asm__ volatile(
    46a0:	f384 8811 	msr	BASEPRI, r4
    46a4:	f3bf 8f6f 	isb	sy
}
    46a8:	bd10      	pop	{r4, pc}

000046aa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    46aa:	4603      	mov	r3, r0
    46ac:	b920      	cbnz	r0, 46b8 <z_reschedule_irqlock+0xe>
    46ae:	f3ef 8205 	mrs	r2, IPSR
    46b2:	b90a      	cbnz	r2, 46b8 <z_reschedule_irqlock+0xe>
    46b4:	f7fd b8c8 	b.w	1848 <arch_swap>
    46b8:	f383 8811 	msr	BASEPRI, r3
    46bc:	f3bf 8f6f 	isb	sy
}
    46c0:	4770      	bx	lr

000046c2 <z_reschedule_unlocked>:
	__asm__ volatile(
    46c2:	f04f 0320 	mov.w	r3, #32
    46c6:	f3ef 8011 	mrs	r0, BASEPRI
    46ca:	f383 8811 	msr	BASEPRI, r3
    46ce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    46d2:	f7ff bfea 	b.w	46aa <z_reschedule_irqlock>

000046d6 <unpend_thread_no_timeout>:
{
    46d6:	4601      	mov	r1, r0
    46d8:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    46da:	6880      	ldr	r0, [r0, #8]
    46dc:	f7fe fdce 	bl	327c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    46e0:	7b4b      	ldrb	r3, [r1, #13]
    46e2:	f023 0302 	bic.w	r3, r3, #2
    46e6:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    46e8:	2300      	movs	r3, #0
    46ea:	608b      	str	r3, [r1, #8]
}
    46ec:	bd08      	pop	{r3, pc}

000046ee <z_priq_dumb_best>:
{
    46ee:	4603      	mov	r3, r0
	return list->head == list;
    46f0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46f2:	4283      	cmp	r3, r0
    46f4:	d003      	beq.n	46fe <z_priq_dumb_best+0x10>
	if (n != NULL) {
    46f6:	2800      	cmp	r0, #0
    46f8:	bf38      	it	cc
    46fa:	2000      	movcc	r0, #0
    46fc:	4770      	bx	lr
	struct k_thread *thread = NULL;
    46fe:	2000      	movs	r0, #0
}
    4700:	4770      	bx	lr

00004702 <z_ready_thread>:
{
    4702:	b510      	push	{r4, lr}
    4704:	f04f 0320 	mov.w	r3, #32
    4708:	f3ef 8411 	mrs	r4, BASEPRI
    470c:	f383 8811 	msr	BASEPRI, r3
    4710:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    4714:	f7fe fe0c 	bl	3330 <ready_thread>
	__asm__ volatile(
    4718:	f384 8811 	msr	BASEPRI, r4
    471c:	f3bf 8f6f 	isb	sy
}
    4720:	bd10      	pop	{r4, pc}

00004722 <z_thread_timeout>:
{
    4722:	b570      	push	{r4, r5, r6, lr}
    4724:	4604      	mov	r4, r0
	__asm__ volatile(
    4726:	f04f 0320 	mov.w	r3, #32
    472a:	f3ef 8611 	mrs	r6, BASEPRI
    472e:	f383 8811 	msr	BASEPRI, r3
    4732:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    4736:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    473a:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    473e:	b113      	cbz	r3, 4746 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    4740:	4628      	mov	r0, r5
    4742:	f7ff ffc8 	bl	46d6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4746:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    474a:	f023 0314 	bic.w	r3, r3, #20
    474e:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
    4752:	4628      	mov	r0, r5
    4754:	f7fe fdec 	bl	3330 <ready_thread>
	__asm__ volatile(
    4758:	f386 8811 	msr	BASEPRI, r6
    475c:	f3bf 8f6f 	isb	sy
}
    4760:	bd70      	pop	{r4, r5, r6, pc}

00004762 <add_to_waitq_locked>:
{
    4762:	b538      	push	{r3, r4, r5, lr}
    4764:	4604      	mov	r4, r0
    4766:	460d      	mov	r5, r1
	unready_thread(thread);
    4768:	f7fe ff6a 	bl	3640 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    476c:	7b63      	ldrb	r3, [r4, #13]
    476e:	f043 0302 	orr.w	r3, r3, #2
    4772:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4774:	b1c5      	cbz	r5, 47a8 <add_to_waitq_locked+0x46>
	return list->head == list;
    4776:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4778:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    477a:	429d      	cmp	r5, r3
    477c:	bf08      	it	eq
    477e:	2300      	moveq	r3, #0
    4780:	2b00      	cmp	r3, #0
    4782:	bf38      	it	cc
    4784:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4786:	b183      	cbz	r3, 47aa <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    4788:	f994 100e 	ldrsb.w	r1, [r4, #14]
    478c:	f993 200e 	ldrsb.w	r2, [r3, #14]
    4790:	4291      	cmp	r1, r2
    4792:	db04      	blt.n	479e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    4794:	686a      	ldr	r2, [r5, #4]
    4796:	429a      	cmp	r2, r3
    4798:	d007      	beq.n	47aa <add_to_waitq_locked+0x48>
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	e7f3      	b.n	4786 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    479e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    47a0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    47a4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    47a6:	605c      	str	r4, [r3, #4]
}
    47a8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    47aa:	686b      	ldr	r3, [r5, #4]
    47ac:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    47ae:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    47b0:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    47b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    47b4:	606c      	str	r4, [r5, #4]
    47b6:	e7f7      	b.n	47a8 <add_to_waitq_locked+0x46>

000047b8 <z_unpend_first_thread>:
{
    47b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    47ba:	f04f 0320 	mov.w	r3, #32
    47be:	f3ef 8211 	mrs	r2, BASEPRI
    47c2:	f383 8811 	msr	BASEPRI, r3
    47c6:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    47ca:	f7ff ff90 	bl	46ee <z_priq_dumb_best>
    47ce:	4604      	mov	r4, r0
	__asm__ volatile(
    47d0:	f382 8811 	msr	BASEPRI, r2
    47d4:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    47d8:	b188      	cbz	r0, 47fe <z_unpend_first_thread+0x46>
	__asm__ volatile(
    47da:	f04f 0320 	mov.w	r3, #32
    47de:	f3ef 8511 	mrs	r5, BASEPRI
    47e2:	f383 8811 	msr	BASEPRI, r3
    47e6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    47ea:	f7ff ff74 	bl	46d6 <unpend_thread_no_timeout>
	__asm__ volatile(
    47ee:	f385 8811 	msr	BASEPRI, r5
    47f2:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    47f6:	f104 0018 	add.w	r0, r4, #24
    47fa:	f000 f80c 	bl	4816 <z_abort_timeout>
}
    47fe:	4620      	mov	r0, r4
    4800:	bd38      	pop	{r3, r4, r5, pc}

00004802 <k_is_in_isr>:
    4802:	f3ef 8005 	mrs	r0, IPSR
}
    4806:	3800      	subs	r0, #0
    4808:	bf18      	it	ne
    480a:	2001      	movne	r0, #1
    480c:	4770      	bx	lr

0000480e <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    480e:	b108      	cbz	r0, 4814 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    4810:	f7fd bbbe 	b.w	1f90 <arch_busy_wait>
}
    4814:	4770      	bx	lr

00004816 <z_abort_timeout>:
{
    4816:	b510      	push	{r4, lr}
	__asm__ volatile(
    4818:	f04f 0220 	mov.w	r2, #32
    481c:	f3ef 8411 	mrs	r4, BASEPRI
    4820:	f382 8811 	msr	BASEPRI, r2
    4824:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4828:	6803      	ldr	r3, [r0, #0]
    482a:	b13b      	cbz	r3, 483c <z_abort_timeout+0x26>
			remove_timeout(to);
    482c:	f7ff f902 	bl	3a34 <remove_timeout>
			ret = 0;
    4830:	2000      	movs	r0, #0
	__asm__ volatile(
    4832:	f384 8811 	msr	BASEPRI, r4
    4836:	f3bf 8f6f 	isb	sy
}
    483a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    483c:	f06f 0015 	mvn.w	r0, #21
    4840:	e7f7      	b.n	4832 <z_abort_timeout+0x1c>

00004842 <z_get_next_timeout_expiry>:
{
    4842:	b510      	push	{r4, lr}
	__asm__ volatile(
    4844:	f04f 0320 	mov.w	r3, #32
    4848:	f3ef 8411 	mrs	r4, BASEPRI
    484c:	f383 8811 	msr	BASEPRI, r3
    4850:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4854:	f7ff f908 	bl	3a68 <next_timeout>
	__asm__ volatile(
    4858:	f384 8811 	msr	BASEPRI, r4
    485c:	f3bf 8f6f 	isb	sy
}
    4860:	bd10      	pop	{r4, pc}

00004862 <z_set_timeout_expiry>:
{
    4862:	b570      	push	{r4, r5, r6, lr}
    4864:	4604      	mov	r4, r0
    4866:	460d      	mov	r5, r1
	__asm__ volatile(
    4868:	f04f 0320 	mov.w	r3, #32
    486c:	f3ef 8611 	mrs	r6, BASEPRI
    4870:	f383 8811 	msr	BASEPRI, r3
    4874:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    4878:	f7ff f8f6 	bl	3a68 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    487c:	2801      	cmp	r0, #1
    487e:	dd05      	ble.n	488c <z_set_timeout_expiry+0x2a>
    4880:	42a0      	cmp	r0, r4
    4882:	dd03      	ble.n	488c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    4884:	4629      	mov	r1, r5
    4886:	4620      	mov	r0, r4
    4888:	f7fc ff2e 	bl	16e8 <z_clock_set_timeout>
	__asm__ volatile(
    488c:	f386 8811 	msr	BASEPRI, r6
    4890:	f3bf 8f6f 	isb	sy
}
    4894:	bd70      	pop	{r4, r5, r6, pc}

00004896 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    4896:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    4898:	f7ff fa06 	bl	3ca8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    489c:	bd08      	pop	{r3, pc}

0000489e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    489e:	b510      	push	{r4, lr}
    48a0:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    48a2:	f7ff ffb8 	bl	4816 <z_abort_timeout>

	if (inactive) {
    48a6:	b9d8      	cbnz	r0, 48e0 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
    48a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    48aa:	b10b      	cbz	r3, 48b0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    48ac:	4620      	mov	r0, r4
    48ae:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    48b0:	f104 0018 	add.w	r0, r4, #24
    48b4:	2100      	movs	r1, #0
    48b6:	f7ff fed8 	bl	466a <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    48ba:	4604      	mov	r4, r0
    48bc:	b180      	cbz	r0, 48e0 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
    48be:	f7ff fee4 	bl	468a <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
    48c2:	4620      	mov	r0, r4
    48c4:	f7ff ff1d 	bl	4702 <z_ready_thread>
	__asm__ volatile(
    48c8:	f04f 0320 	mov.w	r3, #32
    48cc:	f3ef 8011 	mrs	r0, BASEPRI
    48d0:	f383 8811 	msr	BASEPRI, r3
    48d4:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    48d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    48dc:	f7ff bee5 	b.w	46aa <z_reschedule_irqlock>
    48e0:	bd10      	pop	{r4, pc}

000048e2 <k_heap_init>:
{
    48e2:	b410      	push	{r4}
    48e4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    48e8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    48ec:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    48ee:	f7ff bbf5 	b.w	40dc <sys_heap_init>

000048f2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    48f2:	4770      	bx	lr
